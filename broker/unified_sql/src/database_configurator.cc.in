/**
 * Copyright 2025 Centreon
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * For more information : contact@centreon.com
 */
#include <google/protobuf/repeated_ptr_field.h>
#include "com/centreon/broker/misc/string.hh"
#include "com/centreon/broker/sql/table_max_size.hh"
#include "com/centreon/broker/unified_sql/database_configurator.hh"
#include "com/centreon/common/utf8.hh"
#include "common/engine_conf/state.pb.h"

using namespace com::centreon::broker::database;
using namespace com::centreon::broker::misc;

using com::centreon::engine::configuration::ActionHostOn;
using com::centreon::engine::configuration::ActionServiceOn;

namespace com::centreon::broker::unified_sql {

void database_configurator::process() {
  /* We start by disabling pollers with full conf. */
  _disable_pollers_with_full_conf();

  /* Then we process the diff. */

  /* Disabling removed hosts and services */
  //_disable_hosts_and_services();

  if (_stream->supports_bulk_prepared_statements()) {
    /* Adding new objects */
    _add_severities_mariadb(_diff.severities().added(),
                            _stream->severities_cache());
    _add_tags_mariadb(_diff.tags().added(), _stream->tags_cache());
    _add_hosts_mariadb(_diff.hosts().added());
    _add_host_resources_mariadb(_diff.hosts().added(),
                                _stream->resources_cache());
    _add_services_mariadb(_diff.services().added());
    _add_service_resources_mariadb(_diff.services().added(),
                                   _stream->resources_cache());
    _add_anomalydetections_mariadb(_diff.anomalydetections().added());
    _add_anomalydetection_resources_mariadb(_diff.anomalydetections().added(),
                                            _stream->resources_cache());

    /* Modifying existing objects */
    _add_severities_mariadb(_diff.severities().modified(),
                            _stream->severities_cache());
    _add_tags_mariadb(_diff.tags().modified(), _stream->tags_cache());

    _add_hosts_mariadb(_diff.hosts().modified());
    _add_host_resources_mariadb(_diff.hosts().modified(),
                                _stream->resources_cache());
    _add_services_mariadb(_diff.services().modified());
    _add_service_resources_mariadb(_diff.services().modified(),
                                   _stream->resources_cache());
    _add_anomalydetections_mariadb(_diff.anomalydetections().modified());
    _add_anomalydetection_resources_mariadb(
        _diff.anomalydetections().modified(), _stream->resources_cache());

    /* Disabling removed objects */
    _disable_hosts(_diff.hosts().removed());
    _disable_services_mariadb(_diff.services().removed());
    _disable_services_mariadb(_diff.anomalydetections().removed());
    _disable_service_resources_mariadb(_diff.services().removed());
    _disable_service_resources_mariadb(_diff.anomalydetections().removed());
  } else {
    /* Adding new objects */
    _add_severities_mysql(_diff.severities().added(),
                          _stream->severities_cache());
    _add_tags_mysql(_diff.tags().added(), _stream->tags_cache());
    _add_hosts_mysql(_diff.hosts().added());
    _add_host_resources_mysql(_diff.hosts().added(),
                              _stream->resources_cache());
    _add_services_mysql(_diff.services().added());
    _add_service_resources_mysql(_diff.services().added(),
                                 _stream->resources_cache());
    _add_anomalydetections_mysql(_diff.anomalydetections().added());
    _add_anomalydetection_resources_mysql(_diff.anomalydetections().added(),
                                          _stream->resources_cache());

    /* Modifying existing objects */
    _add_severities_mysql(_diff.severities().modified(),
                          _stream->severities_cache());
    _add_tags_mysql(_diff.tags().modified(), _stream->tags_cache());
    _add_hosts_mysql(_diff.hosts().modified());
    _add_host_resources_mysql(_diff.hosts().modified(),
                              _stream->resources_cache());
    _add_services_mysql(_diff.services().modified());
    _add_service_resources_mysql(_diff.services().modified(),
                                 _stream->resources_cache());
    _add_anomalydetections_mysql(_diff.anomalydetections().modified());
    _add_anomalydetection_resources_mysql(_diff.anomalydetections().modified(),
                                          _stream->resources_cache());
  /* Disabling removed objects */
  _disable_hosts(_diff.hosts().removed());
  _disable_services_mysql(_diff.services().removed());
  _disable_services_mysql(_diff.anomalydetections().removed());
  _disable_service_resources_mysql(_diff.services().removed());
  _disable_service_resources_mysql(_diff.anomalydetections().removed());
  }
}

/**
 * @brief Disable hosts, services in the hosts, services and resources tables
 * for the pollers whose configuration is fully received. This is needed because
 * we don't know which hosts and services have been removed.
 */
void database_configurator::_disable_pollers_with_full_conf() {
  for (uint64_t instance_id : _diff.full_conf_poller_id())
    _stream->clean_tables(instance_id);

  // Removed hosts are disabled in the hosts table.
  std::string query(
      fmt::format("UPDATE hosts SET enabled=0 WHERE host_id IN ({})",
                  fmt::join(_diff.hosts().removed(), ",")));
  _stream->get_mysql().run_query(query, database::mysql_error::disable_hosts,
                                 0);

  // Services of removed hosts are disabled in the services table.
  query = fmt::format("UPDATE services SET enabled=0 WHERE host_id IN ({})",
                      fmt::join(_diff.hosts().removed(), ","));
  _stream->get_mysql().run_query(query, database::mysql_error::disable_hosts,
                                 0);

  // Same thing with resources table.
  query = fmt::format(
      "UPDATE resources SET enabled=0 WHERE parent_id IN ({0}) OR (parent_id = "
      "0 AND id IN ({0}))",
      fmt::join(_diff.hosts().removed(), ","));
  _stream->get_mysql().run_query(query, database::mysql_error::disable_hosts,
                                 0);
}

void database_configurator::_disable_hosts(
    ::google::protobuf::RepeatedField<uint64_t> const& host_ids) {
  if (host_ids.empty())
    return;

  std::string query(
      fmt::format("UPDATE hosts SET enabled=0 WHERE host_id IN ({})",
                  fmt::join(host_ids, ",")));
  _stream->get_mysql().run_query(query, database::mysql_error::disable_hosts);
}

/**
 * @brief Disable hosts, services in the hosts, services and resources tables
 * corresponding to the removed hosts in the diff state.
 */
void database_configurator::_disable_hosts_and_services() {
  // Removed hosts are disabled in the hosts table.
  std::string query(
      fmt::format("UPDATE hosts SET enabled=0 WHERE host_id IN ({})",
                  fmt::join(_diff.hosts().removed(), ",")));
  _stream->get_mysql().run_query(query, database::mysql_error::disable_hosts,
                                 0);

  // Services of removed hosts are disabled in the services table.
  query = fmt::format("UPDATE services SET enabled=0 WHERE host_id IN ({})",
                      fmt::join(_diff.hosts().removed(), ","));
  _stream->get_mysql().run_query(query, database::mysql_error::disable_hosts,
                                 0);

  // Same thing with resources table.
  query = fmt::format(
      "UPDATE resources SET enabled=0 WHERE parent_id IN ({0}) OR (parent_id = "
      "0 AND id IN ({0}))",
      fmt::join(_diff.hosts().removed(), ","));
  _stream->get_mysql().run_query(query, database::mysql_error::disable_hosts,
                                 0);
}

/** Database configuration
 * Query: INSERT ON DUPLICATE KEY UPDATE
 * Method: _add_severities
 * Return: absl::flat_hash_map<std::pair<uint64_t, uint16_t>, uint64_t>
 * Key: {key::id, key::type}
 * Protobuf message: engine::configuration::Severity
 * Description: Add severities into the database.
 * Table: severities
 * Data:
 *  FIELD                 & TYPE   & COL NAME    & C_TYPE & OPTIONS
 *  ---------------------------------------------------------------
 *  ${0}                  & uint64 & severity_id & uint64 & AU
 *  key::id               & uint64 & id          & uint64 &
 *  key::type             & uint32 & type        & uint32 &
 *  severity_name         & string & name        & string &
 *  level                 & uint32 & level       & uint32 &
 *  icon_id               & uint64 & icon_id     & uint64 &
 *
 */

/** Database configuration
 * Query: INSERT ON DUPLICATE KEY UPDATE
 * Method: _add_tags
 * Return: absl::flat_hash_map<std::pair<uint64_t, uint16_t>, uint64_t>
 * Key: {key::id, key::type}
 * Protobuf message: engine::configuration::Tag
 * Description: Add tags into the database.
 * Table: tags
 * Data:
 *  FIELD                 & TYPE   & COL NAME    & C_TYPE & OPTIONS
 *  ---------------------------------------------------------------
 *  ${0}                  & uint64 & tag_id      & uint64 & AU
 *  key::id               & uint64 & id          & uint64 &
 *  key::type             & uint32 & type        & uint32 &
 *  tag_name              & string & name        & string &
 *
 */

/** Database configuration
 * Query: INSERT ON DUPLICATE KEY UPDATE
 * Method: _add_hosts
 * Protobuf message: engine::configuration::Host
 * Description: Add hosts into the database.
 * Table: hosts
 * Data:
 *   FIELD                                                                  & TYPE   & COL NAME                      & C_TYPE & OPTIONS
 *   ----------------------------------------------------------------------------------------------------------------------------------
 *   host_id                                                                & uint64 & host_id                       & int32  & U
 *   host_name                                                              & string & name                          & string &
 *   poller_id                                                              & uint64 & instance_id                   & int32  &
 *   action_url                                                             & string & action_url                    & string &
 *   checks_active                                                          & bool   & active_checks                 & bool   &
 *   address                                                                & string & address                       & string &
 *   alias                                                                  & string & alias                         & string &
 *   check_command                                                          & string & check_command                 & string &
 *   check_freshness                                                        & bool   & check_freshness               & bool   &
 *   check_interval                                                         & uint32 & check_interval                & double &
 *   check_period                                                           & string & check_period                  & string &
 *   checks_active                                                          & bool   & default_active_checks         & bool   &
 *   event_handler_enabled                                                  & bool   & default_event_handler_enabled & bool   &
 *   flap_detection_enabled                                                 & bool   & default_flap_detection        & bool   &
 *   notifications_enabled                                                  & bool   & default_notify                & bool   &
 *   checks_passive                                                         & bool   & default_passive_checks        & bool   &
 *   process_perf_data                                                      & bool   & default_process_perfdata      & bool   &
 *   display_name                                                           & string & display_name                  & string &
 *   ${true}                                                                & bool   & enabled                       & bool   &
 *   event_handler                                                          & string & event_handler                 & string &
 *   event_handler_enabled                                                  & bool   & event_handler_enabled         & bool   &
 *   first_notification_delay                                               & uint32 & first_notification_delay      & double &
 *   flap_detection_enabled                                                 & bool   & flap_detection                & bool   &
 *   ${msg.flap_detection_options() & ActionHostOn::action_hst_down}        & bool   & flap_detection_on_down        & bool   &
 *   ${msg.flap_detection_options() & ActionHostOn::action_hst_unreachable} & bool   & flap_detection_on_unreachable & bool   &
 *   ${msg.flap_detection_options() & ActionHostOn::action_hst_up}          & bool   & flap_detection_on_up          & bool   &
 *   freshness_threshold                                                    & uint32 & freshness_threshold           & double &
 *   high_flap_threshold                                                    & uint32 & high_flap_threshold           & double &
 *   icon_image                                                             & string & icon_image                    & string &
 *   icon_image_alt                                                         & string & icon_image_alt                & string &
 *   low_flap_threshold                                                     & uint32 & low_flap_threshold            & double &
 *   max_check_attempts                                                     & uint32 & max_check_attempts            & int32  &
 *   notes                                                                  & string & notes                         & string &
 *   notes_url                                                              & string & notes_url                     & string &
 *   notification_interval                                                  & uint32 & notification_interval         & double &
 *   notification period                                                    & string & notification_period           & string &
 *   notifications_enabled                                                  & bool   & notify                        & bool   &
 *   ${msg.notification_options() & ActionHostOn::action_hst_down}          & bool   & notify_on_down                & bool   &
 *   ${msg.notification_options() & ActionHostOn::action_hst_downtime}      & bool   & notify_on_downtime            & bool   &
 *   ${msg.notification_options() & ActionHostOn::action_hst_flapping}      & bool   & notify_on_flapping            & bool   &
 *   ${msg.notification_options() & ActionHostOn::action_hst_up}            & bool   & notify_on_recovery            & bool   &
 *   ${msg.notification_options() & ActionHostOn::action_hst_unreachable}   & bool   & notify_on_unreachable         & bool   &
 *   obsess_over_host                                                       & bool   & obsess_over_host              & bool   &
 *   checks_passive                                                         & bool   & passive_checks                & bool   &
 *   process_perf_data                                                      & bool   & process_perfdata              & bool   &
 *   retain_nonstatus_information                                           & bool   & retain_nonstatus_information  & bool   &
 *   retain_status_information                                              & bool   & retain_status_information     & bool   &
 *   retry_interval                                                         & uint32 & retry_interval                & double &
 *   ${msg.stalking_options() & ActionHostOn::action_hst_down}              & bool   & stalk_on_down                 & bool   &
 *   ${msg.stalking_options() & ActionHostOn::action_hst_unreachable}       & bool   & stalk_on_unreachable          & bool   &
 *   ${msg.stalking_options() & ActionHostOn::action_hst_up}                & bool   & stalk_on_up                   & bool   &
 *   statusmap_image                                                        & string & statusmap_image               & string &
 *   timezone                                                               & string & timezone                      & string & O
 */

/** Database configuration
 * Query: INSERT ON DUPLICATE KEY UPDATE
 * Method: _add_host_resources
 * Return: absl::flat_hash_map<std::pair<uint64_t, uint64_t>, uint64_t>
 * Key: {host_id, ${0}}
 * Protobuf message: engine::configuration::Host
 * Description: Add hosts into the resources database.
 * Table: resources
 * Data:
 *   FIELD                 & TYPE   & COL NAME               & C_TYPE & OPTIONS
 *   --------------------------------------------------------------------------
 *   ${0}                  & uint64 & resource_id            & uint64 & AU
 *   host_id               & uint64 & id                     & uint64 & U
 *   ${0}                  & uint64 & parent_id              & uint64 &
 *   ${NULL}               & uint64 & internal_id            & uint64 &
 *   ${1}                  & uint32 & type                   & uint32 &
 *   max_check_attempts    & uint32 & max_check_attempts     & uint32 &
 *   poller_id             & uint64 & poller_id              & uint64 &
 *   severity_id           & uint64 & severity_id            & uint64 & O
 *   host_name             & string & name                   & string &
 *   alias                 & string & alias                  & string &
 *   address               & string & address                & string &
 *   ${NULL}               & string & parent_name            & string & O
 *   icon_id               & uint64 & icon_id                & uint64 & O
 *   notes_url             & string & notes_url              & string &
 *   notes                 & string & notes                  & string &
 *   action_url            & string & action_url             & string &
 *   notifications_enabled & bool   & notifications_enabled  & bool   &
 *   checks_passive        & bool   & passive_checks_enabled & bool   &
 *   checks_active         & bool   & active_checks_enabled  & bool   &
 *   ${true}               & bool   & enabled                & bool   &
 */

/** Database configuration
 * Query: INSERT ON DUPLICATE KEY UPDATE
 * Method: _add_services
 * Protobuf message: engine::configuration::Service
 * Description: Add services into the database.
 * Table: services
 * Data:
 *  FIELD                                                               & TYPE   & COL NAME                      & C_TYPE & OPTIONS
 *  ----------------------------------------------------------------------------------------------------------------------------------
 *  host_id                  & uint64_t & host_id                       & int32  & U
 *  service_description      & string   & description                   & string &
 *  service_id               & uint64   & service_id                    & int32  & U
 *  action_url               & string   & action_url                    & string &
 *  checks_active            & bool     & active_checks                 & bool   &
 *  check_command            & string   & check_command                 & string &
 *  check_freshness          & bool     & check_freshness               & bool   &
 *  check_interval           & uint32   & check_interval                & double &
 *  check_period             & string   & check_period                  & string &
 *  checks_active            & bool     & default_active_checks         & bool   &
 *  event_handler_enabled    & bool     & default_event_handler_enabled & bool   &
 *  flap_detection_enabled   & bool     & default_flap_detection        & bool   &
 *  notifications_enabled    & bool     & default_notify                & bool   &
 *  checks_passive           & bool     & default_passive_checks        & bool   &
 *  process_perf_data        & bool     & default_process_perfdata      & bool   &
 *  display_name             & string   & display_name                  & string &
 *  ${true}                  & bool     & enabled                       & bool   &
 *  event_handler            & string   & event_handler                 & string &
 *  event_handler_enabled    & bool     & event_handler_enabled         & bool   &
 *  first_notification_delay & uint32   & first_notification_delay      & double &
 *  flap_detection_enabled   & bool     & flap_detection                & bool   &
 *  ${msg.flap_detection_options() & ActionServiceOn::action_svc_critical} & bool & flap_detection_on_critical & bool &
 *  ${msg.flap_detection_options() & ActionServiceOn::action_svc_ok}       & bool & flap_detection_on_ok       & bool &
 *  ${msg.flap_detection_options() & ActionServiceOn::action_svc_unknown}  & bool & flap_detection_on_unknown  & bool &
 *  ${msg.flap_detection_options() & ActionServiceOn::action_svc_warning}  & bool & flap_detection_on_warning  & bool &
 *  freshness_threshold   & uint32 & freshness_threshold   & double &
 *  high_flap_threshold   & uint32 & high_flap_threshold   & double &
 *  icon_image            & string & icon_image            & string &
 *  icon_image_alt        & string & icon_image_alt        & string &
 *  low_flap_threshold    & uint32 & low_flap_threshold    & double &
 *  max_check_attempts    & uint32 & max_check_attempts    & int32  &
 *  notes                 & string & notes                 & string &
 *  notes_url             & string & notes_url             & string &
 *  notification_interval & uint32 & notification_interval & double &
 *  notification_period   & string & notification_period   & string & O
 *  notifications_enabled & bool   & notify                & bool   &
 *  ${msg.notification_options() & ActionServiceOn::action_svc_critical} & bool & notify_on_critical & bool &
 *  ${msg.notification_options() & ActionServiceOn::action_svc_downtime} & bool & notify_on_downtime & bool &
 *  ${msg.notification_options() & ActionServiceOn::action_svc_flapping} & bool & notify_on_flapping & bool &
 *  ${msg.notification_options() & ActionServiceOn::action_svc_ok} & bool & notify_on_recovery & bool &
 *  ${msg.notification_options() & ActionServiceOn::action_svc_unknown} & bool & notify_on_unknown & bool &
 *  ${msg.notification_options() & ActionServiceOn::action_svc_warning} & bool & notify_on_warning & bool &
 *  obsess_over_service          & bool   & obsess_over_service          & bool   &
 *  checks_passive               & bool   & passive_checks               & bool   &
 *  process_perf_data            & bool   & process_perfdata             & bool   &
 *  retain_nonstatus_information & bool   & retain_nonstatus_information & bool   &
 *  retain_status_information    & bool   & retain_status_information    & bool   &
 *  retry_interval               & uint32 & retry_interval               & double &
 *  ${msg.stalking_options() & ActionServiceOn::action_svc_critical} & bool & stalk_on_critical & bool &
 *  ${msg.stalking_options() & ActionServiceOn::action_svc_ok}       & bool & stalk_on_ok       & bool &
 *  ${msg.stalking_options() & ActionServiceOn::action_svc_unknown}  & bool & stalk_on_unknown  & bool &
 *  ${msg.stalking_options() & ActionServiceOn::action_svc_warning}  & bool & stalk_on_warning  & bool &
 */

/** Database configuration
 * Query: UPDATE
 * Method: _disable_services
 * Protobuf message: engine::configuration::HostServiceId
 * Description: Disable services in the database.
 * Table: services
 * Data:
 *  FIELD                    & TYPE   & COL NAME                      & C_TYPE & OPTIONS
 *  ------------------------------------------------------------------------------------
 *  host_id                  & uint64_t & host_id                     & int32  & U
 *  service_id               & uint64   & service_id                  & int32  & U
 *  ${false}                 & bool     & enabled                     & bool   &
 */

/** Database configuration
 * Query: UPDATE
 * Method: _disable_service_resources
 * Protobuf message: engine::configuration::HostServiceId
 * Description: Disable services in the database.
 * Table: resources
 * Data:
 *  FIELD                    & TYPE   & COL NAME                      & C_TYPE & OPTIONS
 *  ------------------------------------------------------------------------------------
 *  host_id                  & uint64_t & parent_id                   & int64  & U
 *  service_id               & uint64   & id                          & int64  & U
 *  ${false}                 & bool     & enabled                     & bool   &
 */

/** Database configuration
 * Query: INSERT ON DUPLICATE KEY UPDATE
 * Method: _add_anomalydetections
 * Protobuf message: engine::configuration::Anomalydetection
 * Description: Add services into the database.
 * Table: services
 * Data:
 *  FIELD                                                               & TYPE   & COL NAME                      & C_TYPE & OPTIONS
 *  ----------------------------------------------------------------------------------------------------------------------------------
 *  host_id                  & uint64_t & host_id                       & int32  & U
 *  service_description      & string   & description                   & string &
 *  service_id               & uint64   & service_id                    & int32  & U
 *  action_url               & string   & action_url                    & string &
 *  checks_active            & bool     & active_checks                 & bool   &
 *  check_freshness          & bool     & check_freshness               & bool   &
 *  check_interval           & uint32   & check_interval                & double &
 *  checks_active            & bool     & default_active_checks         & bool   &
 *  event_handler_enabled    & bool     & default_event_handler_enabled & bool   &
 *  flap_detection_enabled   & bool     & default_flap_detection        & bool   &
 *  notifications_enabled    & bool     & default_notify                & bool   &
 *  checks_passive           & bool     & default_passive_checks        & bool   &
 *  process_perf_data        & bool     & default_process_perfdata      & bool   &
 *  display_name             & string   & display_name                  & string &
 *  ${true}                  & bool     & enabled                       & bool   &
 *  event_handler            & string   & event_handler                 & string &
 *  event_handler_enabled    & bool     & event_handler_enabled         & bool   &
 *  first_notification_delay & uint32   & first_notification_delay      & double &
 *  flap_detection_enabled   & bool     & flap_detection                & bool   &
 *  ${msg.flap_detection_options() & ActionServiceOn::action_svc_critical} & bool & flap_detection_on_critical & bool &
 *  ${msg.flap_detection_options() & ActionServiceOn::action_svc_ok}       & bool & flap_detection_on_ok       & bool &
 *  ${msg.flap_detection_options() & ActionServiceOn::action_svc_unknown}  & bool & flap_detection_on_unknown  & bool &
 *  ${msg.flap_detection_options() & ActionServiceOn::action_svc_warning}  & bool & flap_detection_on_warning  & bool &
 *  freshness_threshold   & uint32 & freshness_threshold   & double &
 *  high_flap_threshold   & uint32 & high_flap_threshold   & double &
 *  icon_image            & string & icon_image            & string &
 *  icon_image_alt        & string & icon_image_alt        & string &
 *  low_flap_threshold    & uint32 & low_flap_threshold    & double &
 *  max_check_attempts    & uint32 & max_check_attempts    & int32  &
 *  notes                 & string & notes                 & string &
 *  notes_url             & string & notes_url             & string &
 *  notification_interval & uint32 & notification_interval & double &
 *  notification_period   & string & notification_period   & string & O
 *  notifications_enabled & bool   & notify                & bool   &
 *  ${msg.notification_options() & ActionServiceOn::action_svc_critical} & bool & notify_on_critical & bool &
 *  ${msg.notification_options() & ActionServiceOn::action_svc_downtime} & bool & notify_on_downtime & bool &
 *  ${msg.notification_options() & ActionServiceOn::action_svc_flapping} & bool & notify_on_flapping & bool &
 *  ${msg.notification_options() & ActionServiceOn::action_svc_ok} & bool & notify_on_recovery & bool &
 *  ${msg.notification_options() & ActionServiceOn::action_svc_unknown} & bool & notify_on_unknown & bool &
 *  ${msg.notification_options() & ActionServiceOn::action_svc_warning} & bool & notify_on_warning & bool &
 *  obsess_over_service          & bool   & obsess_over_service          & bool   &
 *  checks_passive               & bool   & passive_checks               & bool   &
 *  process_perf_data            & bool   & process_perfdata             & bool   &
 *  retain_nonstatus_information & bool   & retain_nonstatus_information & bool   &
 *  retain_status_information    & bool   & retain_status_information    & bool   &
 *  retry_interval               & uint32 & retry_interval               & double &
 *  ${msg.stalking_options() & ActionServiceOn::action_svc_critical} & bool & stalk_on_critical & bool &
 *  ${msg.stalking_options() & ActionServiceOn::action_svc_ok}       & bool & stalk_on_ok       & bool &
 *  ${msg.stalking_options() & ActionServiceOn::action_svc_unknown}  & bool & stalk_on_unknown  & bool &
 *  ${msg.stalking_options() & ActionServiceOn::action_svc_warning}  & bool & stalk_on_warning  & bool &
 */

static uint32_t get_service_type(const engine::configuration::Service& msg) {
  if (absl::StartsWith(msg.host_name(), "_Module_Meta") &&
      absl::StartsWith(msg.service_description(), "meta_"))
    return 2;  // com::centreon::engine::service_type::METASERVICE
  else if (absl::StartsWith(msg.host_name(), "_Module_BAM") &&
           absl::StartsWith(msg.service_description(), "ba_"))
    return 3;  // com::centreon::engine::service_type::BA
  else
    return 0;  // com::centreon::engine::service_type::SERVICE
}

/** Database configuration
 * Query: INSERT ON DUPLICATE KEY UPDATE
 * Method: _add_service_resources
 * Return: absl::flat_hash_map<std::pair<uint64_t, uint64_t>, uint64_t>
 * Key: {host_id, service_id}
 * Protobuf message: engine::configuration::Service
 * Description: Add services into the resources database.
 * Table: resources
 * Data:
 *  FIELD                 & TYPE   & COL NAME               & C_TYPE & OPTIONS
 *  --------------------------------------------------------------------------
 * ${0} & uint64 & resource_id & uint64_t & AU
 * service_id & uint64 & id & uint64 & U
 * host_id & uint64 & parent_id & uint64 & U
 * ${NULL} & uint64 & internal_id & uint64 &
 * ${get_service_type(msg)} & uint32 & type & uint32 &
 * max_check_attempts & uint32 & max_check_attempts & uint32 &
 * ${_stream->hosts_instances_cache(msg.host_id())} & uint64 & poller_id & uint64 &
 * severity_id & uint64 & severity_id & uint64 & O
 * service_description & string & name & string &
 * ${NULL} & string & alias & string &
 * host_name & string & parent_name & string &
 * notes_url & string & notes_url & string &
 * notes & string & notes & string &
 * action_url & string & action_url & string &
 * notifications_enabled & bool & notifications_enabled & bool &
 * checks_passive & bool & passive_checks_enabled & bool &
 * checks_active & bool & active_checks_enabled & bool &
 * ${true} & bool & enabled & bool &
 */

/** Database configuration
 * Query: INSERT ON DUPLICATE KEY UPDATE
 * Method: _add_anomalydetection_resources
 * Return: absl::flat_hash_map<std::pair<uint64_t, uint64_t>, uint64_t>
 * Key: {host_id, service_id}
 * Protobuf message: engine::configuration::Anomalydetection
 * Description: Add anomaly detections into the resources database.
 * Table: resources
 * Data:
 *  FIELD                 & TYPE   & COL NAME               & C_TYPE & OPTIONS
 *  --------------------------------------------------------------------------
 * ${0} & uint64 & resource_id & uint64_t & AU
 * service_id & uint64 & id & uint64 & U
 * host_id & uint64 & parent_id & uint64 & U
 * ${NULL} & uint64 & internal_id & uint64 &
 * ${4} & uint32 & type & uint32 &
 * max_check_attempts & uint32 & max_check_attempts & uint32 &
 * ${_stream->hosts_instances_cache(msg.host_id())} & uint64 & poller_id & uint64 &
 * severity_id & uint64 & severity_id & uint64 & O
 * service_description & string & name & string &
 * ${NULL} & string & alias & string &
 * host_name & string & parent_name & string &
 * notes_url & string & notes_url & string &
 * notes & string & notes & string &
 * action_url & string & action_url & string &
 * notifications_enabled & bool & notifications_enabled & bool &
 * checks_passive & bool & passive_checks_enabled & bool &
 * checks_active & bool & active_checks_enabled & bool &
 * ${true} & bool & enabled & bool &
 */

}  // namespace com::centreon::broker::unified_sql
