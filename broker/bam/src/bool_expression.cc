/*
** Copyright 2014, 2021 Centreon
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
** For more information : contact@centreon.com
*/

#include "com/centreon/broker/bam/bool_expression.hh"

#include "com/centreon/broker/bam/bool_value.hh"
#include "com/centreon/broker/bam/impact_values.hh"
#include "com/centreon/broker/log_v2.hh"

using namespace com::centreon::broker::bam;
using namespace com::centreon::broker;

/**
 * @brief Constructor of a boolean expression.
 *
 * @param id Id of the boolean expression
 * @param impact_if True if impact is applied if the expression is true.False
 * otherwise.
 */
bool_expression::bool_expression(uint32_t id, bool impact_if)
    : _id(id), _impact_if(impact_if) {}

/**
 *  Base boolean expression got updated.
 *
 *  @param[in]  child    Expression that got updated.
 *  @param[out] visitor  Receive events generated by this object.
 *
 *  @return True if the values of this object were modified.
 */
bool bool_expression::child_has_update(computable* child, io::stream* visitor) {
  (void)visitor;
  // It is useless to maintain a cache of expression values in this
  // class, as the bool_* classes already cache most of them.
  if (child == _expression.get()) {
    // Logging.
    log_v2::bam()->debug(
        "BAM: boolean expression {} is getting notified of child update", _id);
  }
  return true;
}

/**
 *  Get the boolean expression state.
 *
 *  @return Either OK (0) or CRITICAL (2).
 */
state bool_expression::get_state() const {
  bool v = _expression->boolean_value();
  state retval = v == _impact_if ? state_critical : state_ok;
  log_v2::bam()->debug(
      "BAM: boolean expression {} - impact if: {} - value: {} - state: {}", _id,
      _impact_if, v, retval);
  return retval;
}

/**
 *  Get if the state is known, i.e has been computed at least once.
 *
 *  @return  True if the state is known.
 */
bool bool_expression::state_known() const {
  return _expression->state_known();
}

/**
 *  Get if the boolean expression is in downtime.
 *
 *  @return  True if the boolean expression is in downtime.
 */
bool bool_expression::in_downtime() const {
  return _expression->in_downtime();
}

/**
 *  Get the expression.
 *
 *  @return  The expression.
 */
std::shared_ptr<bool_value> bool_expression::get_expression() const {
  return _expression;
}

/**
 *  Set evaluable boolean expression.
 *
 *  @param[in] expression Boolean expression.
 */
void bool_expression::set_expression(
    const std::shared_ptr<bool_value>& expression) {
  _expression = expression;
}

uint32_t bool_expression::get_id() const {
  return _id;
}
