syntax = "proto3";

import "google/protobuf/empty.proto";

package com.centreon.broker;

service Broker {
  rpc GetVersion(google.protobuf.Empty) returns (Version) {}

  // stats
  rpc GetGenericStats(google.protobuf.Empty) returns (GenericString) {}
  rpc GetSqlManagerStats(google.protobuf.Empty) returns (SqlManagerStats) {}
  rpc GetConflictManagerStats(google.protobuf.Empty)
      returns (ConflictManagerStats) {}
  rpc GetMuxerStats(GenericString) returns (MuxerStats) {}

  rpc GetNumModules(google.protobuf.Empty) returns (GenericSize) {}
  rpc GetModulesStats(GenericNameOrIndex) returns (GenericString) {}

  rpc GetNumEndpoint(google.protobuf.Empty) returns (GenericSize) {}
  rpc GetEndpointStats(GenericNameOrIndex) returns (GenericString) {}

  rpc GetProcessingStats(google.protobuf.Empty) returns (ProcessingStats) {}

  /**
   * @brief Rebuild RRD metric RRD files from data in the SQL database.
   *
   * @param IndexIds Message containing a vector of metric ids.
   *
   * @return An Empty object.
   */
  rpc RebuildRRDGraphs(IndexIds) returns (google.protobuf.Empty) {}
  rpc RemoveGraphs(ToRemove) returns (google.protobuf.Empty) {}
  /**
  * @brief Retrieve some informations about loggers. If a name is specified,
  * Informations are concentrated on the logger of that name.
  *
  * @param A logger name.
  *
  * @return A LogInfo message.
  */
  rpc GetLogInfo(GenericString) returns (LogInfo) {}

  /**
  * @brief Set a param of loggers.
  *
  * @param A message with a logger and a level as strings.
  *
  * @return nothing.
  */
  rpc SetLogParam(LogParam) returns (google.protobuf.Empty) {}
}

message Version {
  int32 major = 1;
  int32 minor = 2;
  int32 patch = 3;
}

message LogInfo {
  string log_file = 1;
  uint32 log_flush_period = 2;
  map<string, string> level = 3;
}


message LogParam {
  enum LogParamType {
    NONE =0;
    FLUSH_PERIOD = 1;
    LOG_LEVEL = 2;
  }
  LogParamType param = 1;
  string name = 2;
  string value = 3;
}

message GenericString {
  string str_arg = 1;
}

message GenericInt {
  uint32 value = 1;
}

message GenericSize {
  uint32 size = 1;
}

// 1 => access by name
// 2 => access by index
// not set => all elems
message GenericNameOrIndex {
  oneof nameOrIndex {
    string str = 1;
    uint32 idx = 2;
  }
}

message GenericResponse {
  bool ok = 1;
  string err_msg = 2;
}

message SqlConnectionStats {
  int32 waiting_tasks = 1;
  oneof last_switch {
    int64 up_since = 3;
    int64 down_since = 4;
  };
}

message SqlManagerStats {
  repeated SqlConnectionStats connections = 1;
}

message ConflictManagerStats {
  int32 events_handled = 1;
  int32 waiting_events = 2;
  int32 max_pending_events = 3;
  int32 sql = 4;
  int32 storage = 5;
  uint32 max_perfdata_events = 6;
  uint32 loop_timeout = 7;
  double speed = 8;
}

message ModuleStats {
  string name = 1;
  string size = 2;
  string state = 3;
}

message ThreadPool {
  string latency = 1;
  uint32 size = 2;
}

message EngineStats {
  enum Mode {
    NOT_STARTED = 0;
    RUNNING = 1;
    STOPPED = 2;
  }
  Mode mode = 1;
  uint32 processed_events = 2;
}

message QueueFileStats {
  string name = 1;
  uint32 max_file_size = 2;
  uint32 file_write_path = 3;
  uint32 file_write_offset = 4;
  uint32 file_read_path = 5;
  uint32 file_read_offset = 6;
  double file_percent_processed = 7;
  int64 file_expected_terminated_at = 8;
  string file_expected_terminated_in = 9;
}

message MuxerStats {
  uint32 total_events = 1;
  uint32 unacknowledged_events = 2;
  QueueFileStats queue_file = 3;
}

message ProcessingStats {
  EngineStats engine = 1;
  map<string, MuxerStats> muxers = 2;
}

message BrokerStats {
  string asio_version = 1;
  string version = 2;
  uint32 pid = 3;
  int64 now = 4;
  ThreadPool pool_stats = 5;
  repeated ModuleStats modules = 6;
  SqlManagerStats sql_manager = 7;
  ConflictManagerStats conflict_manager = 8;
  ProcessingStats processing = 9;
}

message IndexIds {
  repeated uint64 index_ids = 1;
}

message ToRemove {
  repeated uint64 index_ids = 1;
  repeated uint64 metric_ids = 2;
}
