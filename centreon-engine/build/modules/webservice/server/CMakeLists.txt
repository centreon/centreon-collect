##
## Copyright 2011-2012 Merethis
##
## This file is part of Centreon Engine.
##
## Centreon Engine is free software: you can redistribute it and/or
## modify it under the terms of the GNU General Public License version 2
## as published by the Free Software Foundation.
##
## Centreon Engine is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with Centreon Engine. If not, see
## <http://www.gnu.org/licenses/>.
##

# Directories.
set(SRC_DIR "${MODULE_DIR}/server/src")
set(INC_DIR "${MODULE_DIR}/server/inc/com/centreon/engine/modules/webservice")

# Find Xercesc's headers.
if (WITH_XERCESC_INCLUDE_DIR)
  find_file(
    XERCESC_HEADER_FOUND
    "xercesc/dom/DOM.hpp"
    PATHS "${WITH_XERCESC_INCLUDE_DIR}"
    NO_DEFAULT_PATH)
  if (NOT XERCESC_HEADER_FOUND)
    message(FATAL_ERROR "Could not find Xercesc's headers in ${WITH_XERCESC_INCLUDE_DIR}.")
  endif ()
  include_directories("${WITH_XERCESC_INCLUDE_DIR}")
else ()
  find_path(XERCESC_INCLUDE_DIR "xercesc/dom/DOM.hpp")
  if (NOT XERCESC_INCLUDE_DIR)
    message(FATAL_ERROR "Could not find Xercesc's headers (try WITH_XERCESC_INCLUDE_DIR).")
  endif ()
  include_directories("${XERCESC_INCLUDE_DIR}")
endif ()

# Find Xercesc's library.
if (WITH_XERCESC_LIBRARIES)
  set(XERCESC_LIBRARIES "${WITH_XERCESC_LIBRARIES}")
elseif (WITH_XERCESC_LIBRARY_DIR)
  find_library(
    XERCESC_LIBRARIES
    "xerces-c"
    PATHS "${WITH_XERCESC_LIBRARY_DIR}"
    NO_DEFAULT_PATH)
  if (NOT XERCESC_LIBRARIES)
    message(FATAL_ERROR "Could not find Xercesc's library in ${WITH_XERCESC_LIBRARY_DIR}.")
  endif ()
else ()
  find_library(XERCESC_LIBRARIES "xerces-c")
  if (NOT XERCESC_LIBRARIES)
    message(FATAL_ERROR "Could not find Xercesc's library (try WITH_XERCESC_LIBRARY_DIR or WITH_XERCESC_LIBRARIES).")
  endif ()
endif ()

# Include directories.
include_directories("${MODULE_DIR}/inc")

# Generate webservice header from WSDL.
add_custom_command(OUTPUT "${MODULE_DIR}/server/centreon-engine-ws.hh"
  COMMAND "${WSDL2H_PROGRAM}" "-o" "${MODULE_DIR}/server/centreon-engine-ws.hh" "-t${MODULE_DIR}/typemap.dat" "${MODULE_DIR}/centreon-engine.wsdl")

# Generate webservice sources from header.
add_custom_command(OUTPUT
  "${MODULE_DIR}/server/centreonengine.nsmap"
  "${MODULE_DIR}/server/soapC.cpp"
  "${MODULE_DIR}/server/soapH.h"
  "${MODULE_DIR}/server/soapServer.cpp"
  "${MODULE_DIR}/server/soapStub.h"
  COMMAND "${SOAPCPP2_PROGRAM}" "-S" "-L" "-x" "-d${MODULE_DIR}/server" "-I${GSOAP_INCLUDE_DIR}" "${MODULE_DIR}/server/centreon-engine-ws.hh"
  DEPENDS "${MODULE_DIR}/server/centreon-engine-ws.hh")

# Include directories.
include_directories("${MODULE_DIR}/server")
include_directories("${MODULE_DIR}/server/inc")
include_directories("${MODULE_DIR}/../external_commands/inc")

# webservice target.
add_library("webservice" SHARED
  # Auto-generated.
  "${MODULE_DIR}/server/centreonengine.nsmap"
  "${MODULE_DIR}/server/soapC.cpp"
  "${MODULE_DIR}/server/soapServer.cpp"
  "${MODULE_DIR}/server/soapH.h"
  "${MODULE_DIR}/server/soapStub.h"
  # Sources.
  "${SRC_DIR}/commands.cc"
  "${SRC_DIR}/commands_command.cc"
  "${SRC_DIR}/commands_comment.cc"
  "${SRC_DIR}/commands_configuration.cc"
  "${SRC_DIR}/commands_contact.cc"
  "${SRC_DIR}/commands_contactgroup.cc"
  "${SRC_DIR}/commands_host.cc"
  "${SRC_DIR}/commands_hostgroup.cc"
  "${SRC_DIR}/commands_misc.cc"
  "${SRC_DIR}/commands_service.cc"
  "${SRC_DIR}/commands_servicegroup.cc"
  "${SRC_DIR}/commands_timeperiod.cc"
  "${SRC_DIR}/configuration.cc"
  "${SRC_DIR}/configuration/save/objects.cc"
  "${SRC_DIR}/configuration/save/resource.cc"
  "${SRC_DIR}/configuration/save/state.cc"
  "${SRC_DIR}/create_object.cc"
  "${SRC_DIR}/main.cc"
  "${SRC_DIR}/schedule_object.cc"
  "${SRC_DIR}/ssl.cc"
  "${SRC_DIR}/sync.cc"
  "${SRC_DIR}/sync_lock.cc"
  "${SRC_DIR}/webservice.cc"
  # Headers.
  "${INC_DIR}/configuration.hh"
  "${INC_DIR}/configuration/save/objects.hh"
  "${INC_DIR}/configuration/save/resource.hh"
  "${INC_DIR}/configuration/save/state.hh"
  "${INC_DIR}/create_object.hh"
  "${INC_DIR}/schedule_object.hh"
  "${INC_DIR}/ssl.hh"
  "${INC_DIR}/sync.hh"
  "${INC_DIR}/sync_lock.hh"
  "${INC_DIR}/webservice.hh"
)

# Prettier name.
set_target_properties("webservice" PROPERTIES PREFIX "")

# Check compiler version supports flags.
include(CheckCXXCompilerFlag)
check_cxx_compiler_flag("-Wno-unused-parameter" COMPILER_SUPPORTS_WNO_UNUSED_PARAMETER)
check_cxx_compiler_flag("-Wno-vla" COMPILER_SUPPORTS_WNO_VLA)

# Avoid warnings on autogenerated soapC.cpp file.
if (COMPILER_SUPPORTS_WNO_UNUSED_PARAMETER
    AND COMPILER_SUPPORTS_WNO_VLA)
  unset(compile_flags)
  get_source_file_property(compile_flags
    "${MODULE_DIR}/server/soapC.cpp"
    COMPILE_FLAGS)
  if (compile_flags)
    set(compile_flags "${compile_flags} -Wno-unused-parameter -Wno-vla")
  else ()
    set(compile_flags "-Wno-unused-parameter -Wno-vla")
  endif ()
  set_source_files_properties("${MODULE_DIR}/server/soapC.cpp"
    PROPERTIES COMPILE_FLAGS "${compile_flags}")
endif ()

# Link target with libraries.
target_link_libraries("webservice"
  ${GSOAP_LIBRARIES}
  ${SSL_LIBRARIES}
  ${CRYPTO_LIBRARIES}
  ${ZLIB_LIBRARIES}
  ${XERCESC_LIBRARIES}
  "externalcmd")

# Install rule.
install(TARGETS "webservice"
  DESTINATION "${PREFIX_LIB}/"
  COMPONENT "runtime")

if (WITH_TESTING)
  #Set directories.
  set(TEST_DIR "${TEST_DIR}/modules/webservice/server")

  # Test calling configuration_save_resource.
  set(TEST_NAME "modules_webservice_configuration_save_resource")
  add_executable("${TEST_NAME}"
    "${TEST_DIR}/configuration/save/resource.cc")
  target_link_libraries("${TEST_NAME}" "cce_core" "webservice")
  add_test("${TEST_NAME}" "${TEST_NAME}")

  # Test calling configuration_save_state.
  set(TEST_NAME "modules_webservice_configuration_save_state")
  add_executable("${TEST_NAME}"
    "${TEST_DIR}/configuration/save/state.cc")
  target_link_libraries("${TEST_NAME}" "cce_core" "webservice")
  add_test("${TEST_NAME}" "${TEST_NAME}" "${TEST_DIR}/configuration/save/cfg/state.cfg")

  # Test calling configuration_save_objects.
  set(TEST_NAME "modules_webservice_configuration_save_objects")
  add_executable("${TEST_NAME}"
    "${TEST_DIR}/configuration/save/objects.cc")
  target_link_libraries("${TEST_NAME}" "cce_core" "webservice")
  add_test(
    "${TEST_NAME}_commands"
    "${TEST_NAME}"
    "command"
    "${TEST_DIR}/configuration/save/cfg/minimal.cfg"
    "${TEST_DIR}/configuration/save/cfg/commands.cfg")
  add_test(
    "${TEST_NAME}_contacts"
    "${TEST_NAME}"
    "contact"
    "${TEST_DIR}/configuration/save/cfg/minimal.cfg"
    "${TEST_DIR}/configuration/save/cfg/contacts.cfg")
  add_test(
    "${TEST_NAME}_contactgroups"
    "${TEST_NAME}"
    "contactgroup"
    "${TEST_DIR}/configuration/save/cfg/minimal.cfg"
    "${TEST_DIR}/configuration/save/cfg/contactgroups.cfg")
  add_test(
    "${TEST_NAME}_hosts"
    "${TEST_NAME}"
    "host"
    "${TEST_DIR}/configuration/save/cfg/minimal.cfg"
    "${TEST_DIR}/configuration/save/cfg/hosts.cfg")
  add_test(
    "${TEST_NAME}_hostescalations"
    "${TEST_NAME}"
    "hostescalation"
    "${TEST_DIR}/configuration/save/cfg/minimal.cfg"
    "${TEST_DIR}/configuration/save/cfg/hostescalations.cfg")
  add_test(
    "${TEST_NAME}_hostdependencies"
    "${TEST_NAME}"
    "hostdependency"
    "${TEST_DIR}/configuration/save/cfg/minimal.cfg"
    "${TEST_DIR}/configuration/save/cfg/hostdependencies.cfg")
  add_test(
    "${TEST_NAME}_hostgroups"
    "${TEST_NAME}"
    "hostgroup"
    "${TEST_DIR}/configuration/save/cfg/minimal.cfg"
    "${TEST_DIR}/configuration/save/cfg/hostgroups.cfg")
  add_test(
    "${TEST_NAME}_services"
    "${TEST_NAME}"
    "service"
    "${TEST_DIR}/configuration/save/cfg/minimal.cfg"
    "${TEST_DIR}/configuration/save/cfg/services.cfg")
  add_test(
    "${TEST_NAME}_servicedependencies"
    "${TEST_NAME}"
    "servicedependency"
    "${TEST_DIR}/configuration/save/cfg/minimal.cfg"
    "${TEST_DIR}/configuration/save/cfg/servicedependencies.cfg")
  add_test(
    "${TEST_NAME}_serviceescalations"
    "${TEST_NAME}"
    "serviceescalation"
    "${TEST_DIR}/configuration/save/cfg/minimal.cfg"
    "${TEST_DIR}/configuration/save/cfg/serviceescalations.cfg")
  add_test(
    "${TEST_NAME}_servicegroups"
    "${TEST_NAME}"
    "servicegroup"
    "${TEST_DIR}/configuration/save/cfg/minimal.cfg"
    "${TEST_DIR}/configuration/save/cfg/servicegroups.cfg")
  add_test(
    "${TEST_NAME}_timeperiods"
    "${TEST_NAME}"
    "timeperiod"
    "${TEST_DIR}/configuration/save/cfg/minimal.cfg"
    "${TEST_DIR}/configuration/save/cfg/timeperiods.cfg")
endif ()