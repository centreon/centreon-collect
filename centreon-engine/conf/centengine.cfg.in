##
## Copyright 1999-2009 Ethan Galstad
## Copyright 2011-2012 Merethis
##
## This file is part of Centreon Engine.
##
## Centreon Engine is free software: you can redistribute it and/or
## modify it under the terms of the GNU General Public License version 2
## as published by the Free Software Foundation.
##
## Centreon Engine is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
## General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with Centreon Engine. If not, see
## <http://www.gnu.org/licenses/>.
##

# file:  centengine.cfg
# brief: Sample main config file for Centreon Engine @VERSION@
#
# Read the documentation for more information on this configuration file. I've
# provided some comments here, but things may not be so clear without further
# explanation.


# var:    log_file
# brief:  This is the main log file where service and host events are logged for
#         historical purposes. This should be the first option specified in the
#         config file!

log_file=@VAR_DIR@/centengine.log


# var:    cfg_file
# brief:  These are the object configuration files in which you define hosts,
#         host groups, contacts, contact groups, services, etc. You can split
#         your object definitions across several config files if you wish (as
#         shown below), or keep them all in a single config file.

# You can specify individual object config files as shown below:
cfg_file=@PREFIX_CONF@/objects/commands.cfg
cfg_file=@PREFIX_CONF@/objects/contacts.cfg
cfg_file=@PREFIX_CONF@/objects/timeperiods.cfg
cfg_file=@PREFIX_CONF@/objects/templates.cfg

# Definitions for monitoring the local (Linux) host
cfg_file=@PREFIX_CONF@/objects/localhost.cfg

# Definitions for monitoring a Windows machine
#cfg_file=@PREFIX_CONF@/objects/windows.cfg

# Definitions for monitoring a router/switch
#cfg_file=@PREFIX_CONF@/objects/switch.cfg

# Definitions for monitoring a network printer
#cfg_file=@PREFIX_CONF@/objects/printer.cfg

# You can also tell Nagios to process all config files (with a .cfg extension)
# in a particular directory by using the cfg_dir directive as shown below.
#cfg_dir=@PREFIX_CONF@/servers
#cfg_dir=@PREFIX_CONF@/printers
#cfg_dir=@PREFIX_CONF@/switches
#cfg_dir=@PREFIX_CONF@/routers


# var:  object_cache_file
# brief: This option determines where object definitions are cached when
#        Centreon Engine starts/restarts.

object_cache_file=@VAR_DIR@/objects.cache


# var:    precached_object_file
# brief:  This options determines the location of the precached object file. If
#         you run Centreon Engine with the -p command line option, it will
#         preprocess your object configuration file(s) and write the cached
#         config to this file. You can then start Centreon Engine with the -u
#         option to have it read object definitions from this precached file,
#         rather than the standard object configuration files (see the cfg_file
#         and cfg_dir options above). Using a precached object file can speed up
#         the time needed to (re)start the Centreon Engine process if you've got
#         a large and/or complex configuration. Read the documentation section
#         on optimizing Centreon Engine to find our more about how this feature works.

precached_object_file=@VAR_DIR@/objects.precache


# var:    resource_file
# brief:  This is an optional resource file that contains $USERx$ macro
#         definitions. Multiple resource files can be specified by using
#         multiple resource_file definitions. The CGIs will not attempt to read
#         the contents of resource files, so information that is considered to
#         be sensitive (usernames, passwords, etc) can be defined as macros in
#         this file and restrictive permissions (600) can be placed on this
#         file.

resource_file=@PREFIX_CONF@/resource.cfg


# var:    status_file
# brief:  This is where the current status of all monitored services and hosts
#         is stored. The contents of the status file are deleted every time
#         Centreon Engine restarts.

status_file=@VAR_DIR@/status.dat


# var:    status_update_interval
# brief:  This option determines the frequency (in seconds) that Centreon Engine
#         will periodically dump program, host, and service status data.

status_update_interval=10


# var:    check_external_commands
# brief:  This option allows you to specify whether or not Centreon Engine
#         should check for external commands (in the command file defined
#         below). By default Centreon Engine will *not* check for external
#         commands, just to be on the cautious side.
# values: 0 = disable.
#         1 = enable.

check_external_commands=1


# var:    command_check_interval
# brief:  This is the interval at which Centreon Engine should check for
#         external commands. This value works of the interval_length you specify
#         later. If you leave that at its default value of 60 (seconds), a value
#         of 1 here will cause Centreon Engine to check for external commands
#         every minute. If you specify a number followed by an "s" (i.e. 15s),
#         this will be interpreted to mean actual seconds rather than a multiple
#         of the interval_length variable.
#         Note: In addition to reading the external command file at regularly
#         scheduled intervals, Centreon Engine will also check for external
#         commands after event handlers are executed.
#         NOTE: Setting this value to -1 causes Centreon Engine to check the
#         external command file as often as possible.

#command_check_interval=15s
command_check_interval=-1


# var:    command_file
# brief:  This is the file that Centreon Engine checks for external command
#         requests. Permissions should be set at the directory level instead of
#         on the file, as the file is deleted every time its contents are
#         processed.

command_file=@RW_DIR@/centengine.cmd


# var:    external_command_buffer_slots
# brief:  This settings is used to tweak the number of items or "slots" that the
#         Centreon Engine daemon should allocate to the buffer that holds
#         incoming external commands before they are processed. As external
#         commands are processed by the daemon, they are removed from the
#         buffer.

external_command_buffer_slots=4096


# var:    event_broker_options
# brief:  Controls what (if any) data gets sent to the event broker.
# values: 0       = Broker nothing.
#         -1      = Broker everything.
#         <other> = See documentation.

event_broker_options=-1


# var:    broker_module
# brief:  This directive is used to specify an event broker module that should
#         by loaded by Centreon Engine at startup. Use multiple directives if
#         you want to load more than one module. Arguments that should be passed
#         to the module at startup are seperated from the module path by a
#         space.

#broker_module=<modulepath> [moduleargs]
#broker_module=/somewhere/module1.o
#broker_module=/somewhere/module2.o arg1 arg2=3 debug=0


# var:    log_rotation_method
# brief:  This is the log rotation method that Centreon Engine should use to
#         rotate the main log file.
# values: n = None - don't rotate the log.
#         h = Hourly rotation (top of the hour).
#         d = Daily rotation (midnight every day).
#         w = Weekly rotation (midnight on Saturday evening).
#         m = Monthly rotation (midnight last day of month).

log_rotation_method=d


# var: log_archive_path
# brief:  This is the directory where archived (rotated) log files should be
#         placed (assuming you've chosen to do log rotation).

log_archive_path=@LOG_ARCHIVE_DIR@


# var:    use_syslog
# brief:  If you want messages logged to the syslog facility, as well as the
#         Centreon Engine log file, enable this option.
# values: 0 = disable.
#         1 = enable.

use_syslog=1


# var:    log_notifications
# brief:  If you don't want notifications to be logged, disable this option.
# values: 0 = disable.
#         1 = enable.

log_notifications=1


# var:    log_service_retries
# brief:  If you don't want service check retries to be logged, disable this
#         option.
# values: 0 = disable.
#         1 = enable.

log_service_retries=1


# var:    log_host_retries
# brief:  If you don't want host check retries to be logged, disable this
#         option.
# values: 0 = disable.
#         1 = enable.

log_host_retries=1


# var:    log_event_handlers
# brief:  If you don't want host and service event handlers to be logged,
#         disable this option.
# values: 0 = disable.
#         1 = enable.

log_event_handlers=1

# var:    log_initial_states
# brief:  If you want Centreon Engine to log all initial host and service states
#         to the main log file (the first time the service or host is checked)
#         you can enable this option. If you are not using an external
#         application that does long term state statistics reporting, you do not
#         need to enable this option.
# values: 0 = disable.
#         1 = enable.

log_initial_states=0


# var:    log_external_commands
# brief:  If you don't want Centreon Engine to log external commands, disable
#         this option.
#         Note: This option does not include logging of passive service checks
#         - see the option below for controlling whether or not passive checks
#         are logged.
# values: 0 = disable.
#         1 = enable.

log_external_commands=1


# var:    log_passive_checks
# brief:  If you don't want Centreon Engine to log passive host and service
#         checks, disable this option.
# values: 0 = disable.
#         1 = enable.

log_passive_checks=1


# var:    global_host_event_handler
# brief:  These options allow you to specify a host event handler command that
#         is to be run for every host state change. The global event handler is
#         executed immediately prior to the event handler that you have
#         optionally specified in each host definition. The command argument is
#         the short name of a command definition that you define in your host
#         configuration file. Read the HTML docs for more information.

#global_host_event_handler=somecommand


# var:    global_service_event_handler
# brief:  These options allow you to specify a service event handler command
#         that is to be run for every service state change. The global event
#         handler is executed immediately prior to the event handler that you
#         have optionally specified in each service definition. The command
#         argument is the short name of a command definition that you define in
#         your host configuration file. Read the HTML docs for more information.

#global_service_event_handler=somecommand


# var:    service_inter_check_delay_method
# brief:  This is the method that Centreon Engine should use when initially
#         "spreading out" service checks when it starts monitoring. The default
#         is to use smart delay calculation, which will try to space all service
#         checks out evenly to minimize CPU load. Using the dumb setting will
#         cause all checks to be scheduled at the same time (with no delay
#         between them)! This is not a good thing for production, but is useful
#         when testing the parallelization functionality.
# values: n    = None - don't use any delay between checks.
#         d    = Use a "dumb" delay of 1 second between checks.
#         s    = Use "smart" inter-check delay calculation.
#         x.xx = Use an inter-check delay of x.xx seconds.

service_inter_check_delay_method=s


# var:    max_service_check_spread
# brief:  This variable determines the timeframe (in minutes) from the program
#         start time that an initial check of all services should be completed.
#         Default is 30 minutes.

max_service_check_spread=30


# var:    service_interleave_factor
# brief:  This variable determines how service checks are interleaved.
#         Interleaving the service checks allows for a more even distribution of
#         service checks and reduced load on remote hosts.
# values: 1 is equivalent to how versions of Nagios previous to 0.0.5 did
#         service checks. Set this value to s (smart) for automatic calculation
#         of the interleave factor unless you have a specific reason to change
#         it.
#         s = Use "smart" interleave factor calculation.
#         x = Use an interleave factor of x, where x is a number greater than
#         or equal to 1.

service_interleave_factor=s


# var:    host_inter_check_delay_method
# brief:  This is the method that Centreon Engine should use when initially
#         "spreading out" host checks when it starts monitoring. The default is
#         to use smart delay calculation, which will try to space all host
#         checks out evenly to minimize CPU load. Using the dumb setting will
#         cause all checks to be scheduled at the same time (with no delay
#         between them)!
# values: n    = None - don't use any delay between checks.
#         d    = Use a "dumb" delay of 1 second between checks.
#         s    = Use "smart" inter-check delay calculation.
#         x.xx = Use an inter-check delay of x.xx seconds.

host_inter_check_delay_method=s


# var:    max_host_check_spread
# brief:  This variable determines the timeframe (in minutes) from the program
#         start time that an initial check of all hosts should be completed.
#         Default is 30 minutes.

max_host_check_spread=30

# var:    max_concurrent_checks
# brief:  This option allows you to specify the maximum number of service checks
#         that can be run in parallel at any given time.
# values: 1 = this variable essentially prevents any service checks from being
#         parallelized.
#         0 will not restrict the number of concurrent checks that are being
#         executed.

max_concurrent_checks=0


# var:    check_result_reaper_frequency
# brief:  This is the frequency (in seconds!) that Centreon Engine will process
#         the results of host and service checks.

check_result_reaper_frequency=10


# var:    max_check_result_reaper_time
# brief:  This is the max amount of time (in seconds) that  a single check
#         result reaper event will be allowed to run before returning control
#         back to Centreon Engine so it can perform other duties.

max_check_result_reaper_time=30


# var:    cached_host_check_horizon
# brief:  This option determines the maximum amount of time (in seconds) that
#         the state of a previous host check is considered current. Cached host
#         states (from host checks that were performed more recently that the
#         timeframe specified by this value) can immensely improve performance
#         in regards to the host check logic. Too high of a value for this
#         option may result in inaccurate host states being used by Centreon
#         Engine, while a lower value may result in a performance hit for host
#         checks.
# values: 0 = disable.
#         x = time in seconds.

cached_host_check_horizon=15


# var:    cached_service_check_horizon
# brief:  This option determines the maximum amount of time (in seconds) that
#         the state of a previous service check is considered current. Cached
#         service states (from service checks that were performed more recently
#         that the timeframe specified by this value) can immensely improve
#         performance in regards to predictive dependency checks.
# values: 0 = disable.
#         x = time in seconds.

cached_service_check_horizon=15


# var:    enable_predictive_host_dependency_checks
# brief:  This option determines whether or not Centreon Engine will attempt to
#         execute checks of hosts when it predicts that future dependency logic
#         test may be needed. These predictive checks can help ensure that your
#         host dependency logic works well.
# values: 0 = Disable predictive checks.
#         1 = Enable predictive checks (default).

enable_predictive_host_dependency_checks=1


# var:    enable_predictive_service_dependency_checks
# brief:  This option determines whether or not Centreon Engine will attempt to
#         execute checks of service when it predicts that future dependency
#         logic test may be needed. These predictive checks can help ensure that
#         your service dependency logic works well.
# values: 0 = Disable predictive checks.
#         1 = Enable predictive checks (default).

enable_predictive_service_dependency_checks=1

# var:    soft_state_dependencies
# brief:  This option determines whether or not Centreon Engine will use soft
#         state information when checking host and service dependencies.
#         Normally Centreon Engine will only use the latest hard host or service
#         state when checking dependencies. If you want it to use the latest
#         state (regardless of whether its a soft or hard state type), enable
#         this option.
# values: 0 = Don't use soft state dependencies (default).
#         1 = Use soft state dependencies.

soft_state_dependencies=0


# var:    time_change_threshold
# brief:  These options determine when Centreon Engine will react to detected
#         changes in system time (either forward or backwards).

#time_change_threshold=900


# var:    auto_reschedule_checks
# brief:  This option determines whether or not Centreon Engine will attempt to
#         automatically reschedule active host and service checks to "smooth"
#         them out over time. This can help balance the load on the monitoring
#         server.
#
# WARNING: THIS IS AN EXPERIMENTAL FEATURE - IT CAN DEGRADE PERFORMANCE,
#          RATHER THAN INCREASE IT, IF USED IMPROPERLY

auto_reschedule_checks=0


# var:    auto_rescheduling_interval
# brief:  This option determines how often (in seconds) Centreon Engine will
#         attempt to automatically reschedule checks. This option only has an
#         effect if the auto_reschedule_checks option is enabled.
# values: Default is 30 seconds.
#
# WARNING: THIS IS AN EXPERIMENTAL FEATURE - IT CAN DEGRADE PERFORMANCE, RATHER
#          THAN INCREASE IT, IF USED IMPROPERLY.

auto_rescheduling_interval=30


# var:    auto_rescheduling_window
# brief:  This option determines the "window" of time (in seconds) that Centreon
#         Engine will look at when automatically rescheduling checks. Only host
#         and service checks that occur in the next X seconds (determined by
#         this variable) will be rescheduled. This option only has an effect if
#         the auto_reschedule_checks option is enabled.
# values: Default is 180 seconds (3 minutes).
#
# WARNING: THIS IS AN EXPERIMENTAL FEATURE - IT CAN DEGRADE
#          PERFORMANCE, RATHER THAN INCREASE IT, IF USED IMPROPERLY.

auto_rescheduling_window=180


# var:    sleep_time
# brief:  This is the number of seconds to sleep between checking for system
#         events and service checks that need to be run.

sleep_time=0.25


# var:    *_timeout
# brief:  These options control how much time Centreon Engine will allow various
#         types of commands to execute before killing them off. Options are
#         available for controlling maximum time allotted for service checks,
#         host checks, event handlers, notifications, the ocsp command, and
#         performance data commands. All values are in seconds.

service_check_timeout=60
host_check_timeout=30
event_handler_timeout=30
notification_timeout=30
ocsp_timeout=5
perfdata_timeout=5


# var:    retain_state_information
# brief:  This setting determines whether or not Centreon Engine will save state
#         information for services and hosts before it shuts down. Upon startup
#         Centreon Engine will reload all saved service and host state
#         information before starting to monitor. This is useful for maintaining
#         long-term data on state statistics, etc, but will slow Centreon Engine
#         down a bit when it (re)starts. Since its only a one-time penalty, I
#         think its well worth the additional startup delay.

retain_state_information=1


# var:    state_retention_file
# brief:  This is the file that Centreon Engine should use to store host and
#         service state information before it shuts down. The state information
#         in this file is also read immediately prior to starting to monitor the
#         network when Centreon Engine is restarted. This file is used only if
#         the retain_state_information variable is set to 1.

state_retention_file=@VAR_DIR@/retention.dat


# var:    retention_update_interval
# brief:  This setting determines how often (in minutes) that Centreon Engine
#         will automatically save retention data during normal operation. If
#         you set this value to 0, Centreon Engine will not save retention data
#         at regular interval, but it will still save retention data before
#         shutting down or restarting. If you have disabled state retention,
#         this option has no effect.

retention_update_interval=60


# var:    use_retained_program_state
# brief:  This setting determines whether or not Centreon Engine will set
#         program status variables based on the values saved in the retention
#         file.
# values: 0 = disable.
#         1 = enable.

use_retained_program_state=1


# var:    use_retained_scheduling_info
# brief:  This setting determines whether or not Centreon Engine will retain the
#         scheduling info (next check time) for hosts and services based on the
#         values saved in the retention file.
# values: 0 = disable.
#         1 = enable.

use_retained_scheduling_info=1


# var:    retained_*_attribute_mask
# brief:  The following variables are used to specify specific host and service
#         attributes that should *not* be retained by Centreon Engine during
#         program restarts.
#         The values of the masks are bitwise ANDs of values specified by the
#         "MODATTR_" definitions found in include/common.h. For example, if you
#         do not want the current enabled/disabled state of flap detection and
#         event handlers for hosts to be retained, you would use a value of 24
#         for the host attribute mask...
#         MODATTR_EVENT_HANDLER_ENABLED (8) + MODATTR_FLAP_DETECTION_ENABLED (16) = 24

# This mask determines what host attributes are not retained
retained_host_attribute_mask=0

# This mask determines what service attributes are not retained
retained_service_attribute_mask=0

# These two masks determine what process attributes are not retained. There are
# two masks, because some process attributes have host and service options. For
# example, you can disable active host checks, but leave active service checks
# enabled.
retained_process_host_attribute_mask=0
retained_process_service_attribute_mask=0

# These two masks determine what contact attributes are not retained. There are
# two masks, because some contact attributes have host and service options. For
# example, you can disable host notifications for a contact, but leave service
# notifications enabled for them.
retained_contact_host_attribute_mask=0
retained_contact_service_attribute_mask=0


# var:    interval_length
# brief:  This is the seconds per unit interval as used in the
#         host/contact/service configuration files. Setting this to 60 means
#         that each interval is one minute long (60 seconds). Other settings
#         have not been tested much, so your mileage is likely to vary...

interval_length=60


# var:    use_aggressive_host_checking
# brief:  If you don't want to turn on aggressive host checking features, enable
#         this option. Read the docs for more info on what aggressive host check
#         is or check out the source code in base/checks.c
# values: 0 = disable.
#         1 = enable.

use_aggressive_host_checking=0


# var:    execute_service_checks
# brief:  This determines whether or not Centreon Engine will actively execute
#         service checks when it initially starts. If this option is disabled,
#         checks are not actively made, but Centreon Engine can still receive
#         and process passive check results that come in. Unless you're
#         implementing redundant hosts or have a special need for disabling the
#         execution of service checks, leave this enabled!
# values: 0 = disable.
#         1 = enable.

execute_service_checks=1


# var:    accept_passive_service_checks
# brief:  This determines whether or not Centreon Engine will accept passive
#         service checks results when it initially (re)starts.
# values: 0 = reject passive checks.
#         1 = accept passive checks.

accept_passive_service_checks=1


# var:    execute_host_checks
# brief:  This determines whether or not Centreon Engine will actively execute
#         host checks when it initially starts. If this option is disabled,
#         checks are not actively made, but Centreon Engine can still receive
#         and process passive check results that come in. Unless you're
#         implementing redundant hosts or have a special need for disabling the
#         execution of host checks, leave this enabled!
# values: 0 = disable checks.
#         1 = enable checks.

execute_host_checks=1


# var:    accept_passive_host_checks
# brief:  This determines whether or not Centreon Engine will accept passive
#         host checks results when it initially (re)starts.
# values: 0 = reject passive checks.
#         1 = accept passive checks.

accept_passive_host_checks=1


# var:    enable_notifications
# brief:  This determines whether or not Centreon Engine will sent out any host
#         or service notifications when it is initially (re)started.
# values: 0 = disable notifications.
#         1 = enable notifications.

enable_notifications=1


# var:    enable_event_handlers
# brief:  This determines whether or not Centreon Engine will run any host or
#         service event handlers when it is initially (re)started. Unless you're
#         implementing redundant hosts, leave this option enabled.
# values: 0 = disable event handlers.
#         1 = enable event handlers.

enable_event_handlers=1


# var:    process_performance_data
# brief:  This determines whether or not Centreon Engine will process
#         performance data returned from service and host checks. If this
#         option is enabled, host performance data will be processed using the
#         host_perfdata_command (defined below) and service performance data
#         will be processed using the service_perfdata_command (also defined
#         below). Read the HTML docs for more information on performance data.
# values: 0 = do not process performance data.
#         1 = process performance data.

process_performance_data=0


# var:    *_perfdata_command
# brief:  These commands are run after every host and service check is
#         performed. These commands are executed only if the
#         enable_performance_data option (above) is set to 1. The command
#         argument is the short name of a command definition that you define in
#         your host configuration file. Read the HTML docs for more information
#         on performance data.

#host_perfdata_command=process-host-perfdata
#service_perfdata_command=process-service-perfdata


# var:    *_perfdata_file
# brief:  These files are used to store host and service performance data.
#         Performance data is only written to these files if the
#         enable_performance_data option (above) is set to 1.

#host_perfdata_file=/tmp/host-perfdata
#service_perfdata_file=/tmp/service-perfdata


# var:    *_perfdata_file_template
# brief:  These options determine what data is written (and how) to the
#         performance data files. The templates may contain macros, special
#         characters (\t for tab, \r for carriage return, \n for newline) and
#         plain text. A newline is automatically added after each write to the
#         performance data file. Some examples of what you can do are shown
#         below.

#host_perfdata_file_template=[HOSTPERFDATA]\t$TIMET$\t$HOSTNAME$\t$HOSTEXECUTIONTIME$\t$HOSTOUTPUT$\t$HOSTPERFDATA$
#service_perfdata_file_template=[SERVICEPERFDATA]\t$TIMET$\t$HOSTNAME$\t$SERVICEDESC$\t$SERVICEEXECUTIONTIME$\t$SERVICELATENCY$\t$SERVICEOUTPUT$\t$SERVICEPERFDATA$


# var:    *_perfdata_file_mode
# brief:  This option determines whether or not the host and service performance
#         data files are opened in write ("w") or append ("a") mode. If you want
#         to use named pipes, you should use the special pipe ("p") mode which
#         avoid blocking at startup, otherwise you will likely want the defult
#         append ("a") mode.

#host_perfdata_file_mode=a
#service_perfdata_file_mode=a


# var:    *_perfdata_file_processing_interval
# brief:  These options determine how often (in seconds) the host and service
#         performance data files are processed using the commands defined below.
#         A value of 0 indicates the files should not be periodically processed.

#host_perfdata_file_processing_interval=0
#service_perfdata_file_processing_interval=0


# var:    *_perfdata_file_processing_command
# brief:  These commands are used to periodically process the host and service
#         performance data files. The interval at which the processing occurs is
#         determined by the options above.

#host_perfdata_file_processing_command=process-host-perfdata-file
#service_perfdata_file_processing_command=process-service-perfdata-file


# var:    obsess_over_services
# brief:  This determines whether or not Centreon Engine will obsess over
#         service checks and run the ocsp_command defined below. Unless you're
#         planning on implementing distributed monitoring, do not enable this
#         option. Read the HTML docs for more information on implementing
#         distributed monitoring.
# values: 0 = do not obsess (default).
#         1 = obsess over services.

obsess_over_services=0


# var:    ocsp_command
# brief:  This is the command that is run for every service check that is
#         processed by Centreon Engine. This command is executed only if the
#         obsess_over_services option (above) is set to 1. The command argument
#         is the short name of a command definition that you define in your host
#         configuration file. Read the HTML docs for more information on
#         implementing distributed monitoring.

#ocsp_command=somecommand


# var:    obsess_over_hosts
# brief:  This determines whether or not Centreon Engine will obsess over host
#         checks and run the ochp_command defined below. Unless you're planning
#         on implementing distributed monitoring, do not enable this option.
#         Read the HTML docs for more information on implementing distributed
#         monitoring.
# values: 0 = do not obsess (default).
#         1 = obsess over hosts.

obsess_over_hosts=0


# var:    ochp_command
# brief:  This is the command that is run for every host check that is processed
#         by Centreon Engine. This command is executed only if the
#         obsess_over_hosts option (above) is set to 1. The command argument is
#         the short name of a command definition that you define in your host
#         configuration file. Read the HTML docs for more information on
#         implementing distributed monitoring.

#ochp_command=somecommand


# var:    translate_passive_host_checks
# brief:  This determines whether or not Centreon Engine will translate
#         DOWN/UNREACHABLE passive host check results into their proper state
#         for this instance of Centreon Engine. This option is useful if you
#         have distributed or failover monitoring setup. In these cases your
#         other Centreon Engine servers probably have a different "view" of the
#         network, with regards to the parent/child relationship of hosts. If a
#         distributed monitoring server thinks a host is DOWN, it may actually
#         be UNREACHABLE from the point of this Centreon Engine instance.
#         Enabling this option will tell Centreon Engine to translate any DOWN
#         or UNREACHABLE host states it receives passively into the correct
#         state from the view of this server.
# values: 0 = do not translate (default).
#         1 = perform translation.

translate_passive_host_checks=0


# var:    passive_host_checks_are_soft
# brief:  This determines whether or not Centreon Engine will treat passive host
#         checks as being HARD or SOFT. By default, a passive host check result
#         will put a host into a HARD state type. This can be changed by
#         enabling this option.
# values: 0 = passive checks are HARD.
#         1 = passive checks are SOFT.

passive_host_checks_are_soft=0


# var:    check_for_orphaned_*
# brief:  These options determine whether or not Centreon Engine will
#         periodically check for orphaned host service checks. Since service
#         checks are not rescheduled until the results of their previous
#         execution instance are processed, there exists a possibility that some
#         checks may never get rescheduled. A similar situation exists for host
#         checks, although the exact scheduling details differ a bit from
#         service checks. Orphaned checks seem to be a rare problem and should
#         not happen under normal circumstances. If you have problems with
#         service checks never getting rescheduled, make sure you have orphaned
#         service checks enabled.
# values: 0 = disable checks.
#         1 = enable checks.

check_for_orphaned_services=1
check_for_orphaned_hosts=1


# var:    check_service_freshness
# brief:  This option determines whether or not Centreon Engine will
#         periodically check the "freshness" of service results. Enabling this
#         option is useful for ensuring passive checks are received in a timely
#         manner.
# values: 0 = disable freshness checking.
#         1 = enabled freshness checking.

check_service_freshness=1


# var:    service_freshness_check_interval
# brief:  This setting determines how often (in seconds) Centreon Engine will
#         check the "freshness" of service check results. If you have disabled
#         service freshness checking, this option has no effect.

service_freshness_check_interval=60


# var:    check_host_freshness
# brief:  This option determines whether or not Centreon Engine will
#         periodically check the "freshness" of host results. Enabling this
#         option is useful for ensuring passive checks are received in a timely
#         manner.
# values: 0 = disable freshness checking.
#         1 = enabled freshness checking.

check_host_freshness=0


# var:    host_freshness_check_interval
# brief:  This setting determines how often (in seconds) Centreon Engine will
#         check the "freshness" of host check results. If you have disabled host
#         freshness checking, this option has no effect.

host_freshness_check_interval=60


# var:    additional_freshness_latency
# brief:  This setting determines the number of seconds that Centreon Engine
#         will add to any host and service freshness thresholds that it
#         calculates (those not explicitly specified by the user).

additional_freshness_latency=15


# var:    enable_flap_detection
# brief:  This option determines whether or not Centreon Engine will try and
#         detect hosts and services that are "flapping". Flapping occurs when a
#         host or service changes between states too frequently. When Centreon
#         Engine detects that a host or service is flapping, it will temporarily
#         suppress notifications for that host/service until it stops flapping.
#         Flap detection is very experimental, so read the HTML documentation
#         before enabling this feature!
# values: 0 = disable flap detection (default).
#         1 = enable flap detection.

enable_flap_detection=1


# var:    *_flap_threshold
# brief:  Read the HTML documentation on flap detection for an explanation of
#         what this option does. This option has no effect if flap detection is
#         disabled.

low_service_flap_threshold=5.0
high_service_flap_threshold=20.0
low_host_flap_threshold=5.0
high_host_flap_threshold=20.0


# var:    date_format
# brief:  This option determines how short dates are displayed. Valid options
#         include:
# values: us             = (MM-DD-YYYY HH:MM:SS)
#         euro           = (DD-MM-YYYY HH:MM:SS)
#         iso8601        = (YYYY-MM-DD HH:MM:SS)
#         strict-iso8601 = (YYYY-MM-DDTHH:MM:SS)

date_format=us


# var:    use_timezone
# brief:  This option is used to override the default timezone that this
#         instance of Centreon Engine runs in. If not specified, Centreon Engine
#         will use the system configured timezone.
#         NOTE: you made need this on your apache configuration.
#         <Directory "/usr/local/centengine/sbin/">
#           SetEnv TZ "Australia/Brisbane"
#           ...
#         </Directory>

#use_timezone=US/Mountain
#use_timezone=Australia/Brisbane


# var:    illegal_object_name_chars
# brief:  This option allows you to specify illegal characters that cannot be
#         used in host names, service descriptions, or names of other object
#         types.

illegal_object_name_chars=`~!$%^&*|'"<>?,()=


# var:    illegal_macro_output_chars
# brief:  This option allows you to specify illegal characters that are stripped
#         from macros before being used in notifications, event handlers, etc.
#         This DOES NOT affect macros used in service or host check commands.
#         The following macros are stripped of the characters you specify:
#	  - $HOSTOUTPUT$
#	  - $HOSTPERFDATA$
#	  - $HOSTACKAUTHOR$
#	  - $HOSTACKCOMMENT$
#	  - $SERVICEOUTPUT$
#	  - $SERVICEPERFDATA$
#	  - $SERVICEACKAUTHOR$
#	  - $SERVICEACKCOMMENT$

illegal_macro_output_chars=`~$&|'"<>


# var:    use_regexp_matching
# brief:  This option controls whether or not regular expression matching takes
#         place in the object config files. Regular expression matching is used
#         to match host, hostgroup, service, and service group
#         names/descriptions in some fields of various object types.
# values: 0 = disable regexp matching.
#         1 = enable regexp matching.

use_regexp_matching=0


# var:    use_true_regexp_matching
# brief:  This option controls whether or not "true" regular expression matching
#         takes place in the object config files. This option only has an effect
#         if regular expression matching is enabled (see above). If this option
#         is DISABLED, regular expression matching only occurs if a string
#         contains wildcard characters (* and ?). If the option is ENABLED,
#         regexp matching occurs all the time (which can be annoying).
# values: 0 = disable true matching.
#         1 = enable true matching.

use_true_regexp_matching=0


# var:    admin_*
# brief:  The email and pager address of a global administrator (likely you).
#         Centreon Engine never uses these values itself, but you can access
#         them by using the $ADMINEMAIL$ and $ADMINPAGER$ macros in your
#         notification commands.

admin_email=root@localhost
admin_pager=pageroot@localhost


# var:    use_large_installation_tweaks
# brief:  This option determines whether or not Centreon Engine will take some
#         shortcuts which can save on memory and CPU usage in large Centreon
#         Engine installations. Read the documentation for more information on
#         the benefits/tradeoffs of enabling this option.
# values: 0 = Disable tweaks (default).
#         1 = Enabled tweaks.

use_large_installation_tweaks=0


# var:    enable_environment_macros
# brief:  This option determines whether or not Centreon Engine will make all
#         standard macros available as environment variables when host/service
#         checks and system commands (event handlers, notifications, etc.) are
#         executed. Enabling this option can cause performance issues in large
#         installations, as it will consume a bit more memory and (more
#         importantly) consume more CPU.
# values: 0 = Disable environment variable macros (default).
#         1 = Enable environment variable macros.

enable_environment_macros=0


# var:    free_child_process_memory
# brief:  This option determines whether or not Centreon Engine will free memory
#         in child processes (processed used to execute system commands and
#         host/ service checks). If you specify a value here, it will override
#         program defaults.
# value: 0 = Do not free memory in child processes.
#        1 = Free memory in child processes.

#free_child_process_memory=1


# var:    child_processes_fork_twice
# brief:  This option determines how Centreon Engine will fork child processes
#         (used to execute system commands and host/service checks). Normally
#         child processes are fork()ed twice, which provides a very high level
#         of isolation from problems. Fork()ing once is probably enough and will
#         save a great deal on CPU usage (in large installs), so you might want
#         to consider using this. If you specify a value here, it will program
#         defaults.
# value: 0 = Child processes fork() just once.
#        1 = Child processes fork() twice.

#child_processes_fork_twice=1


# var:    debug_level
# brief:  This option determines how much (if any) debugging information will be
#         written to the debug file. OR values together to log multiple types of
#         information.
# values: -1   = Everything.
#         0    = Nothing.
#	  1    = Functions.
#         2    = Configuration.
#         4    = Process information.
#	  8    = Scheduled events.
#         16   = Host/service checks.
#         32   = Notifications.
#         64   = Event broker.
#         128  = External commands.
#         256  = Commands.
#         512  = Scheduled downtime.
#         1024 = Comments.
#         2048 = Macros.

debug_level=0


# var:    debug_verbosity
# brief:  This option determines how verbose the debug log out will be.
# values: 0 = Brief output.
#         1 = More detailed.
#         2 = Very detailed.

debug_verbosity=1


# var:    debug_file
# brief:  This option determines where Centreon Engine should write debugging
#         information.

debug_file=@VAR_DIR@/centengine.debug


# var:    max_debug_file_size
# brief:  This option determines the maximum size (in bytes) of the debug file.
#         If the file grows larger than this size, it will be renamed with a
#         .old extension. If a file already exists with a .old extension it will
#         automatically be deleted. This helps ensure your disk space usage
#         doesn't get out of control when debugging Centreon Engine.

max_debug_file_size=1000000
