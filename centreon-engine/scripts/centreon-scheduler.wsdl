<?xml version="1.0" encoding="UTF-8"?>
<definitions name="CentreonSchedulerCommands"
             targetNamespace="http://www.centreon.com/scheduler/commands.wsdl"
             xmlns:tns="http://www.centreon.com/scheduler/commands.wsdl"
             xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
             xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:xsd="http://www.w3.org/2001/XMLSchema"
             xmlns:ns="urn:centreonscheduler"
             xmlns:SOAP="http://schemas.xmlsoap.org/wsdl/soap/"
             xmlns:WSDL="http://schemas.xmlsoap.org/wsdl/"
             xmlns="http://schemas.xmlsoap.org/wsdl/">

  <types>
    <schema targetNamespace="http://www.centreon.com/scheduler/commands.wsdl"
            xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
            xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:ns="urn:centreonscheduler"
            xmlns="http://www.w3.org/2001/XMLSchema"
            elementFormDefault="unqualified"
            attributeFormDefault="unqualified">
      <import namespace="http://schemas.xmlsoap.org/soap/encoding/"/>

      <!-- Error. -->
      <complexType name="errorType">
        <sequence>
          <element name="code" type="xsd:unsignedInt"/>
          <element name="message" type="xsd:string"/>
        </sequence>
      </complexType>

      <!-- Host identifier. -->
      <complexType name="hostIDType">
        <sequence>
          <element name="name" type="xsd:string"/>
        </sequence>
      </complexType>

      <!-- Service identifier. -->
      <complexType name="serviceIDType">
        <sequence>
          <element name="host" type="tns:hostIDType"/>
          <element name="service" type="xsd:string"/>
        </sequence>
      </complexType>

      <!-- Not validated types. -->
      <complexType name="acknowledgementType">
        <sequence>
          <element name="author" type="xsd:string"/>
          <element name="comment" type="xsd:string"/>
          <element name="notify" type="xsd:boolean"/>
          <element name="persistent" type="xsd:boolean"/>
          <element name="sticky" type="xsd:boolean"/>
        </sequence>
      </complexType>
      <complexType name="downtimeType">
        <sequence>
          <element name="starttime" type="xsd:dateTime"/>
          <element name="endtime" type="xsd:dateTime"/>
          <element name="fixed" type="xsd:boolean"/>
          <element name="triggerid" type="xsd:long"/>
          <element name="duration" type="xsd:dateTime"/>
          <element name="author" type="xsd:string"/>
          <element name="comment" type="xsd:string"/>
        </sequence>
      </complexType>
      <complexType name="notificationType">
        <sequence>
          <element name="author" type="xsd:string"/>
          <element name="broadcast" type="xsd:boolean"/>
          <element name="comment" type="xsd:string"/>
          <element name="forced" type="xsd:string"/>
          <element name="increment" type="xsd:string"/>
        </sequence>
      </complexType>
    </schema>
  </types>

  <!--
   --  Generic messages.
   -->

  <!-- Empty request. -->
  <message name="emptyRequest">
  </message>

  <!-- Default response (an error code and an error string). -->
  <message name="defaultResponse">
    <part name="error" type="tns:errorType"/>
  </message>

  <!--
   --  Typed messages.
   -->

  <!-- Returns a boolean value. -->
  <message name="booleanResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:boolean"/>
  </message>

  <!-- Returns a timestamp. -->
  <message name="dateResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:unsignedLong"/>
  </message>

  <!-- Returns a double. -->
  <message name="doubleResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:double"/>
  </message>

  <!-- Returns an integer. -->
  <message name="integerResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:int"/>
  </message>

  <!-- Returns a short. -->
  <message name="shortResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:short"/>
  </message>

  <!-- Returns a string. -->
  <message name="stringResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:string"/>
  </message>

  <!-- Returns an unsigned integer value. -->
  <message name="unsignedIntResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:unsignedInt"/>
  </message>

  <!-- Returns an unsigned short value. -->
  <message name="unsignedShortResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:unsignedShort"/>
  </message>

  <!--
   --  Host messages.
   -->

  <!-- Host request with no additional parameter. -->
  <message name="hostRequest">
    <part name="host" type="tns:hostIDType"/>
  </message>

  <!-- Host request with a boolean. -->
  <message name="hostBooleanRequest">
    <part name="host" type="tns:hostIDType"/>
    <part name="value" type="xsd:boolean"/>
  </message>

  <!-- Host request with a double. -->
  <message name="hostDoubleRequest">
    <part name="host" type="tns:hostIDType"/>
    <part name="value" type="xsd:double"/>
  </message>

  <!-- Host request with an integer. -->
  <message name="hostIntegerRequest">
    <part name="host" type="tns:hostIDType"/>
    <part name="value" type="xsd:int"/>
  </message>

  <!-- Host request with a string. -->
  <message name="hostStringRequest">
    <part name="host" type="tns:hostIDType"/>
    <part name="value" type="xsd:string"/>
  </message>

  <!-- Host request with unsigned integer. -->
  <message name="hostUnsignedIntegerRequest">
    <part name="host" type="tns:hostIDType"/>
    <part name="value" type="xsd:unsignedInt"/>
  </message>

  <!--
   --  Service messages.
   -->

  <!-- Service request with no additional parameter. -->
  <message name="serviceRequest">
    <part name="service" type="tns:serviceIDType"/>
  </message>

  <!-- Service request with a boolean. -->
  <message name="serviceBooleanRequest">
    <part name="service" type="tns:serviceIDType"/>
    <part name="value" type="xsd:boolean"/>
  </message>

  <!-- Service request with a double. -->
  <message name="serviceDoubleRequest">
    <part name="service" type="tns:serviceIDType"/>
    <part name="value" type="xsd:double"/>
  </message>

  <!-- Service request with an integer. -->
  <message name="serviceIntegerRequest">
    <part name="service" type="tns:serviceIDType"/>
    <part name="value" type="xsd:int"/>
  </message>

  <!-- Service request with a string. -->
  <message name="serviceStringRequest">
    <part name="service" type="tns:serviceIDType"/>
    <part name="value" type="xsd:string"/>
  </message>

  <!-- Service request with an unsigned integer. -->
  <message name="serviceUnsignedIntegerRequest">
    <part name="service" type="tns:serviceIDType"/>
    <part name="value" type="xsd:unsignedInt"/>
  </message>


  <!-- Not validated messages. -->

  <!-- Message to acknowledge a host problem. -->
  <message name="acknowledgeHostProblemRequest">
    <part name="host" type="xsd:string"/>
    <part name="acknowledgement" type="tns:acknowledgementType"/>
  </message>

  <!-- Message to acknowledge a service problem. -->
  <message name="acknowledgeServiceProblemRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="acknowledgement" type="tns:acknowledgementType"/>
  </message>

  <!-- Message sent when executing an operation on a contactgroup. -->
  <message name="contactgroupRequest">
    <part name="contactgroup" type="xsd:string"/>
  </message>

  <!-- Message sent when executing an operation on a contact. -->
  <message name="contactRequest">
    <part name="contact" type="xsd:string"/>
  </message>

  <!-- Message sent when setting a feature of a host group. -->
  <message name="hostgroupEnableRequest">
    <part name="hostgroup" type="xsd:string"/>
    <part name="enable" type="xsd:boolean"/>
  </message>

  <!-- Message sent when sending a host notification. -->
  <message name="hostNotificationRequest">
    <part name="host" type="xsd:string"/>
    <part name="notification" type="tns:notificationType"/>
  </message>

  <!-- Message sent when executing an operation on a host. -->
  <message name="hostRequest">
    <part name="host" type="xsd:string"/>
  </message>

  <!-- Message sent when changing a time on a host. -->
  <message name="hostTimeRequest">
    <part name="host" type="xsd:string"/>
    <part name="time" type="xsd:dateTime"/>
  </message>

  <!-- Message send when operating on an ID. -->
  <message name="IDRequest">
    <part name="id" type="xsd:long"/>
  </message>

  <!-- Message returned when a new comment has been created. -->
  <message name="newCommentResponse">
    <part name="errorCode" type="xsd:int"/>
    <part name="errorString" type="xsd:string"/>
    <part name="commentID" type="xsd:unsignedInt"/>
  </message>

  <!-- Message sent when creating a new host comment. -->
  <message name="newHostCommentRequest">
    <part name="host" type="xsd:string"/>
    <part name="comment" type="xsd:string"/>
    <part name="user" type="xsd:string"/>
    <part name="persistent" type="xsd:boolean"/>
  </message>

  <!-- Message sent when creating a new service comment. -->
  <message name="newServiceCommentRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="comment" type="xsd:string"/>
    <part name="user" type="xsd:string"/>
    <part name="persistent" type="xsd:boolean"/>
  </message>

  <!-- Message sent when processing a host check result. -->
  <message name="processHostCheckResultRequest">
    <part name="host" type="xsd:string"/>
    <part name="retval" type="xsd:int"/>
    <part name="output" type="xsd:string"/>
  </message>

  <!-- Message sent when processing a service check result. -->
  <message name="processServiceCheckResultRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="retval" type="xsd:int"/>
    <part name="output" type="xsd:string"/>
  </message>

  <!-- Message sent when scheduling a downtime (except for service target). -->
  <message name="scheduleDowntimeRequest">
    <part name="target" type="xsd:string"/>
    <part name="downtime" type="tns:downtimeType"/>
  </message>

  <!-- Message sent when scheduling a downtime on a service. -->
  <message name="scheduleServiceDowntimeRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="downtime" type="xsd:downtimeType"/>
  </message>

  <!-- Message sent when setting a feature of a service group. -->
  <message name="servicegroupEnableRequest">
    <part name="servicegroup" type="xsd:string"/>
    <part name="enable" type="xsd:boolean"/>
  </message>

  <!-- Message sent when sending a service notification. -->
  <message name="serviceNotificationRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="notification" type="tns:notificationType"/>
  </message>

  <!-- Message sent when executing an operation on a service. -->
  <message name="serviceRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
  </message>

  <!-- Message sent when changing a service time. -->
  <message name="serviceTimeRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="time" type="xsd:dateTime"/>
  </message>

  <!-- Message sent when changing a modified attribute value. -->
  <message name="setContactModattrRequest">
    <part name="contact" type="xsd:string"/>
    <part name="modattr" type="xsd:unsignedInt"/>
  </message>

  <!-- Message sent when changing a notification timeperiod of a contact. -->
  <message name="setContactNotificationTimeperiodRequest">
    <part name="contact" type="xsd:string"/>
    <part name="timeperiod" type="xsd:string"/>
  </message>

  <!-- Message sent when (re)setting a custom variable (except for service targets). -->
  <message name="setCustomVarRequest">
    <part name="target" type="xsd:string"/>
    <part name="varname" type="xsd:string"/>
    <part name="varvalue" type="xsd:string"/>
  </message>

  <!-- Message to enable or disable feature. -->
  <message name="setEnabledRequest">
    <part name="enable" type="xsd:boolean"/>
  </message>

  <!-- Message sent when (re)setting a global event handler. -->
  <message name="setEventHandlerRequest">
    <part name="command" type="xsd:string"/>
  </message>

  <!-- Message sent when changing a host check command. -->
  <message name="setHostCheckCommandRequest">
    <part name="host" type="xsd:string"/>
    <part name="command" type="xsd:string"/>
  </message>

  <!-- Message sent to enable a host feature. -->
  <message name="setHostEnabledRequest">
    <part name="host" type="xsd:string"/>
    <part name="enable" type="xsd:boolean"/>
  </message>

  <!-- Message sent when changing a host event handler. -->
  <message name="setHostEventHandlerRequest">
    <part name="host" type="xsd:string"/>
    <part name="eventhandler" type="xsd:string"/>
  </message>

  <!-- Message sent when changing the modified attributes value of a host. -->
  <message name="setHostModattrRequest">
    <part name="host" type="xsd:string"/>
    <part name="modattr" type="xsd:unsignedInt"/>
  </message>

  <!-- Message sent when changing a host timeperiod. -->
  <message name="setHostTimeperiodRequest">
    <part name="host" type="xsd:string"/>
    <part name="timeperiod" type="xsd:string"/>
  </message>

  <!-- Message sent to change an unsigned integer value of a host. -->
  <message name="setHostUnsignedIntegerRequest">
    <part name="host" type="xsd:string"/>
    <part name="value" type="xsd:unsignedInt"/>
  </message>

  <!-- Message sent when changing a service check command. -->
  <message name="setServiceCheckCommandRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="command" type="xsd:string"/>
  </message>

  <!-- Message sent when (re)setting a service custom variable. -->
  <message name="setServiceCustomVarRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="varname" type="xsd:string"/>
    <part name="varvalue" type="xsd:string"/>
  </message>

  <!-- Message sent to enable a service feature. -->
  <message name="setServiceEnabledRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="enable" type="xsd:boolean"/>
  </message>

  <!-- Message sent when changing a service event handler. -->
  <message name="setServiceEventHandlerRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="eventhandler" type="xsd:string"/>
  </message>

  <!-- Message sent when changing the modified attributes value of a service. -->
  <message name="setServiceModattrRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="modattr" type="xsd:unsignedInt"/>
  </message>

  <!-- Message sent when changing a service timeperiod. -->
  <message name="setServiceTimeperiodRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="timeperiod" type="xsd:string"/>
  </message>

  <!-- Message sent when changing an unsigned integer value of a service. -->
  <message name="setServiceUnsignedIntegerRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="value" type="xsd:unsignedInt"/>
  </message>

  <portType name="commandPortType">

    <!--------------------------
     --                       --
     --  Global operations.  --
     --                       --
     --------------------------->

    <!--
     --  Process.
     -->

    <!-- processRestart() -->
    <operation name="processRestart">
      <documentation>Restart Scheduler.</documentation>
      <input message="tns:emptyRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- processShutdown() -->
    <operation name="processShutdown">
      <documentation>Shutdown Scheduler.</documentation>
      <input message="tns:emptyRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Retention file.
     -->

    <!-- stateInformationLoad() -->
    <operation name="stateInformationLoad">
      <documentation>Read state information.</documentation>
      <input message="tns:emptyRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- stateInformationSave() -->
    <operation name="stateInformationSave">
      <documentation>Save state information.</documentation>
      <input message="tns:emptyRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>


    <!-----------------------
     --                    --
     --  Host properties.  --
     --                    --
     ------------------------>

    <!--
     --  Acknowledgement.
     -->

    <!-- getHostAcknowledgementIsSet(host) -->
    <operation name="getHostAcknowledgementIsSet">
      <documentation>Get whether or not the host is acknowledged.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostAcknowledgementType(host) -->
    <operation name="getHostAcknowledgementType">
      <documentation>Get the current type of the acknowledgement on a host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!--
     --  Address.
     -->

    <!-- getHostAddress(host) -->
    <operation name="getHostAddress">
      <documentation>Get the address of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- setHostAddress(host, address) -->
    <operation name="setHostAddress">
      <documentation>Set the address of the host.</documentation>
      <input message="tns:hostStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Check.
     -->

    <!-- getHostCheckActiveEnabled(host) -->
    <operation name="getHostCheckActiveEnabled">
      <documentation>Check if active checks are enabled on the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostCheckCommand(host) -->
    <operation name="getHostCheckCommand">
      <documentation>Get the host check command.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- getHostCheckCurrentAttempt(host) -->
    <operation name="getHostCheckCurrentAttempt">
      <documentation>Get the current check attempt of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getHostCheckIntervalNormal(host) -->
    <operation name="getHostCheckIntervalNormal">
      <documentation>Get the normal check interval.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getHostCheckIntervalRetry(host) -->
    <operation name="getHostCheckIntervalRetry">
      <documentation>Get the retry check interval.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getHostCheckLast(host) -->
    <operation name="getHostCheckLast">
      <documentation>Get the date when the last check was executed.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getHostCheckMaxAttempts(host) -->
    <operation name="getHostCheckMaxAttempts">
      <documentation>Get the max check attempts of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getHostCheckNext(host) -->
    <operation name="getHostCheckNext">
      <documentation>Get the time at which the next host check is scheduled to run.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getHostCheckOptions(host) -->
    <operation name="getHostCheckOptions">
      <documentation>Get the host check options.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getHostCheckPassiveEnabled(host) -->
    <operation name="getHostCheckPassiveEnabled">
      <documentation>Check if passive checks are enabled on this host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostCheckPeriod(host) -->
    <operation name="getHostCheckPeriod">
      <documentation>Get the host check period.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- getHostCheckShouldBeScheduled(host) -->
    <operation name="getHostCheckShouldBeScheduled">
      <documentation>Check if the host should be scheduled.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostCheckType(host) -->
    <operation name="getHostCheckType">
      <documentation>Get the type of the host check.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- setHostCheckActiveEnabled(host, enable) -->
    <operation name="setHostCheckActiveEnabled">
      <documentation>Enable or disable active checks on the host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostCheckCommand(host, command) -->
    <operation name="setHostCheckCommand">
      <documentation>Set the host check command.</documentation>
      <input message="tns:hostStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostCheckIntervalNormal(host, interval) -->
    <operation name="setHostCheckIntervalNormal">
      <documentation>Set the normal check interval of the host.</documentation>
      <input message="tns:hostUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostCheckIntervalRetry(host, interval) -->
    <operation name="setHostCheckIntervalRetry">
      <documentation>Set the retry check interval of the host.</documentation>
      <input message="tns:hostUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostCheckMaxAttempts(host, attempts) -->
    <operation name="setHostCheckMaxAttempts">
      <documentation>Set the max check attempts of the host.</documentation>
      <input message="tns:hostUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostCheckPassiveEnabled(host, enable) -->
    <operation name="setHostCheckPassiveEnabled">
      <documentation>Enable or disable host passive checks.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostCheckPeriod(host, period) -->
    <operation name="setHostCheckPeriod">
      <documentation>Set the host check period.</documentation>
      <input message="tns:hostStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Circular path.
     -->

    <!-- getHostCircularPathChecked(host) -->
    <operation name="getHostCircularPathChecked">
      <documentation>Check if the host has been checked for circular path.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostCircularPathHas(host) -->
    <operation name="getHostCircularPathHas">
      <documentation>Check if the host has circular path.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!--
     --  Custom Variable.
     -->

    <!-- getHostCustomVariable(host) -->
    <operation name="getHostCustomVariable">
      <documentation>Get the value of a host custom variable.</documentation>
      <input message="tns:hostStringRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- getHostCustomVariables(host) -->
    <!-- XXX -->

    <!-- setHostCustomVariable(host, variable, value) -->
    <!-- XXX -->

    <!--
     --  Downtime.
     -->

    <!-- getHostDowntimeDepth(host) -->
    <operation name="getHostDowntimeDepth">
      <documentation>Get the host downtime depth.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getHostDowntimeFlexPending(host) -->
    <operation name="getHostDowntimeFlexPending">
      <documentation>Check if host has a pending flexible downtime.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!--
     --  Event Handler.
     -->

    <!-- getHostEventHandler(host) -->
    <operation name="getHostEventHandler">
      <documentation>Get the host event handler.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- getHostEventHandlerEnabled(host) -->
    <operation name="getHostEventHandlerEnabled">
      <documentation>Check if the host event handler is enabled.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- setHostEventHandler(host, eventhandler) -->
    <operation name="setHostEventHandler">
      <documentation>Set the host event handler.</documentation>
      <input message="tns:hostStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostEventHandlerEnabled(host, enable) -->
    <operation name="setHostEventHandlerEnabled">
      <documentation>Enable or disable host event handler.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Failure Prediction.
     -->

    <!-- getHostFailurePredictionEnabled(host) -->
    <operation name="getHostFailurePredictionEnabled">
      <documentation>Check if failure prediction is enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostFailurePredictionOptions(host) -->
    <operation name="getHostFailurePredictionOptions">
      <documentation>Get host failure prediction options.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- setHostFailurePredictionEnabled(host, enable) -->
    <operation name="setHostFailurePredictionEnabled">
      <documentation>Enable or disable failure prediction on host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Flap Detection.
     -->

    <!-- getHostFlapDetectionCommentID(host) -->
    <operation name="getHostFlapDetectionCommentID">
      <documentation>Get the flap detection comment ID of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getHostFlapDetectionEnabled(host) -->
    <operation name="getHostFlapDetectionEnabled">
      <documentation>Check whether flap detection is enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostFlapDetectionIsFlapping(host) -->
    <operation name="getHostFlapDetectionIsFlapping">
      <documentation>Check if host is flapping.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostFlapDetectionOnDown(host) -->
    <operation name="getHostFlapDetectionOnDown">
      <documentation>Check if flap detection is enabled on down state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostFlapDetectionOnUnreachable(host) -->
    <operation name="getHostFlapDetectionOnUnreachable">
      <documentation>Check if flap detection is enabled on unreachable state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostFlapDetectionOnUp(host) -->
    <operation name="getHostFlapDetectionOnUp">
      <documentation>Check if flap detection is enabled on up state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostFlapDetectionStateHistory(host) -->
    <!-- XXX -->

    <!-- getHostFlapDetectionStateHistoryLastUpdate(host) -->
    <operation name="getHostFlapDetectionStateHistoryLastUpdate">
      <documentation>Get the last time the flap detection state history was updated.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getHostFlapDetectionThresholdHigh(host) -->
    <operation name="getHostFlapDetectionThresholdHigh">
      <documentation>Get the host high flap threshold.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:doubleResponse"/>
    </operation>

    <!-- getHostFlapDetectionThresholdLow(host) -->
    <operation name="getHostFlapDetectionThresholdLow">
      <documentation>Get the host low flap threshold.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:doubleResponse"/>
    </operation>

    <!-- setHostFlapDetectionEnabled(host, enable) -->
    <operation name="setHostFlapDetectionEnabled">
      <documentation>Enable or disable flap detection on host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostFlapDetectionOnDown(host, enable) -->
    <operation name="setHostFlapDetectionOnDown">
      <documentation>Enable or disable flap detection on down state.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostFlapDetectionOnUnreachable(host, enable) -->
    <operation name="setHostFlapDetectionOnUnreachable">
      <documentation>Enable or disable flap detection on unreachable state.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostFlapDetectionOnUp(host, enable) -->
    <operation name="setHostFlapDetectionOnUp">
      <documentation>Enable or disable flap detection on up state.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostFlapDetectionThresholdHigh(host, threshold) -->
    <operation name="setHostFlapDetectionThresholdHigh">
      <documentation>Set the high flap threshold of the host.</documentation>
      <input message="tns:hostDoubleRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostFlapDetectionThresholdLow(host, threshold) -->
    <operation name="setHostFlapDetectionThresholdLow">
      <documentation>Set the low flap threshold of the host.</documentation>
      <input message="tns:hostDoubleRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Freshness.
     -->

    <!-- getHostFreshnessCheckEnabled(host) -->
    <operation name="getHostFreshnessCheckEnabled">
      <documentation>Check if freshness checks are enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostFreshnessIsActive(host) -->
    <operation name="getHostFreshnessIsActive">
      <documentation>Check if freshness check is active on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostFreshnessThreshold(host) -->
    <operation name="getHostFreshnessThreshold">
      <documentation>Get the freshness threshold of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:integerResponse"/>
    </operation>

    <!-- setHostFreshnessCheckEnabled(host, enable) -->
    <operation name="setHostFreshnessCheckEnabled">
      <documentation>Enable or disable freshness checks on host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostFreshnessThreshold(host, threshold) -->
    <operation name="setHostFreshnessThreshold">
      <documentation>Set the host freshness threshold.</documentation>
      <input message="tns:hostIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Modified Attributes.
     -->

    <!-- getHostModifiedAttributes(host) -->
    <operation name="getHostModifiedAttributes">
      <documentation>Get the modified attributes on the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!--
     --  Name.
     -->

    <!-- getHostNameAlias(host) -->
    <operation name="getHostNameAlias">
      <documentation>Get the host alias.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- getHostNameDisplay(host) -->
    <operation name="getHostNameDisplay">
      <documentation>Get the host display name.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- setHostNameAlias(host, alias) -->
    <operation name="setHostNameAlias">
      <documentation>Set the host alias.</documentation>
      <input message="tns:hostStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostNameDisplay(host, displayname) -->
    <operation name="setHostNameDisplay">
      <documentation>Set the display name of the host.</documentation>
      <input message="tns:hostStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Notification.
     -->

    <!-- getHostNotificationCurrentID(host) -->
    <operation name="getHostNotificationCurrentID">
      <documentation>Get the ID of the current host notification.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getHostNotificationCurrentNumber(host) -->
    <operation name="getHostNotificationCurrentNumber">
      <documentation>Get the current notification number of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getHostNotificationEnabled(host) -->
    <operation name="getHostNotificationEnabled">
      <documentation>Check if notifications are enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostNotificationFirstDelay(host) -->
    <operation name="getHostNotificationFirstDelay">
      <documentation>Get the first notification delay of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getHostNotificationInterval(host) -->
    <operation name="getHostNotificationInterval">
      <documentation>Get the notification interval of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getHostNotificationLast(host) -->
    <operation name="getHostNotificationLast">
      <documentation>Get the time at which the last notification was sent.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getHostNotificationNext(host) -->
    <operation name="getHostNotificationNext">
      <documentation>Get the time at which the next notification will be sent.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getHostNotificationNoMore(host) -->
    <!-- XXX -->

    <!-- getHostNotificationOnDown(host) -->
    <operation name="getHostNotificationOnDown">
      <documentation>Check if notifications are sent if host is down.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostNotificationOnDowntime(host) -->
    <operation name="getHostNotificationOnDowntime">
      <documentation>Check if notifications are sent if host is on downtime.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostNotificationOnFlapping(host) -->
    <operation name="getHostNotificationOnFlapping">
      <documentation>Check if notifications are sent if host is flappy.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostNotificationOnRecovery(host) -->
    <operation name="getHostNotificationOnRecovery">
      <documentation>Check if notifications are sent if host recovers.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostNotificationOnUnreachable(host) -->
    <operation name="getHostNotificationOnUnreachable">
      <documentation>Check if notifications are sent if host is unreachable.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostNotificationPeriod(host) -->
    <operation name="getHostNotificationPeriod">
      <documentation>Get the notification period of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- setHostNotificationEnabled(host, enable) -->
    <operation name="setHostNotificationEnabled">
      <documentation>Enable or disable notifications on host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostNotificationFirstDelay(host, delay) -->
    <operation name="setHostNotificationFirstDelay">
      <documentation>Set the time after which the first host notification will be sent.</documentation>
      <input message="tns:hostUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostNotificationInterval(host, interval) -->
    <operation name="setHostNotificationInterval">
      <documentation>Set the notification interval of the host.</documentation>
      <input message="tns:hostUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostNotificationOnDown(host, enable) -->
    <operation name="setHostNotificationOnDown">
      <documentation>Enable or disable notifications when host is down.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostNotificationOnDowntime(host, enable) -->
    <operation name="setHostNotificationOnDowntime">
      <documentation>Enable or disable notifications when host is in downtime.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostNotificationOnFlapping(host, enable) -->
    <operation name="setHostNotificationOnFlapping">
      <documentation>Enable or disable notifications when host is flappy.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostNotificationOnRecovery(host, enable) -->
    <operation name="setHostNotificationOnRecovery">
      <documentation>Enable or disable notifications when host recovers.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostNotificationOnUnreachable(host, enable) -->
    <operation name="setHostNotificationOnUnreachable">
      <documentation>Enable or disable notifications when host is unreachable.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostNotificationPeriod(host, period) -->
    <operation name="setHostNotificationPeriod">
      <documentation>Set notification period of host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Obsession.
     -->

    <!-- getHostObsessOver(host) -->
    <operation name="getHostObsessOver">
      <documentation>Check whether or not host is being obsessed over.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- setHostObsessOver(host, enable) -->
    <operation name="setHostObsessOver">
      <documentation>Enable or disable host obsession.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Perfdata.
     -->

    <!-- getHostPerfdataProcessingEnabled(host) -->
    <operation name="getHostPerfdataProcessingEnabled">
      <documentation>Check if perfdata processing is enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- setHostPerfdataProcessingEnabled(host, enable) -->
    <operation name="setHostPerfdataProcessingEnabled">
      <documentation>Enable or disable perfdata processing.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Plugin.
     -->

    <!-- getHostPluginExecutionTime(host) -->
    <operation name="getHostPluginExecutionTime">
      <documentation>Get the last execution time of the plugin.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getHostPluginIsExecuting(host) -->
    <operation name="getHostPluginIsExecuting">
      <documentation>Check if host check if currently executing.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostPluginLatency(host) -->
    <operation name="getHostPluginLatency">
      <documentation>Get the host latency.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:doubleResponse"/>
    </operation>

    <!-- getHostPluginOutput(host) -->
    <operation name="getHostPluginOutput">
      <documentation>Get the plugin output.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- getHostPluginPerfdata(host) -->
    <operation name="getHostPluginPerfdata">
      <documentation>Get the plugin perfdata.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!--
     --  Retention.
     -->

    <!-- getHostRetainStatusInformation(host) -->
    <operation name="getHostRetainStatusInformation">
      <documentation>Check if host status information are retained.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostRetainNonStatusInformation(host) -->
    <operation name="getHostRetainNonStatusInformation">
      <documentation>Check if host non status information are retained.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- setHostRetainStatusInformation(host, enable) -->
    <operation name="setHostRetainStatusInformation">
      <documentation>Enable or disable status information retention on host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostRetainNonStatusInformation(host, enable) -->
    <operation name="setHostRetainNonStatusInformation">
      <documentation>Enable or disable non status information retention on host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Services.
     -->

    <!-- getHostServicesCount(host) -->
    <operation name="getHostServicesCount">
      <documentation>Get the number of services on this host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getHostServicesTotalCheckInterval(host) -->
    <operation name="getHostServicesTotalCheckInterval">
      <documentation>Get the total check interval on this host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!--
     --  Stalking.
     -->

    <!-- getHostStalkOnDown(host) -->
    <operation name="getHostStalkOnDown">
      <documentation>Check if stalking on down is enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostStalkOnUnreachable(host) -->
    <operation name="getHostStalkOnUnreachable">
      <documentation>Check if stalking on unreachable is enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getHostStalkOnUp(host) -->
    <operation name="getHostStalkOnUp">
      <documentation>Check if stalking on up is enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- setHostStalkOnDown(host, enable) -->
    <operation name="setHostStalkOnDown">
      <documentation>Enable or disable stalking on down.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostStalkOnUnreachable(host, enable) -->
    <operation name="setHostStalkOnUnreachable">
      <documentation>Enable or disable stalking on unreachable.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostStalkOnUp(host, enable) -->
    <operation name="setHostStalkOnUp">
      <documentation>Enable or disable stalking on up.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  State.
     -->

    <!-- getHostStateCurrent(host) -->
    <operation name="getHostStateCurrent">
      <documentation>Get the current state of the state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- getHostStateInitial(host) -->
    <operation name="getHostStateInitial">
      <documentation>Get the initial state of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- getHostStateLast(host) -->
    <operation name="getHostStateLast">
      <documentation>Get the last host state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- getHostStateLastChange(host) -->
    <operation name="getHostStateLastChange">
      <documentation>Get the last time the state changed.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getHostStateLastDown(host) -->
    <operation name="getHostStateLastDown">
      <documentation>Get the last time the host was in a down state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getHostStateLastHard(host) -->
    <operation name="getHostStateLastHard">
      <documentation>Get the host last hard state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getHostStateLastHardChange(host) -->
    <operation name="getHostStateLastHardChange">
      <documentation>Get the last time at which the hard state changed.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getHostStateLastUnreachable(host) -->
    <operation name="getHostStateLastUnreachable">
      <documentation>Get the last time the host was in an unreachable state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getHostStateLastUp(host) -->
    <operation name="getHostStateLastUp">
      <documentation>Get the last time the host was in an up state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getHostStatePercentChange(host) -->
    <operation name="getHostStatePercentChange">
      <documentation>Get the percent state change of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getHostStateType(host) -->
    <operation name="getHostStateType">
      <documentation>Get state type (hard or soft).</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>


    <!--------------------------
     --                       --
     --  Service properties.  --
     --                       --
     --------------------------->

    <!--
     --  Acknowledgement.
     -->

    <!-- getServiceAcknowledgementIsSet(service) -->
    <operation name="getServiceAcknowledgementIsSet">
      <documentation>Get whether or not the service is acknowledged.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceAcknowledgementType(service) -->
    <operation name="getServiceAcknowledgementType">
      <documentation>Get the current type of the acknowledgement on a service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!--
     --  Check.
     -->

    <!-- getServiceCheckActiveEnabled(service) -->
    <operation name="getServiceCheckActiveEnabled">
      <documentation>Check if active checks are enabled on the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceCheckCommand(service) -->
    <operation name="getServiceCheckCommand">
      <documentation>Get the service check command.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- getServiceCheckCurrentAttempt(service) -->
    <operation name="getServiceCheckCurrentAttempt">
      <documentation>Get the current check attempt of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getServiceCheckIntervalNormal(service) -->
    <operation name="getServiceCheckIntervalNormal">
      <documentation>Get the normal check interval.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getServiceCheckIntervalRetry(service) -->
    <operation name="getServiceCheckIntervalRetry">
      <documentation>Get the retry check interval.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getServiceCheckLast(service) -->
    <operation name="getServiceCheckLast">
      <documentation>Get the date when the last check was executed.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getServiceCheckMaxAttempts(service) -->
    <operation name="getServiceCheckMaxAttempts">
      <documentation>Get the max check attempts of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getServiceCheckNext(service) -->
    <operation name="getServiceCheckNext">
      <documentation>Get the time at which the next service check is scheduled to run.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getServiceCheckOptions(service) -->
    <operation name="getServiceCheckOptions">
      <documentation>Get the service check options.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getServiceCheckPassiveEnabled(service) -->
    <operation name="getServiceCheckPassiveEnabled">
      <documentation>Check if passive checks are enabled on this service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceCheckPeriod(service) -->
    <operation name="getServiceCheckPeriod">
      <documentation>Get the service check period.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- getServiceCheckShouldBeScheduled(service) -->
    <operation name="getServiceCheckShouldBeScheduled">
      <documentation>Check if the service should be scheduled.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceCheckType(service) -->
    <operation name="getServiceCheckType">
      <documentation>Get the type of the service check.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- setServiceCheckActiveEnabled(service, enable) -->
    <operation name="setServiceCheckActiveEnabled">
      <documentation>Enable or disable active checks on the service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceCheckCommand(service, command) -->
    <operation name="setServiceCheckCommand">
      <documentation>Set the service check command.</documentation>
      <input message="tns:serviceStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceCheckIntervalNormal(service, interval) -->
    <operation name="setServiceCheckIntervalNormal">
      <documentation>Set the normal check interval of the service.</documentation>
      <input message="tns:serviceUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceCheckIntervalRetry(service, interval) -->
    <operation name="setServiceCheckIntervalRetry">
      <documentation>Set the retry check interval of the service.</documentation>
      <input message="tns:serviceUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceCheckMaxAttempts(service, attempts) -->
    <operation name="setServiceCheckMaxAttempts">
      <documentation>Set the max check attempts of the service.</documentation>
      <input message="tns:serviceUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceCheckPassiveEnabled(service, enable) -->
    <operation name="setServiceCheckPassiveEnabled">
      <documentation>Enable or disable host passive checks.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceCheckPeriod(service, period) -->
    <operation name="setServiceCheckPeriod">
      <documentation>Set the service check period.</documentation>
      <input message="tns:serviceStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Custom Variable.
     -->

    <!-- getServiceCustomVariable(service) -->
    <operation name="getServiceCustomVariable">
      <documentation>Get the value of a service custom variable.</documentation>
      <input message="tns:serviceStringRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- getServiceCustomVariables(service) -->
    <!-- XXX -->

    <!-- setServiceCustomVariable(service, variable, value) -->
    <!-- XXX -->

    <!--
     --  Downtime.
     -->

    <!-- getServiceDowntimeDepth(service) -->
    <operation name="getServiceDowntimeDepth">
      <documentation>Get the service downtime depth.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getServiceDowntimeFlexPending(service) -->
    <operation name="getServiceDowntimeFlexPending">
      <documentation>Check if service has a pending flexible downtime.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!--
     --  Event Handler.
     -->

    <!-- getServiceEventHandler(service) -->
    <operation name="getServiceEventHandler">
      <documentation>Get the service event handler.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- getServiceEventHandlerEnabled(service) -->
    <operation name="getServiceEventHandlerEnabled">
      <documentation>Check if the service event handler is enabled.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- setServiceEventHandler(service, eventhandler) -->
    <operation name="setServiceEventHandler">
      <documentation>Set the service event handler.</documentation>
      <input message="tns:serviceStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceEventHandlerEnabled(service, enable) -->
    <operation name="setServiceEventHandlerEnabled">
      <documentation>Enable or disable service event handler.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Failure Prediction.
     -->

    <!-- getServiceFailurePredictionEnabled(service) -->
    <operation name="getServiceFailurePredictionEnabled">
      <documentation>Check if failure prediction is enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceFailurePredictionOptions(service) -->
    <operation name="getServiceFailurePredictionOptions">
      <documentation>Get service failure prediction options.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- setServiceFailurePredictionEnabled(service, enable) -->
    <operation name="setServiceFailurePredictionEnabled">
      <documentation>Enable or disable failure prediction on service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Flap Detection.
     -->

    <!-- getServiceFlapDetectionCommentID(host) -->
    <operation name="getServiceFlapDetectionCommentID">
      <documentation>Get the flap detection comment ID of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getServiceFlapDetectionEnabled(service) -->
    <operation name="getServiceFlapDetectionEnabled">
      <documentation>Check whether flap detection is enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceFlapDetectionIsFlapping(service) -->
    <operation name="getServiceFlapDetectionIsFlapping">
      <documentation>Check if service is flapping.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceFlapDetectionOnCritical(service) -->
    <operation name="getServiceFlapDetectionOnCritical">
      <documentation>Check if flap detection is enabled on critical state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceFlapDetectionOnOk(service) -->
    <operation name="getServiceFlapDetectionOnOk">
      <documentation>Check if flap detection is enabled on ok state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceFlapDetectionOnUnknown(service) -->
    <operation name="getServiceFlapDetectionOnUnknown">
      <documentation>Check if flap detection is enabled on unknown state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceFlapDetectionOnWarning(service) -->
    <operation name="getServiceFlapDetectionOnWarning">
      <documentation>Check if flap detection is enabled on warning state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceFlapDetectionStateHistory(service) -->
    <!-- XXX -->

    <!-- getServiceFlapDetectionThresholdHigh(service) -->
    <operation name="getServiceFlapDetectionThresholdHigh">
      <documentation>Get the service high flap threshold.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:doubleResponse"/>
    </operation>

    <!-- getServiceFlapDetectionThresholdLow(service) -->
    <operation name="getServiceFlapDetectionThresholdLow">
      <documentation>Get the service low flap threshold.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:doubleResponse"/>
    </operation>

    <!-- setServiceFlapDetectionEnabled(service, enable) -->
    <operation name="setServiceFlapDetectionEnabled">
      <documentation>Enable or disable flap detection on service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceFlapDetectionOnCritical(service, enable) -->
    <operation name="setServiceFlapDetectionOnCritical">
      <documentation>Enable or disable flap detection on critical state.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceFlapDetectionOnOk(service, enable) -->
    <operation name="setServiceFlapDetectionOnOk">
      <documentation>Enable or disable flap detection on ok state.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceFlapDetectionOnUnknown(service, enable) -->
    <operation name="setServiceFlapDetectionOnUnknown">
      <documentation>Enable or disable flap detection on unknown state.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceFlapDetectionOnWarning(service, enable) -->
    <operation name="setServiceFlapDetectionOnWarning">
      <documentation>Enable or disable flap detection on warning state.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceFlapDetectionThresholdHigh(service, threshold) -->
    <operation name="setServiceFlapDetectionThresholdHigh">
      <documentation>Set the high flap threshold of the service.</documentation>
      <input message="tns:serviceDoubleRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceFlapDetectionThresholdLow(service, threshold) -->
    <operation name="setServiceFlapDetectionThresholdLow">
      <documentation>Set the low flap threshold of the service.</documentation>
      <input message="tns:serviceDoubleRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Freshness.
     -->

    <!-- getServiceFreshnessCheckEnabled(service) -->
    <operation name="getServiceFreshnessCheckEnabled">
      <documentation>Check if freshness checks are enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceFreshnessIsActive(service) -->
    <operation name="getServiceFreshnessIsActive">
      <documentation>Check if freshness check is active on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceFreshnessThreshold(service) -->
    <operation name="getServiceFreshnessThreshold">
      <documentation>Get the freshness threshold of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:integerResponse"/>
    </operation>

    <!-- setServiceFreshnessCheckEnabled(service, enable) -->
    <operation name="setServiceFreshnessCheckEnabled">
      <documentation>Enable or disable freshness checks on service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceFreshnessThreshold(service, threshold) -->
    <operation name="setServiceFreshnessThreshold">
      <documentation>Set the service freshness threshold.</documentation>
      <input message="tns:serviceIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Modified Attributes.
     -->

    <!-- getServiceModifiedAttributes(service) -->
    <operation name="getServiceModifiedAttributes">
      <documentation>Get the modified attributes on the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!--
     --  Name.
     -->

    <!-- getServiceNameDisplay(service) -->
    <operation name="getServiceNameDisplay">
      <documentation>Get the service display name.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- setServiceNameDisplay(service, displayname) -->
    <operation name="setServiceNameDisplay">
      <documentation>Set the display name of the service.</documentation>
      <input message="tns:serviceStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Notification.
     -->

    <!-- getServiceNotificationCurrentID(service) -->
    <operation name="getServiceNotificationCurrentID">
      <documentation>Get the ID of the current service notification.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getServiceNotificationCurrentNumber(service) -->
    <operation name="getServiceNotificationCurrentNumber">
      <documentation>Get the current notification number of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getServiceNotificationEnabled(service) -->
    <operation name="getServiceNotificationEnabled">
      <documentation>Check if notifications are enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceNotificationFirstDelay(service) -->
    <operation name="getServiceNotificationFirstDelay">
      <documentation>Get the first notification delay of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getServiceNotificationInterval(service) -->
    <operation name="getServiceNotificationInterval">
      <documentation>Get the notification interval of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getServiceNotificationLast(service) -->
    <operation name="getServiceNotificationLast">
      <documentation>Get the time at which the last notification was sent.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getServiceNotificationNext(service) -->
    <operation name="getServiceNotificationNext">
      <documentation>Get the time at which the next notification will be sent.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getServiceNotificationNoMore(service) -->
    <!-- XXX -->

    <!-- getServiceNotificationOnCritical(service) -->
    <operation name="getServiceNotificationOnCritical">
      <documentation>Check if notifications are sent if service is critical.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceNotificationOnDowntime(service) -->
    <operation name="getServiceNotificationOnDowntime">
      <documentation>Check if notifications are sent if service is on downtime.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceNotificationOnFlapping(service) -->
    <operation name="getServiceNotificationOnFlapping">
      <documentation>Check if notifications are sent if service is flappy.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceNotificationOnRecovery(service) -->
    <operation name="getServiceNotificationOnRecovery">
      <documentation>Check if notifications are sent if service recovers.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceNotificationOnUnknown(service) -->
    <operation name="getServiceNotificationOnUnknown">
      <documentation>Check if notifications are sent if service is unknown.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceNotificationOnWarning(service) -->
    <operation name="getServiceNotificationOnWarning">
      <documentation>Check if notifications are sent if service is warning.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceNotificationPeriod(service) -->
    <operation name="getServiceNotificationPeriod">
      <documentation>Get the notification period of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- setServiceNotificationEnabled(service, enable) -->
    <operation name="setServiceNotificationEnabled">
      <documentation>Enable or disable notifications on service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNotificationFirstDelay(service, delay) -->
    <operation name="setServiceNotificationFirstDelay">
      <documentation>Set the time after which the first service notification will be sent.</documentation>
      <input message="tns:serviceUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNotificationInterval(service, interval) -->
    <operation name="setServiceNotificationInterval">
      <documentation>Set the notification interval of the service.</documentation>
      <input message="tns:serviceUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNotificationOnCritical(service, enable) -->
    <operation name="setServiceNotificationOnCritical">
      <documentation>Enable or disable notifications when service is critical.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNotificationOnDowntime(service, enable) -->
    <operation name="setServiceNotificationOnDowntime">
      <documentation>Enable or disable notifications when service is in downtime.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNotificationOnFlapping(service, enable) -->
    <operation name="setServiceNotificationOnFlapping">
      <documentation>Enable or disable notifications when service is flappy.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNotificationOnRecovery(service, enable) -->
    <operation name="setServiceNotificationOnRecovery">
      <documentation>Enable or disable notifications when service recovers.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNotificationOnUnknown(service, enable) -->
    <operation name="setServiceNotificationOnUnknown">
      <documentation>Enable or disable notifications when service is unknown.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNotificationOnWarning(service, enable) -->
    <operation name="setServiceNotificationOnWarning">
      <documentation>Enable or disable notifications when service is warning.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNotificationPeriod(service, period) -->
    <operation name="setServiceNotificationPeriod">
      <documentation>Set notification period of service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Obsession.
     -->

    <!-- getServiceObsessOver(service) -->
    <operation name="getServiceObsessOver">
      <documentation>Check whether or not service is being obsessed over.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- setServiceObsessOver(service, enable) -->
    <operation name="setServiceObsessOver">
      <documentation>Enable or disable service obsession.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Perfdata.
     -->

    <!-- getServicePerfdataProcessingEnabled(service) -->
    <operation name="getServicePerfdataProcessingEnabled">
      <documentation>Check if perfdata processing is enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- setServicePerfdataProcessingEnabled(service, enable) -->
    <operation name="setServicePerfdataProcessingEnabled">
      <documentation>Enable or disable perfdata processing.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Plugin.
     -->

    <!-- getServicePluginExecutionTime(service) -->
    <operation name="getServicePluginExecutionTime">
      <documentation>Get the last execution time of the plugin.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- getServicePluginIsExecuting(service) -->
    <operation name="getServicePluginIsExecuting">
      <documentation>Check if service check if currently executing.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServicePluginLatency(service) -->
    <operation name="getServicePluginLatency">
      <documentation>Get the service latency.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:doubleResponse"/>
    </operation>

    <!-- getServicePluginOutput(service) -->
    <operation name="getServicePluginOutput">
      <documentation>Get the plugin output.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- getServicePluginPerfdata(service) -->
    <operation name="getServicePluginPerfdata">
      <documentation>Get the plugin perfdata.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!--
     --  Retention.
     -->

    <!-- getServiceRetainStatusInformation(service) -->
    <operation name="getServiceRetainStatusInformation">
      <documentation>Check if service status information are retained.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceRetainNonStatusInformation(service) -->
    <operation name="getServiceRetainNonStatusInformation">
      <documentation>Check if service non status information are retained.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- setServiceRetainStatusInformation(service, enable) -->
    <operation name="setServiceRetainStatusInformation">
      <documentation>Enable or disable status information retention on service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceRetainNonStatusInformation(service, enable) -->
    <operation name="setServiceRetainNonStatusInformation">
      <documentation>Enable or disable non status information retention on service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Stalking.
     -->

    <!-- getServiceStalkOnCritical(service) -->
    <operation name="getServiceStalkOnCritical">
      <documentation>Check if stalking on critical is enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceStalkOnOk(service) -->
    <operation name="getServiceStalkOnOk">
      <documentation>Check if stalking on ok is enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceStalkOnUnknown(service) -->
    <operation name="getServiceStalkOnUnknown">
      <documentation>Check if stalking on unknown is enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- getServiceStalkOnWarning(service) -->
    <operation name="getServiceStalkOnWarning">
      <documentation>Check if stalking on warning is enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- setServiceStalkOnCritical(service, enable) -->
    <operation name="setServiceStalkOnCritical">
      <documentation>Enable or disable stalking on critical.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceStalkOnOk(service, enable) -->
    <operation name="setServiceStalkOnOk">
      <documentation>Enable or disable stalking on ok.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceStalkOnUnknown(service, enable) -->
    <operation name="setServiceStalkOnUnknown">
      <documentation>Enable or disable stalking on unknown.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceStalkOnWarning(service, enable) -->
    <operation name="setServiceStalkOnWarning">
      <documentation>Enable or disable stalking on warning.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  State.
     -->

    <!-- getServiceStateCurrent(service) -->
    <operation name="getServiceStateCurrent">
      <documentation>Get the current state of the state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- getServiceStateInitial(service) -->
    <operation name="getServiceStateInitial">
      <documentation>Get the initial state of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- getServiceStateLast(service) -->
    <operation name="getServiceStateLast">
      <documentation>Get the last service state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- getServiceStateLastChange(service) -->
    <operation name="getServiceStateLastChange">
      <documentation>Get the last time the state changed.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getServiceStateLastCritical(service) -->
    <operation name="getServiceStateLastCritical">
      <documentation>Get the last time the service was in a critical state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getServiceStateLastHard(service) -->
    <operation name="getServiceStateLastHard">
      <documentation>Get the service last hard state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getServiceStateLastHardChange(service) -->
    <operation name="getServiceStateLastHardChange">
      <documentation>Get the last time at which the hard state changed.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getServiceStateLastOk(service) -->
    <operation name="getServiceStateLastOk">
      <documentation>Get the last time the service was in an ok state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getServiceStateLastUnknown(service) -->
    <operation name="getServiceStateLastUnknown">
      <documentation>Get the last time the service was in an unknown state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getServiceStateLastWarning(service) -->
    <operation name="getServiceStateLastWarning">
      <documentation>Get the last time the service was in a warning state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getServiceStatePercentChange(service) -->
    <operation name="getServiceStatePercentChange">
      <documentation>Get the percent state change of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- getServiceStateType(service) -->
    <operation name="getServiceStateType">
      <documentation>Get state type (hard or soft).</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>





    <!-- Not validated commands. -->

    <!-- acknowledgeHostProblem(string host, acknowledgementType acknowledgement) -->
    <operation name="acknowledgeHostProblem">
      <documentation>Acknowledge a problem on a host.</documentation>
      <input message="tns:acknowledgeHostProblemRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- acknowledgeServiceProblem(string host, string service, acknowledgementType acknowledgement) -->
    <operation name="acknowledgeServiceProblem">
      <documentation>Acknowledge a problem on a service.</documentation>
      <input message="tns:acknowledgeServiceProblemRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- delayHostNotification(string host, time_t until) -->
    <operation name="delayHostNotification">
      <documentation>Delay a host notification.</documentation>
      <input message="tns:hostTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- delayServiceNotification(string host, string service, time_t until) -->
    <operation name="delayServiceNotification">
      <documentation>Delay a service notification.</documentation>
      <input message="tns:serviceTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- deleteComment(unsigned long commentid) -->
    <operation name="deleteComment">
      <documentation>Delete a comment.</documentation>
      <input message="tns:IDRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- deleteDowntime(unsigned long downtimeid) -->
    <operation name="deleteDowntime">
      <documentation>Delete a downtime.</documentation>
      <input message="tns:IDRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- deleteHostAllComments(string host) -->
    <operation name="deleteHostAllComments">
      <documentation>Delete all comments of a host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- deleteHostAcknowledgement(string host) -->
    <operation name="deleteHostAcknowledgement">
      <documentation>Remove an acknowledgement on a host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- deleteServiceAllComments(string host, string service) -->
    <operation name="deleteServiceAllComments">
      <documentation>Delete all comments of a service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- deleteServiceAcknowledgement(string host, string service) -->
    <operation name="deleteServiceAcknowledgement">
      <documentation>Remove an acknowledgement on a service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- flushPendingCommands() -->
    <operation name="flushPendingCommands">
      <documentation>Discard commands already sent but not yet processed.</documentation>
      <input message="tns:emptyRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- newHostComment(string host, string comment, string user, bool persistent) -->
    <operation name="newHostComment">
      <documentation>Add a comment on a host.</documentation>
      <input message="tns:newHostCommentRequest"/>
      <output message="tns:newCommentResponse"/>
    </operation>

    <!-- newServiceComment(string host, string service, string comment, string user, bool persistent) -->
    <operation name="newServiceComment">
      <documentation>Add a comment on a service.</documentation>
      <input message="tns:newServiceCommentRequest"/>
      <output message="tns:newCommentResponse"/>
    </operation>

    <!-- processHostCheckResult(string host, int retval, string output) -->
    <operation name="processHostCheckResult">
      <documentation>Process a host check result.</documentation>
      <input message="tns:processHostCheckResultRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- processServiceCheckResult(string host, string service, int retval, string output) -->
    <operation name="processServiceCheckResult">
      <documentation>Process a service check result.</documentation>
      <input message="tns:processServiceCheckResultRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleAndPropagateHostDowntime(string host, downtimeType downtime) -->
    <operation name="scheduleAndPropagateHostDowntime">
      <documentation>Schedule downtime for a host and all of its children.</documentation>
      <input message="tns:scheduleDowntimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleAndPropagateHostTriggeredDowntime(string host, downtimeType downtime) -->
    <operation name="scheduleAndPropagateHostTriggeredDowntime">
      <documentation>Schedule downtime for a host and all of its children.</documentation>
      <input message="tns:scheduleDowntimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleHostCheck(string host, time_t when) -->
    <operation name="scheduleHostCheck">
      <documentation>Schedule a host check.</documentation>
      <input message="tns:hostTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleHostDowntime(string host, downtimeType downtime) -->
    <operation name="scheduleHostDowntime">
      <documentation>Schedule a downtime on a host.</documentation>
      <input message="tns:scheduleDowntimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleHostForcedCheck(string host, time_t when) -->
    <operation name="scheduleHostForcedCheck">
      <documentation>Schedule a forced host check.</documentation>
      <input message="tns:hostTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleHostgroupHostDowntime(string hostgroup, downtimeType downtime) -->
    <operation name="scheduleHostgroupHostDowntime">
      <documentation>Schedule a downtime on all hosts of a host group.</documentation>
      <input message="tns:scheduleDowntimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleHostgroupServiceDowntime(string hostgroup, downtimeType downtime) -->
    <operation name="scheduleHostgroupServiceDowntime">
      <documentation>Schedule a downtime on all services of the hosts of the host group.</documentation>
      <input message="tns:scheduleDowntimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleHostServiceChecks(string host, time_t when) -->
    <operation name="scheduleHostServiceChecks">
      <documentation>Schedule a check of all services associated with the host.</documentation>
      <input message="tns:hostTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleHostServiceDowntime(string host, downtimeType downtime) -->
    <operation name="scheduleHostServiceDowntime">
      <documentation>Schedule a downtime on all services of a host.</documentation>
      <input message="tns:scheduleDowntimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleHostServiceForcedChecks(string host, time_t when) -->
    <operation name="scheduleHostServiceForcedChecks">
      <documentation>Schedule a forced check of all services associated with the host.</documentation>
      <input message="tns:hostTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleServiceCheck(string host, string service, time_t when) -->
    <operation name="scheduleServiceCheck">
      <documentation>Schedule a service check.</documentation>
      <input message="tns:serviceTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleServiceDowntime(string host, string service, downtimeType downtime) -->
    <operation name="scheduleServiceDowntime">
      <documentation>Schedule a downtime on a service.</documentation>
      <input message="tns:scheduleServiceDowntimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleServiceForcedCheck(string host, string service, time_t when) -->
    <operation name="scheduleServiceForcedCheck">
      <documentation>Schedule a forced service check.</documentation>
      <input message="tns:serviceTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleServicegroupHostDowntime(string servicegroup, downtimeType downtime) -->
    <operation name="scheduleServicegroupHostDowntime">
      <documentation>Schedule a downtime on all hosts related to services members of the service group.</documentation>
      <input message="tns:scheduleDowntimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleServicegroupServiceDowntime(string servicegroup, downtimeType downtime) -->
    <operation name="scheduleServicegroupServiceDowntime">
      <documentation>Schedule a downtime on all services of the service group.</documentation>
      <input message="tns:scheduleDowntimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- sendHostCustomNotification(string host, notificationType notification) -->
    <operation name="sendHostCustomNotification">
      <documentation>Send a notification on a host.</documentation>
      <input message="tns:hostNotificationRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- sendServiceCustomNotification(string host, string service, notificationType notification) -->
    <operation name="sendServiceCustomNotification">
      <documentation>Send a notification on a service.</documentation>
      <input message="tns:serviceNotificationRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setAllNotificationsBeyondHostEnabled(string host) -->
    <operation name="setAllNotificationsBeyondHostEnabled">
      <documentation>Enable or disable all notifications beyond a host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactCustomVar(string contact, string varname, string varvalue) -->
    <operation name="setContactCustomVar">
      <documentation>Set the value of a custom variable of a contact.</documentation>
      <input message="tns:setCustomVarRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactgroupHostNotificationsEnabled(string contactgroup) -->
    <operation name="setContactgroupHostNotificationsEnabled">
      <documentation>Enable hosts notifications for each member of the contact group.</documentation>
      <input message="tns:contactgroupRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactgroupServiceNotificationsEnabled(string contactgroup) -->
    <operation name="setContactgroupServiceNotificationsEnabled">
      <documentation>Enable services notifications for each member of the contact group.</documentation>
      <input message="tns:contactgroupRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactHostNotificationsEnabled(string contact) -->
    <operation name="setContactHostNotificationsEnabled">
      <documentation>Enable host notifications on a contact.</documentation>
      <input message="tns:contactRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactHostNotificationTimeperiod(string contact, string timeperiod) -->
    <operation name="setContactHostNotificationTimeperiod">
      <documentation>Change the host notification timeperiod of a contact.</documentation>
      <input message="tns:setContactNotificationTimeperiodRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactModattr(string contact, unsigned int modattr) -->
    <operation name="setContactModattr">
      <documentation>Change the contact modified attributes value.</documentation>
      <input message="tns:setContactModattrRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactModhattr(string contact, unsigned int modattr) -->
    <operation name="setContactModhattr">
      <documentation>Change the contact modified host attributes value.</documentation>
      <input message="tns:setContactModattrRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactModsattr(string contact, unsigned int modattr) -->
    <operation name="setContactModsattr">
      <documentation>Change the contact modified service attributes value.</documentation>
      <input message="tns:setContactModattrRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactServiceNotificationsEnabled(string contact) -->
    <operation name="setContactServiceNotificationsEnabled">
      <documentation>Enable service notifications on a contact.</documentation>
      <input message="tns:contactRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactServiceNotificationTimeperiod(string contact, string timeperiod) -->
    <operation name="setContactServiceNotificationTimeperiod">
      <documentation>Change the service notification timeperiod of a contact.</documentation>
      <input message="tns:setContactNotificationTimeperiodRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setEventHandlersEnabled(bool enable) -->
    <operation name="setEventHandlersEnabled">
      <documentation>Enable or disable event handlers globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setFailurePredictionEnabled(bool enable) -->
    <operation name="setFailurePredictionEnabled">
      <documentation>Enable or disable failure prediction globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setFlapDetectionEnabled(bool enable) -->
    <operation name="setFlapDetectionEnabled">
      <documentation>Enable or disable flap detection globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostActiveChecksEnabled(string host, bool enable) -->
    <operation name="setHostActiveChecksEnabled">
      <documentation>Enable or disable active checks on a host.</documentation>
      <input message="tns:setHostEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostAndChildNotificationsEnabled(string host) -->
    <operation name="setHostAndChildNotificationsEnabled">
      <documentation>Enable notifications of a host and its children.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostCheckCommand(string host, string command) -->
    <operation name="setHostCheckCommand">
      <documentation>Change the host check command.</documentation>
      <input message="tns:setHostCheckCommandRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostCheckTimeperiod(string host, string timeperiod) -->
    <operation name="setHostCheckTimeperiod">
      <documentation>Change the check timeperiod of a host.</documentation>
      <input message="tns:setHostTimeperiodRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostCustomVar(string host, string varname, string varvalue) -->
    <operation name="setHostCustomVar">
      <documentation>Set the value of a custom variable of a host.</documentation>
      <input message="tns:setCustomVarRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostEventHandler(string host, string eventhandler) -->
    <operation name="setHostEventHandler">
      <documentation>Change the event handler of a host.</documentation>
      <input message="tns:setHostEventHandlerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostEventHandlerEnabled(string host) -->
    <operation name="setHostEventHandlerEnabled">
      <documentation>Enable or disable event handler on a host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostFlapDetectionEnabled(string host) -->
    <operation name="setHostFlapDetectionEnabled">
      <documentation>Enable or disable flap detection on a host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostgroupHostActiveChecksEnabled(string hostgroup, bool enable) -->
    <operation name="setHostgroupHostActiveChecksEnabled">
      <documentation>Enable or disable active checks of all hosts of the host group.</documentation>
      <input message="tns:hostgroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostgroupHostNotificationsEnabled(string hostgroup, bool enable) -->
    <operation name="setHostgroupHostNotificationsEnabled">
      <documentation>Enable or disable notifications on all hosts of the host group.</documentation>
      <input message="tns:hostgroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostgroupHostPassiveChecksEnabled(string hostgroup, bool enable) -->
    <operation name="setHostgroupHostPassiveChecksEnabled">
      <documentation>Enable or disable passive checks of all hosts of the host group.</documentation>
      <input message="tns:hostgroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostgroupServiceActiveChecksEnabled(string hostgroup, bool enable) -->
    <operation name="setHostgroupServiceActiveChecksEnabled">
      <documentation>Enable or disable active checks of all services of hosts of the host group.</documentation>
      <input message="tns:hostgroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostgroupServiceNotificationsEnabled(string hostgroup, bool enable) -->
    <operation name="setHostgroupServiceNotificationsEnabled">
      <documentation>Enable or disable notifications of all services of hosts of the host group.</documentation>
      <input message="tns:hostgroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostgroupServicePassiveChecksEnabled(string hostgroup, bool enable) -->
    <operation name="setHostgroupServicePassiveChecksEnabled">
      <documentation>Enable or disable passive checks of all services of hosts of the host group.</documentation>
      <input message="tns:hostgroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostMaxCheckAttempts(string host, unsigned int maxattempts) -->
    <operation name="setHostMaxCheckAttempts">
      <documentation>Change the max check attempt value of a host.</documentation>
      <input message="tns:setHostUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostModattr(string host, unsigned int modattr) -->
    <operation name="setHostModattr">
      <documentation>Change the host modified attributes value.</documentation>
      <input message="tns:setHostModattrRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostNormalCheckInterval(string host, time_t interval) -->
    <operation name="setHostNormalCheckInterval">
      <documentation>Change the normal check interval of a host.</documentation>
      <input message="tns:hostTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostNotificationNumber(string host, unsigned int notificationnumber) -->
    <operation name="setHostNotificationNumber">
      <documentation>Set the notification number of a host.</documentation>
      <input message="tns:setHostUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostNotificationsEnabled(string host, bool enable) -->
    <operation name="setHostNotificationsEnabled">
      <documentation>Enable or disable notifications of a host.</documentation>
      <input message="tns:setHostEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostNotificationTimeperiod(string host, string timeperiod) -->
    <operation name="setHostNotificationTimeperiod">
      <documentation>Change the host notification timeperiod.</documentation>
      <input message="tns:setHostTimeperiodRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostObsessOver(string host, bool enable) -->
    <operation name="setHostObsessOver">
      <documentation>Start or stop obsessing over a host.</documentation>
      <input message="tns:setHostEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostPassiveChecksEnabled(string host, bool enable) -->
    <operation name="setHostPassiveChecksEnabled">
      <documentation>Enable or disable passive checks on a host.</documentation>
      <input message="tns:setHostEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostRetryCheckInterval(string host, time_t interval) -->
    <operation name="setHostRetryCheckInterval">
      <documentation>Change the retry check interval of a host.</documentation>
      <input message="tns:hostTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostsActiveChecksEnabled(bool enable) -->
    <operation name="setHostsActiveChecksEnabled">
      <documentation>Enable or disable active host checks globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostServicesActiveChecksEnabled(string host, bool enable) -->
    <operation name="setHostServicesActiveChecksEnabled">
      <documentation>Enable all active checks of all services of a host.</documentation>
      <input message="tns:setHostEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostServicesNotificationsEnabled(string host, bool enable) -->
    <operation name="setHostServicesNotificationsEnabled">
      <documentation>Enable or disable notifications on all services of a host.</documentation>
      <input message="tns:setHostEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostsEventHandler(string command) -->
    <operation name="setHostsEventHandler">
      <documentation>Change the global host event handler.</documentation>
      <input message="tns:setEventHandlerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostsFreshnessChecksEnabled(bool enable) -->
    <operation name="setHostsFreshnessChecksEnabled">
      <documentation>Enable or disable host freshness checks globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostsPassiveChecksEnabled(bool enable) -->
    <operation name="setHostsPassiveChecksEnabled">
      <documentation>Enable or disable passive host checks globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setNotificationsEnabled(bool enable) -->
    <operation name="setNotificationsEnabled">
      <documentation>Enable or disable notifications globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setObsessOverHostsEnabled(bool enable) -->
    <operation name="setObsessOverHostsEnabled">
      <documentation>Enable or disable obsession over host checks.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setObsessOverServicesEnabled(bool enable) -->
    <operation name="setObsessOverServicesEnabled">
      <documentation>Enable or disable obsession over service checks.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setPerformanceDataEnabled(bool enable) -->
    <operation name="setPerformanceDataEnabled">
      <documentation>Enable or disable performance data processing globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceActiveChecksEnabled(string host, string service, bool enable) -->
    <operation name="setServiceActiveChecksEnabled">
      <documentation>Enable or disable active checks of a service.</documentation>
      <input message="tns:setServiceEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceCheckCommand(string host, string service, string command) -->
    <operation name="setServiceCheckCommand">
      <documentation>Change the service check command.</documentation>
      <input message="tns:setServiceCheckCommandRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceCheckTimeperiod(string host, string service, string timeperiod) -->
    <operation name="setServiceCheckTimeperiod">
      <documentation>Change the check timeperiod of a service.</documentation>
      <input message="tns:setServiceTimeperiodRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceCustomVar(string host, string service, string varname, string varvalue) -->
    <operation name="setServiceCustomVar">
      <documentation>Set the value of a custom variable of a service.</documentation>
      <input message="tns:setServiceCustomVarRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceEventHandler(string host, string service, string eventhandler) -->
    <operation name="setServiceEventHandler">
      <documentation>Change the event handler of a service.</documentation>
      <input message="tns:setServiceEventHandlerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceEventHandlerEnabled(string host, string service, bool enable) -->
    <operation name="setServiceEventHandlerEnabled">
      <documentation>Enable or disable the event handler of a service.</documentation>
      <input message="tns:setServiceEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--setServiceFlapDetectionEnabled(string host, string service, bool enable) -->
    <operation name="setServiceFlapDetectionEnabled">
      <documentation>Enable or disable flap detection on a service.</documentation>
      <input message="tns:setServiceEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicegroupHostActiveChecksEnabled(string servicegroup, bool enable) -->
    <operation name="setServicegroupHostActiveChecksEnabled">
      <documentation>Enable or disable active checks of hosts of services of the service group.</documentation>
      <input message="tns:servicegroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicegroupHostNotificationsEnabled(string servicegroup, bool enable) -->
    <operation name="setServicegroupHostNotificationsEnabled">
      <documentation>Enable or disable notifications of hosts of services of the service group.</documentation>
      <input message="tns:servicegroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicegroupHostPassiveChecksEnabled(string servicegroup, bool enable) -->
    <operation name="setServicegroupHostPassiveChecksEnabled">
      <documentation>Enable or disable passive checks of hosts of services of the service group.</documentation>
      <input message="tns:servicegroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicegroupServiceActiveChecksEnabled(string servicegroup, bool enable) -->
    <operation name="setServicegroupServiceActiveChecksEnabled">
      <documentation>Enable or disable active checks of services of the service group.</documentation>
      <input message="tns:servicegroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicegroupServiceNotificationsEnabled(string servicegroup, bool enable) -->
    <operation name="setServicegroupServiceNotificationsEnabled">
      <documentation>Enable or disable notifications of services of the service group.</documentation>
      <input message="tns:servicegroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicegroupServicePassiveChecksEnabled(string servicegroup, bool enable) -->
    <operation name="setServicegroupServicePassiveChecksEnabled">
      <documentation>Enable or disable passive checks of services of the service group.</documentation>
      <input message="tns:servicegroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceMaxCheckAttempts(string host, string service, unsigned int maxattempts) -->
    <operation name="setServiceMaxCheckAttempts">
      <documentation>Set the maximum attempts of a service check.</documentation>
      <input message="tns:setServiceUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceModattr(string host, string service, unsigned int modattr) -->
    <operation name="setServiceModattr">
      <documentation>Change the service modified attributes value.</documentation>
      <input message="tns:setServiceModattrRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNormalCheckInterval(string host, string service, time_t interval) -->
    <operation name="setServiceNormalCheckInterval">
      <documentation>Change the normal check interval of a service.</documentation>
      <input message="tns:serviceTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNotificationNumber(string host, string service, unsigned int notificationnumber) -->
    <operation name="setServiceNotificationNumber">
      <documentation>Set the notification number of a service.</documentation>
      <input message="tns:setServiceUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNotificationsEnabled(string host, string service, bool enable) -->
    <operation name="setServiceNotificationsEnabled">
      <documentation>Enable or disable notifications of a service.</documentation>
      <input message="tns:setServiceEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNotificationTimeperiod(string host, string service, string timeperiod) -->
    <operation name="setServiceNotificationTimeperiod">
      <documentation>Change the service notification timeperiod.</documentation>
      <input message="tns:setServiceTimeperiodRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceObsessOver(string host, string service, bool enable) -->
    <operation name="setServiceObsessOver">
      <documentation>Start or stop obsessing over a service.</documentation>
      <input message="tns:setServiceEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicePassiveChecksEnabled(string host, string service, bool enable) -->
    <operation name="setServicePassiveChecksEnabled">
      <documentation>Enable or disable passive checks on a service.</documentation>
      <input message="tns:setServiceEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceRetryCheckInterval(string host, string service, time_t interval) -->
    <operation name="setServiceRetryCheckInterval">
      <documentation>Change the retry check interval of a service.</documentation>
      <input message="tns:serviceTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicesEventHandler(string command) -->
    <operation name="setServicesEventHandler">
      <documentation>Change the global service event handler.</documentation>
      <input message="tns:setEventHandlerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicesActiveChecksEnabled(bool enable) -->
    <operation name="setServicesActiveChecksEnabled">
      <documentation>Enable or disable active service checks globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicesFreshnessChecksEnabled(bool enable) -->
    <operation name="setServicesFreshnessChecksEnabled">
      <documentation>Enable or disable service freshness checks globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicesPassiveChecksEnabled(bool enable) -->
    <operation name="setServicesPassiveChecksEnabled">
      <documentation>Enable or disable passive service checks globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

  </portType>

  <binding name="centreonscheduler" type="tns:commandPortType">
    <SOAP:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>

    <!--------------------------
     --                       --
     --  Process operations.  --
     --                       --
     --------------------------->

    <operation name="processRestart">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="processShutdown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="stateInformationLoad">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="stateInformationSave">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>


    <!-----------------------
     --                    --
     --  Host properties.  --
     --                    --
     ------------------------>

    <operation name="getHostAcknowledgementIsSet">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostAcknowledgementType">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostAddress">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostAddress">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostCheckActiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostCheckCommand">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostCheckCurrentAttempt">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostCheckIntervalNormal">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostCheckIntervalRetry">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostCheckLast">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostCheckMaxAttempts">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostCheckNext">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostCheckOptions">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostCheckPassiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostCheckPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostCheckShouldBeScheduled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostCheckType">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostCheckActiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostCheckCommand">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostCheckIntervalNormal">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostCheckIntervalRetry">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostCheckMaxAttempts">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostCheckPassiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostCheckPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostCircularPathChecked">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostCircularPathHas">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostDowntimeDepth">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostDowntimeFlexPending">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostEventHandlerEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostEventHandlerEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostFailurePredictionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostFailurePredictionOptions">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostFailurePredictionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostFlapDetectionCommentID">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostFlapDetectionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostFlapDetectionIsFlapping">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostFlapDetectionOnDown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostFlapDetectionOnUnreachable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostFlapDetectionOnUp">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostFlapDetectionStateHistoryLastUpdate">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostFlapDetectionThresholdHigh">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostFlapDetectionThresholdLow">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostFlapDetectionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostFlapDetectionOnDown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostFlapDetectionOnUnreachable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostFlapDetectionOnUp">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostFlapDetectionThresholdHigh">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostFlapDetectionThresholdLow">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostFreshnessCheckEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostFreshnessIsActive">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostFreshnessThreshold">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostFreshnessCheckEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostFreshnessThreshold">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostModifiedAttributes">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostNameAlias">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostNameDisplay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNameAlias">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNameDisplay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostNotificationCurrentID">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostNotificationCurrentNumber">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostNotificationEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostNotificationFirstDelay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostNotificationInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostNotificationLast">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostNotificationNext">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostNotificationOnDown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostNotificationOnDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostNotificationOnFlapping">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostNotificationOnRecovery">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostNotificationOnUnreachable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostNotificationPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNotificationEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNotificationFirstDelay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNotificationInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNotificationOnDown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNotificationOnDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNotificationOnFlapping">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNotificationOnRecovery">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNotificationOnUnreachable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNotificationPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostObsessOver">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostObsessOver">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostPerfdataProcessingEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostPerfdataProcessingEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostPluginExecutionTime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostPluginIsExecuting">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostPluginLatency">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostPluginOutput">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostPluginPerfdata">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostRetainStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostRetainNonStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostRetainStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostRetainNonStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostServicesCount">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostServicesTotalCheckInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostStalkOnDown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostStalkOnUnreachable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostStalkOnUp">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostStalkOnDown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostStalkOnUnreachable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostStalkOnUp">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostStateCurrent">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostStateInitial">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostStateLast">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostStateLastChange">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostStateLastDown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostStateLastHard">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostStateLastHardChange">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostStateLastUnreachable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostStateLastUp">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostStatePercentChange">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getHostStateType">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>


    <!--------------------------
     --                       --
     --  Service properties.  --
     --                       --
     --------------------------->

    <operation name="getServiceAcknowledgementIsSet">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceAcknowledgementType">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceCheckActiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceCheckCommand">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceCheckCurrentAttempt">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceCheckIntervalNormal">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceCheckIntervalRetry">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceCheckLast">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceCheckMaxAttempts">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceCheckNext">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceCheckOptions">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceCheckPassiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceCheckPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceCheckShouldBeScheduled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceCheckType">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceCheckActiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceCheckCommand">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceCheckIntervalNormal">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceCheckIntervalRetry">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceCheckMaxAttempts">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceCheckPassiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceCheckPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceCustomVariable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceDowntimeDepth">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceDowntimeFlexPending">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceEventHandlerEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceEventHandlerEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceFailurePredictionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceFailurePredictionOptions">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceFailurePredictionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceFlapDetectionCommentID">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceFlapDetectionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceFlapDetectionIsFlapping">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceFlapDetectionOnCritical">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceFlapDetectionOnOk">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceFlapDetectionOnUnknown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceFlapDetectionOnWarning">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceFlapDetectionThresholdHigh">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceFlapDetectionThresholdLow">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceFlapDetectionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceFlapDetectionOnCritical">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceFlapDetectionOnOk">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceFlapDetectionOnUnknown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceFlapDetectionOnWarning">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceFlapDetectionThresholdHigh">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceFlapDetectionThresholdLow">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceFreshnessCheckEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceFreshnessIsActive">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceFreshnessThreshold">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceFreshnessCheckEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceFreshnessThreshold">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceModifiedAttributes">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceNameDisplay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNameDisplay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceNotificationCurrentID">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceNotificationCurrentNumber">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceNotificationEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceNotificationFirstDelay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceNotificationInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceNotificationLast">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceNotificationNext">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceNotificationOnCritical">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceNotificationOnDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceNotificationOnFlapping">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceNotificationOnRecovery">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceNotificationOnUnknown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceNotificationOnWarning">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceNotificationPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationFirstDelay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationOnCritical">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationOnDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationOnFlapping">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationOnRecovery">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationOnUnknown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationOnWarning">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceObsessOver">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceObsessOver">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServicePerfdataProcessingEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicePerfdataProcessingEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServicePluginExecutionTime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServicePluginIsExecuting">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServicePluginLatency">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServicePluginOutput">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServicePluginPerfdata">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceRetainStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceRetainNonStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceRetainStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceRetainNonStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStalkOnCritical">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStalkOnOk">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStalkOnUnknown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStalkOnWarning">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceStalkOnCritical">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceStalkOnOk">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceStalkOnUnknown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceStalkOnWarning">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStateCurrent">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStateInitial">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStateLast">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStateLastChange">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStateLastCritical">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStateLastHard">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStateLastHardChange">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStateLastOk">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStateLastUnknown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStateLastWarning">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStatePercentChange">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="getServiceStateType">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>




    <!-- Not validated operations. -->
    <operation name="acknowledgeHostProblem">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="acknowledgeServiceProblem">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="deleteComment">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="deleteDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="deleteHostAcknowledgement">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="deleteHostAllComments">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="deleteServiceAllComments">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="flushPendingCommands">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="newHostComment">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="newServiceComment">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="processHostCheckResult">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="processServiceCheckResult">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleAndPropagateHostDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleAndPropagateHostTriggeredDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleHostCheck">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleHostForcedCheck">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleHostgroupHostDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleHostgroupServiceDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleHostServiceChecks">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleHostServiceDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleHostServiceForcedChecks">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleServiceCheck">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleServiceDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleServiceForcedCheck">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleServicegroupHostDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleServicegroupServiceDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="sendHostCustomNotification">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="sendServiceCustomNotification">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setAllNotificationsBeyondHostEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactCustomVar">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactgroupHostNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactgroupServiceNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactHostNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactHostNotificationTimeperiod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactModattr">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactModhattr">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactModsattr">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactServiceNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactServiceNotificationTimeperiod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setEventHandlersEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setFailurePredictionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setFlapDetectionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostAndChildNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostCheckCommand">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostCheckTimeperiod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostCustomVar">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostEventHandlerEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostFlapDetectionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostgroupHostActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostgroupHostNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostgroupHostPassiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostgroupServiceActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostgroupServiceNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostgroupServicePassiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostMaxCheckAttempts">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostModattr">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNormalCheckInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNotificationNumber">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNotificationTimeperiod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostObsessOver">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostRetryCheckInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostsActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostServicesActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostServicesNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostsEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostsFreshnessChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostsPassiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setObsessOverHostsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setObsessOverServicesEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setPerformanceDataEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceCheckCommand">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceCheckTimeperiod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceCustomVar">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceEventHandlerEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceFlapDetectionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicegroupHostActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicegroupHostNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicegroupHostPassiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicegroupServiceActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicegroupServiceNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicegroupServicePassiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceMaxCheckAttempts">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceModattr">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNormalCheckInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationNumber">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationTimeperiod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceObsessOver">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicePassiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceRetryCheckInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicesActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicesEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicesFreshnessChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicesPassiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

  </binding>

  <service name="centreonscheduler">
    <documentation>Centreon Scheduler service definition</documentation>
    <port name="centreonscheduler" binding="tns:centreonscheduler">
      <SOAP:address location="http://www.centreon.com/scheduler/commands/"/>
    </port>
  </service>

</definitions>
