<?xml version="1.0" encoding="UTF-8"?>
<definitions name="CentreonSchedulerCommands"
             targetNamespace="http://www.centreon.com/scheduler/commands.wsdl"
             xmlns:tns="http://www.centreon.com/scheduler/commands.wsdl"
             xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
             xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:xsd="http://www.w3.org/2001/XMLSchema"
             xmlns:ns="urn:centreonscheduler"
             xmlns:SOAP="http://schemas.xmlsoap.org/wsdl/soap/"
             xmlns:WSDL="http://schemas.xmlsoap.org/wsdl/"
             xmlns="http://schemas.xmlsoap.org/wsdl/">

  <types>
    <schema targetNamespace="http://www.centreon.com/scheduler/commands.wsdl"
            xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/"
            xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:ns="urn:centreonscheduler"
            xmlns="http://www.w3.org/2001/XMLSchema"
            elementFormDefault="unqualified"
            attributeFormDefault="unqualified">
      <import namespace="http://schemas.xmlsoap.org/soap/encoding/"/>

      <!-- Error. -->
      <complexType name="errorType">
        <sequence>
          <element name="code" type="xsd:unsignedInt"/>
          <element name="message" type="xsd:string"/>
        </sequence>
      </complexType>

      <!-- Host identifier. -->
      <complexType name="hostIDType">
        <sequence>
          <element name="name" type="xsd:string"/>
        </sequence>
      </complexType>

      <!-- Service identifier. -->
      <complexType name="serviceIDType">
        <sequence>
          <element name="host" type="tns:hostIDType"/>
          <element name="service" type="xsd:string"/>
        </sequence>
      </complexType>

      <!-- Acknowledgement. -->
      <complexType name="acknowledgementType">
        <sequence>
          <element name="author" type="xsd:string"/>
          <element name="comment" type="xsd:string"/>
          <element name="notify" type="xsd:boolean"/>
          <element name="persistent" type="xsd:boolean"/>
          <element name="sticky" type="xsd:boolean"/>
        </sequence>
      </complexType>

      <!-- Check result. -->
      <complexType name="checkResultType">
        <sequence>
          <element name="retval" type="xsd:int"/>
          <element name="output" type="xsd:string"/>
        </sequence>
      </complexType>

      <!-- Downtime identifier. -->
      <complexType name="downtimeIDType">
        <sequence>
          <element name="downtime" type="xsd:unsignedLong"/>
        </sequence>
      </complexType>

      <!-- Downtime. -->
      <complexType name="downtimeType">
        <sequence>
          <element name="starttime" type="xsd:dateTime"/>
          <element name="endtime" type="xsd:dateTime"/>
          <element name="fixed" type="xsd:boolean"/>
          <element name="triggerid" type="tns:downtimeIDType"/>
          <element name="duration" type="xsd:double"/>
          <element name="author" type="xsd:string"/>
          <element name="comment" type="xsd:string"/>
        </sequence>
      </complexType>

      <!-- Notification. -->
      <complexType name="notificationType">
        <sequence>
          <element name="author" type="xsd:string"/>
          <element name="broadcast" type="xsd:boolean"/>
          <element name="comment" type="xsd:string"/>
          <element name="forced" type="xsd:string"/>
          <element name="increment" type="xsd:string"/>
        </sequence>
      </complexType>

    </schema>
  </types>

  <!--
   --  Generic messages.
   -->

  <!-- Empty request. -->
  <message name="emptyRequest">
  </message>

  <!-- Default response (an error code and an error string). -->
  <message name="defaultResponse">
    <part name="error" type="tns:errorType"/>
  </message>

  <!--
   --  Typed messages.
   -->

  <!-- Returns a boolean value. -->
  <message name="booleanResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:boolean"/>
  </message>

  <!-- Returns a timestamp. -->
  <message name="dateResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:unsignedLong"/>
  </message>

  <!-- Returns a double. -->
  <message name="doubleResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:double"/>
  </message>

  <!-- Returns an integer. -->
  <message name="integerResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:int"/>
  </message>

  <!-- Returns a short. -->
  <message name="shortResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:short"/>
  </message>

  <!-- Returns a string. -->
  <message name="stringResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:string"/>
  </message>

  <!-- Returns an unsigned integer value. -->
  <message name="unsignedIntResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:unsignedInt"/>
  </message>

  <!-- Returns an unsigned short value. -->
  <message name="unsignedShortResponse">
    <part name="error" type="tns:errorType"/>
    <part name="value" type="xsd:unsignedShort"/>
  </message>

  <!--
   --  Host messages.
   -->

  <!-- Host request with no additional parameter. -->
  <message name="hostRequest">
    <part name="host" type="tns:hostIDType"/>
  </message>

  <!-- Host request with a boolean. -->
  <message name="hostBooleanRequest">
    <part name="host" type="tns:hostIDType"/>
    <part name="value" type="xsd:boolean"/>
  </message>

  <!-- Host request with a date. -->
  <message name="hostDateRequest">
    <part name="host" type="tns:hostIDType"/>
    <part name="value" type="xsd:dateTime"/>
  </message>

  <!-- Host request with a double. -->
  <message name="hostDoubleRequest">
    <part name="host" type="tns:hostIDType"/>
    <part name="value" type="xsd:double"/>
  </message>

  <!-- Host request with an integer. -->
  <message name="hostIntegerRequest">
    <part name="host" type="tns:hostIDType"/>
    <part name="value" type="xsd:int"/>
  </message>

  <!-- Host request with a string. -->
  <message name="hostStringRequest">
    <part name="host" type="tns:hostIDType"/>
    <part name="value" type="xsd:string"/>
  </message>

  <!-- Host request with unsigned integer. -->
  <message name="hostUnsignedIntegerRequest">
    <part name="host" type="tns:hostIDType"/>
    <part name="value" type="xsd:unsignedInt"/>
  </message>

  <!--
   --  Service messages.
   -->

  <!-- Service request with no additional parameter. -->
  <message name="serviceRequest">
    <part name="service" type="tns:serviceIDType"/>
  </message>

  <!-- Service request with a boolean. -->
  <message name="serviceBooleanRequest">
    <part name="service" type="tns:serviceIDType"/>
    <part name="value" type="xsd:boolean"/>
  </message>

  <!-- Service request with a date. -->
  <message name="serviceDateRequest">
    <part name="service" type="tns:serviceIDType"/>
    <part name="value" type="xsd:dateTime"/>
  </message>

  <!-- Service request with a double. -->
  <message name="serviceDoubleRequest">
    <part name="service" type="tns:serviceIDType"/>
    <part name="value" type="xsd:double"/>
  </message>

  <!-- Service request with an integer. -->
  <message name="serviceIntegerRequest">
    <part name="service" type="tns:serviceIDType"/>
    <part name="value" type="xsd:int"/>
  </message>

  <!-- Service request with a string. -->
  <message name="serviceStringRequest">
    <part name="service" type="tns:serviceIDType"/>
    <part name="value" type="xsd:string"/>
  </message>

  <!-- Service request with an unsigned integer. -->
  <message name="serviceUnsignedIntegerRequest">
    <part name="service" type="tns:serviceIDType"/>
    <part name="value" type="xsd:unsignedInt"/>
  </message>

  <!--
   --  Acknowledgement messages.
   -->

  <!-- Message to acknowledge a host problem. -->
  <message name="acknowledgementOnHostAddRequest">
    <part name="host" type="tns:hostIDType"/>
    <part name="acknowledgement" type="tns:acknowledgementType"/>
  </message>

  <!-- Message to acknowledge a service problem. -->
  <message name="acknowledgementOnServiceAddRequest">
    <part name="service" type="tns:serviceIDType"/>
    <part name="acknowledgement" type="tns:acknowledgementType"/>
  </message>

  <!--
   --  Check messages.
   -->

  <!-- Message sent when submitting a host check result. -->
  <message name="checkHostRequest">
    <part name="host" type="tns:hostIDType"/>
    <part name="result" type="tns:checkResultType"/>
  </message>

  <!-- Message sent when submitting a service check result. -->
  <message name="checkServiceRequest">
    <part name="service" type="tns:serviceIDType"/>
    <part name="result" type="tns:checkResultType"/>
  </message>

  <!--
   --  Downtime messages.
   -->

  <!-- Generic downtime request. -->
  <message name="downtimeRequest">
    <part name="downtime" type="tns:downtimeIDType"/>
  </message>

  <!-- Add a downtime related to a host. -->
  <message name="downtimeHostRequest">
    <part name="host" type="tns:hostIDType"/>
    <part name="downtime" type="tns:downtimeType"/>
  </message>

  <!-- Add a downtime related to a service. -->
  <message name="downtimeServiceRequest">
    <part name="service" type="tns:serviceIDType"/>
    <part name="downtime" type="tns:downtimeType"/>
  </message>

  <!-- Returns a downtime ID. -->
  <message name="downtimeResponse">
    <part name="downtimeid" type="tns:downtimeIDType"/>
  </message>

  <!--
   --  Notification messages.
   -->

  <!-- Host notification request. -->
  <message name="notificationHostRequest">
    <part name="host" type="tns:hostIDType"/>
    <part name="notification" type="tns:notificationType"/>
  </message>

  <!-- Add service notification. -->
  <message name="notificationServiceRequest">
    <part name="service" type="tns:serviceIDType"/>
    <part name="notification" type="tns:notificationType"/>
  </message>


  <!-- Not validated messages. -->

  <!-- Message sent when executing an operation on a contactgroup. -->
  <message name="contactgroupRequest">
    <part name="contactgroup" type="xsd:string"/>
  </message>

  <!-- Message sent when executing an operation on a contact. -->
  <message name="contactRequest">
    <part name="contact" type="xsd:string"/>
  </message>

  <!-- Message sent when setting a feature of a host group. -->
  <message name="hostgroupEnableRequest">
    <part name="hostgroup" type="xsd:string"/>
    <part name="enable" type="xsd:boolean"/>
  </message>

  <!-- Message sent when sending a host notification. -->
  <message name="hostNotificationRequest">
    <part name="host" type="xsd:string"/>
    <part name="notification" type="tns:notificationType"/>
  </message>

  <!-- Message sent when executing an operation on a host. -->
  <message name="hostRequest">
    <part name="host" type="xsd:string"/>
  </message>

  <!-- Message sent when changing a time on a host. -->
  <message name="hostTimeRequest">
    <part name="host" type="xsd:string"/>
    <part name="time" type="xsd:dateTime"/>
  </message>

  <!-- Message send when operating on an ID. -->
  <message name="IDRequest">
    <part name="id" type="xsd:long"/>
  </message>

  <!-- Message returned when a new comment has been created. -->
  <message name="newCommentResponse">
    <part name="errorCode" type="xsd:int"/>
    <part name="errorString" type="xsd:string"/>
    <part name="commentID" type="xsd:unsignedInt"/>
  </message>

  <!-- Message sent when creating a new host comment. -->
  <message name="newHostCommentRequest">
    <part name="host" type="xsd:string"/>
    <part name="comment" type="xsd:string"/>
    <part name="user" type="xsd:string"/>
    <part name="persistent" type="xsd:boolean"/>
  </message>

  <!-- Message sent when creating a new service comment. -->
  <message name="newServiceCommentRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="comment" type="xsd:string"/>
    <part name="user" type="xsd:string"/>
    <part name="persistent" type="xsd:boolean"/>
  </message>

  <!-- Message sent when processing a host check result. -->
  <message name="processHostCheckResultRequest">
    <part name="host" type="xsd:string"/>
    <part name="retval" type="xsd:int"/>
    <part name="output" type="xsd:string"/>
  </message>

  <!-- Message sent when processing a service check result. -->
  <message name="processServiceCheckResultRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="retval" type="xsd:int"/>
    <part name="output" type="xsd:string"/>
  </message>

  <!-- Message sent when scheduling a downtime (except for service target). -->
  <message name="scheduleDowntimeRequest">
    <part name="target" type="xsd:string"/>
    <part name="downtime" type="tns:downtimeType"/>
  </message>

  <!-- Message sent when scheduling a downtime on a service. -->
  <message name="scheduleServiceDowntimeRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="downtime" type="xsd:downtimeType"/>
  </message>

  <!-- Message sent when setting a feature of a service group. -->
  <message name="servicegroupEnableRequest">
    <part name="servicegroup" type="xsd:string"/>
    <part name="enable" type="xsd:boolean"/>
  </message>

  <!-- Message sent when sending a service notification. -->
  <message name="serviceNotificationRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="notification" type="tns:notificationType"/>
  </message>

  <!-- Message sent when executing an operation on a service. -->
  <message name="serviceRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
  </message>

  <!-- Message sent when changing a service time. -->
  <message name="serviceTimeRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="time" type="xsd:dateTime"/>
  </message>

  <!-- Message sent when changing a modified attribute value. -->
  <message name="setContactModattrRequest">
    <part name="contact" type="xsd:string"/>
    <part name="modattr" type="xsd:unsignedInt"/>
  </message>

  <!-- Message sent when changing a notification timeperiod of a contact. -->
  <message name="setContactNotificationTimeperiodRequest">
    <part name="contact" type="xsd:string"/>
    <part name="timeperiod" type="xsd:string"/>
  </message>

  <!-- Message sent when (re)setting a custom variable (except for service targets). -->
  <message name="setCustomVarRequest">
    <part name="target" type="xsd:string"/>
    <part name="varname" type="xsd:string"/>
    <part name="varvalue" type="xsd:string"/>
  </message>

  <!-- Message to enable or disable feature. -->
  <message name="setEnabledRequest">
    <part name="enable" type="xsd:boolean"/>
  </message>

  <!-- Message sent when (re)setting a global event handler. -->
  <message name="setEventHandlerRequest">
    <part name="command" type="xsd:string"/>
  </message>

  <!-- Message sent when changing a host check command. -->
  <message name="setHostCheckCommandRequest">
    <part name="host" type="xsd:string"/>
    <part name="command" type="xsd:string"/>
  </message>

  <!-- Message sent to enable a host feature. -->
  <message name="setHostEnabledRequest">
    <part name="host" type="xsd:string"/>
    <part name="enable" type="xsd:boolean"/>
  </message>

  <!-- Message sent when changing a host event handler. -->
  <message name="setHostEventHandlerRequest">
    <part name="host" type="xsd:string"/>
    <part name="eventhandler" type="xsd:string"/>
  </message>

  <!-- Message sent when changing the modified attributes value of a host. -->
  <message name="setHostModattrRequest">
    <part name="host" type="xsd:string"/>
    <part name="modattr" type="xsd:unsignedInt"/>
  </message>

  <!-- Message sent when changing a host timeperiod. -->
  <message name="setHostTimeperiodRequest">
    <part name="host" type="xsd:string"/>
    <part name="timeperiod" type="xsd:string"/>
  </message>

  <!-- Message sent to change an unsigned integer value of a host. -->
  <message name="setHostUnsignedIntegerRequest">
    <part name="host" type="xsd:string"/>
    <part name="value" type="xsd:unsignedInt"/>
  </message>

  <!-- Message sent when changing a service check command. -->
  <message name="setServiceCheckCommandRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="command" type="xsd:string"/>
  </message>

  <!-- Message sent when (re)setting a service custom variable. -->
  <message name="setServiceCustomVarRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="varname" type="xsd:string"/>
    <part name="varvalue" type="xsd:string"/>
  </message>

  <!-- Message sent to enable a service feature. -->
  <message name="setServiceEnabledRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="enable" type="xsd:boolean"/>
  </message>

  <!-- Message sent when changing a service event handler. -->
  <message name="setServiceEventHandlerRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="eventhandler" type="xsd:string"/>
  </message>

  <!-- Message sent when changing the modified attributes value of a service. -->
  <message name="setServiceModattrRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="modattr" type="xsd:unsignedInt"/>
  </message>

  <!-- Message sent when changing a service timeperiod. -->
  <message name="setServiceTimeperiodRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="timeperiod" type="xsd:string"/>
  </message>

  <!-- Message sent when changing an unsigned integer value of a service. -->
  <message name="setServiceUnsignedIntegerRequest">
    <part name="host" type="xsd:string"/>
    <part name="service" type="xsd:string"/>
    <part name="value" type="xsd:unsignedInt"/>
  </message>

  <portType name="commandPortType">

    <!--------------------------
     --                       --
     --  Global operations.  --
     --                       --
     --------------------------->

    <!--
     --  Process.
     -->

    <!-- processRestart() -->
    <operation name="processRestart">
      <documentation>Restart Scheduler.</documentation>
      <input message="tns:emptyRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- processShutdown() -->
    <operation name="processShutdown">
      <documentation>Shutdown Scheduler.</documentation>
      <input message="tns:emptyRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Retention file.
     -->

    <!-- stateInformationLoad() -->
    <operation name="stateInformationLoad">
      <documentation>Read state information.</documentation>
      <input message="tns:emptyRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- stateInformationSave() -->
    <operation name="stateInformationSave">
      <documentation>Save state information.</documentation>
      <input message="tns:emptyRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>


    <!-----------------------
     --                    --
     --  Host properties.  --
     --                    --
     ------------------------>

    <!--
     --  Acknowledgement.
     -->

    <!-- hostGetAcknowledgementIsSet(host) -->
    <operation name="hostGetAcknowledgementIsSet">
      <documentation>Get whether or not the host is acknowledged.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetAcknowledgementType(host) -->
    <operation name="hostGetAcknowledgementType">
      <documentation>Get the current type of the acknowledgement on a host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!--
     --  Address.
     -->

    <!-- hostGetAddress(host) -->
    <operation name="hostGetAddress">
      <documentation>Get the address of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- hostSetAddress(host, address) -->
    <operation name="hostSetAddress">
      <documentation>Set the address of the host.</documentation>
      <input message="tns:hostStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Check.
     -->

    <!-- hostGetCheckActiveEnabled(host) -->
    <operation name="hostGetCheckActiveEnabled">
      <documentation>Check if active checks are enabled on the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetCheckCommand(host) -->
    <operation name="hostGetCheckCommand">
      <documentation>Get the host check command.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- hostGetCheckCurrentAttempt(host) -->
    <operation name="hostGetCheckCurrentAttempt">
      <documentation>Get the current check attempt of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- hostGetCheckIntervalNormal(host) -->
    <operation name="hostGetCheckIntervalNormal">
      <documentation>Get the normal check interval.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- hostGetCheckIntervalRetry(host) -->
    <operation name="hostGetCheckIntervalRetry">
      <documentation>Get the retry check interval.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- hostGetCheckLast(host) -->
    <operation name="hostGetCheckLast">
      <documentation>Get the date when the last check was executed.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- hostGetCheckMaxAttempts(host) -->
    <operation name="hostGetCheckMaxAttempts">
      <documentation>Get the max check attempts of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- hostGetCheckNext(host) -->
    <operation name="hostGetCheckNext">
      <documentation>Get the time at which the next host check is scheduled to run.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- hostGetCheckOptions(host) -->
    <operation name="hostGetCheckOptions">
      <documentation>Get the host check options.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- hostGetCheckPassiveEnabled(host) -->
    <operation name="hostGetCheckPassiveEnabled">
      <documentation>Check if passive checks are enabled on this host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetCheckPeriod(host) -->
    <operation name="hostGetCheckPeriod">
      <documentation>Get the host check period.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- hostGetCheckShouldBeScheduled(host) -->
    <operation name="hostGetCheckShouldBeScheduled">
      <documentation>Check if the host should be scheduled.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetCheckType(host) -->
    <operation name="hostGetCheckType">
      <documentation>Get the type of the host check.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- hostSetCheckActiveEnabled(host, enable) -->
    <operation name="hostSetCheckActiveEnabled">
      <documentation>Enable or disable active checks on the host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetCheckCommand(host, command) -->
    <operation name="hostSetCheckCommand">
      <documentation>Set the host check command.</documentation>
      <input message="tns:hostStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetCheckIntervalNormal(host, interval) -->
    <operation name="hostSetCheckIntervalNormal">
      <documentation>Set the normal check interval of the host.</documentation>
      <input message="tns:hostUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetCheckIntervalRetry(host, interval) -->
    <operation name="hostSetCheckIntervalRetry">
      <documentation>Set the retry check interval of the host.</documentation>
      <input message="tns:hostUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetCheckMaxAttempts(host, attempts) -->
    <operation name="hostSetCheckMaxAttempts">
      <documentation>Set the max check attempts of the host.</documentation>
      <input message="tns:hostUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetCheckPassiveEnabled(host, enable) -->
    <operation name="hostSetCheckPassiveEnabled">
      <documentation>Enable or disable host passive checks.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetCheckPeriod(host, period) -->
    <operation name="hostSetCheckPeriod">
      <documentation>Set the host check period.</documentation>
      <input message="tns:hostStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Circular path.
     -->

    <!-- hostGetCircularPathChecked(host) -->
    <operation name="hostGetCircularPathChecked">
      <documentation>Check if the host has been checked for circular path.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetCircularPathHas(host) -->
    <operation name="hostGetCircularPathHas">
      <documentation>Check if the host has circular path.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!--
     --  Custom Variable.
     -->

    <!-- hostGetCustomVariable(host) -->
    <operation name="hostGetCustomVariable">
      <documentation>Get the value of a host custom variable.</documentation>
      <input message="tns:hostStringRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- hostGetCustomVariables(host) -->
    <!-- XXX -->

    <!-- hostSetCustomVariable(host, variable, value) -->
    <!-- XXX -->

    <!--
     --  Downtime.
     -->

    <!-- hostGetDowntimeDepth(host) -->
    <operation name="hostGetDowntimeDepth">
      <documentation>Get the host downtime depth.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- hostGetDowntimeFlexPending(host) -->
    <operation name="hostGetDowntimeFlexPending">
      <documentation>Check if host has a pending flexible downtime.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!--
     --  Event Handler.
     -->

    <!-- hostGetEventHandler(host) -->
    <operation name="hostGetEventHandler">
      <documentation>Get the host event handler.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- hostGetEventHandlerEnabled(host) -->
    <operation name="hostGetEventHandlerEnabled">
      <documentation>Check if the host event handler is enabled.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostSetEventHandler(host, eventhandler) -->
    <operation name="hostSetEventHandler">
      <documentation>Set the host event handler.</documentation>
      <input message="tns:hostStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetEventHandlerEnabled(host, enable) -->
    <operation name="hostSetEventHandlerEnabled">
      <documentation>Enable or disable host event handler.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Failure Prediction.
     -->

    <!-- hostGetFailurePredictionEnabled(host) -->
    <operation name="hostGetFailurePredictionEnabled">
      <documentation>Check if failure prediction is enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetFailurePredictionOptions(host) -->
    <operation name="hostGetFailurePredictionOptions">
      <documentation>Get host failure prediction options.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- hostSetFailurePredictionEnabled(host, enable) -->
    <operation name="hostSetFailurePredictionEnabled">
      <documentation>Enable or disable failure prediction on host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Flap Detection.
     -->

    <!-- hostGetFlapDetectionCommentID(host) -->
    <operation name="hostGetFlapDetectionCommentID">
      <documentation>Get the flap detection comment ID of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- hostGetFlapDetectionEnabled(host) -->
    <operation name="hostGetFlapDetectionEnabled">
      <documentation>Check whether flap detection is enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetFlapDetectionIsFlapping(host) -->
    <operation name="hostGetFlapDetectionIsFlapping">
      <documentation>Check if host is flapping.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetFlapDetectionOnDown(host) -->
    <operation name="hostGetFlapDetectionOnDown">
      <documentation>Check if flap detection is enabled on down state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetFlapDetectionOnUnreachable(host) -->
    <operation name="hostGetFlapDetectionOnUnreachable">
      <documentation>Check if flap detection is enabled on unreachable state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetFlapDetectionOnUp(host) -->
    <operation name="hostGetFlapDetectionOnUp">
      <documentation>Check if flap detection is enabled on up state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetFlapDetectionStateHistory(host) -->
    <!-- XXX -->

    <!-- hostGetFlapDetectionStateHistoryLastUpdate(host) -->
    <operation name="hostGetFlapDetectionStateHistoryLastUpdate">
      <documentation>Get the last time the flap detection state history was updated.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- hostGetFlapDetectionThresholdHigh(host) -->
    <operation name="hostGetFlapDetectionThresholdHigh">
      <documentation>Get the host high flap threshold.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:doubleResponse"/>
    </operation>

    <!-- hostGetFlapDetectionThresholdLow(host) -->
    <operation name="hostGetFlapDetectionThresholdLow">
      <documentation>Get the host low flap threshold.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:doubleResponse"/>
    </operation>

    <!-- hostSetFlapDetectionEnabled(host, enable) -->
    <operation name="hostSetFlapDetectionEnabled">
      <documentation>Enable or disable flap detection on host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetFlapDetectionOnDown(host, enable) -->
    <operation name="hostSetFlapDetectionOnDown">
      <documentation>Enable or disable flap detection on down state.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetFlapDetectionOnUnreachable(host, enable) -->
    <operation name="hostSetFlapDetectionOnUnreachable">
      <documentation>Enable or disable flap detection on unreachable state.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetFlapDetectionOnUp(host, enable) -->
    <operation name="hostSetFlapDetectionOnUp">
      <documentation>Enable or disable flap detection on up state.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetFlapDetectionThresholdHigh(host, threshold) -->
    <operation name="hostSetFlapDetectionThresholdHigh">
      <documentation>Set the high flap threshold of the host.</documentation>
      <input message="tns:hostDoubleRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetFlapDetectionThresholdLow(host, threshold) -->
    <operation name="hostSetFlapDetectionThresholdLow">
      <documentation>Set the low flap threshold of the host.</documentation>
      <input message="tns:hostDoubleRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Freshness.
     -->

    <!-- hostGetFreshnessCheckEnabled(host) -->
    <operation name="hostGetFreshnessCheckEnabled">
      <documentation>Check if freshness checks are enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetFreshnessIsActive(host) -->
    <operation name="hostGetFreshnessIsActive">
      <documentation>Check if freshness check is active on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetFreshnessThreshold(host) -->
    <operation name="hostGetFreshnessThreshold">
      <documentation>Get the freshness threshold of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:integerResponse"/>
    </operation>

    <!-- hostSetFreshnessCheckEnabled(host, enable) -->
    <operation name="hostSetFreshnessCheckEnabled">
      <documentation>Enable or disable freshness checks on host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetFreshnessThreshold(host, threshold) -->
    <operation name="hostSetFreshnessThreshold">
      <documentation>Set the host freshness threshold.</documentation>
      <input message="tns:hostIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Modified Attributes.
     -->

    <!-- hostGetModifiedAttributes(host) -->
    <operation name="hostGetModifiedAttributes">
      <documentation>Get the modified attributes on the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!--
     --  Name.
     -->

    <!-- hostGetNameAlias(host) -->
    <operation name="hostGetNameAlias">
      <documentation>Get the host alias.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- hostGetNameDisplay(host) -->
    <operation name="hostGetNameDisplay">
      <documentation>Get the host display name.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- hostSetNameAlias(host, alias) -->
    <operation name="hostSetNameAlias">
      <documentation>Set the host alias.</documentation>
      <input message="tns:hostStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetNameDisplay(host, displayname) -->
    <operation name="hostSetNameDisplay">
      <documentation>Set the display name of the host.</documentation>
      <input message="tns:hostStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Notification.
     -->

    <!-- hostGetNotificationsCurrentID(host) -->
    <operation name="hostGetNotificationsCurrentID">
      <documentation>Get the ID of the current host notification.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- hostGetNotificationsCurrentNumber(host) -->
    <operation name="hostGetNotificationsCurrentNumber">
      <documentation>Get the current notification number of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- hostGetNotificationsEnabled(host) -->
    <operation name="hostGetNotificationsEnabled">
      <documentation>Check if notifications are enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetNotificationsFirstDelay(host) -->
    <operation name="hostGetNotificationsFirstDelay">
      <documentation>Get the first notification delay of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- hostGetNotificationsInterval(host) -->
    <operation name="hostGetNotificationsInterval">
      <documentation>Get the notification interval of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- hostGetNotificationsLast(host) -->
    <operation name="hostGetNotificationsLast">
      <documentation>Get the time at which the last notification was sent.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- hostGetNotificationsNext(host) -->
    <operation name="hostGetNotificationsNext">
      <documentation>Get the time at which the next notification will be sent.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- hostGetNotificationsNoMore(host) -->
    <!-- XXX -->

    <!-- hostGetNotificationsOnDown(host) -->
    <operation name="hostGetNotificationsOnDown">
      <documentation>Check if notifications are sent if host is down.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetNotificationsOnDowntime(host) -->
    <operation name="hostGetNotificationsOnDowntime">
      <documentation>Check if notifications are sent if host is on downtime.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetNotificationsOnFlapping(host) -->
    <operation name="hostGetNotificationsOnFlapping">
      <documentation>Check if notifications are sent if host is flappy.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetNotificationsOnRecovery(host) -->
    <operation name="hostGetNotificationsOnRecovery">
      <documentation>Check if notifications are sent if host recovers.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetNotificationsOnUnreachable(host) -->
    <operation name="hostGetNotificationsOnUnreachable">
      <documentation>Check if notifications are sent if host is unreachable.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetNotificationsPeriod(host) -->
    <operation name="hostGetNotificationsPeriod">
      <documentation>Get the notification period of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostSetNotificationsBeyondEnabled(host, enable) -->
    <operation name="hostSetNotificationsBeyondEnabled">
      <documentation>Enable or disable all notifications beyond a host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetNotificationsEnabled(host, enable) -->
    <operation name="hostSetNotificationsEnabled">
      <documentation>Enable or disable notifications on host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetNotificationsFirstDelay(host, delay) -->
    <operation name="hostSetNotificationsFirstDelay">
      <documentation>Set the time after which the first host notification will be sent.</documentation>
      <input message="tns:hostUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetNotificationsInterval(host, interval) -->
    <operation name="hostSetNotificationsInterval">
      <documentation>Set the notification interval of the host.</documentation>
      <input message="tns:hostUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetNotificationsOnDown(host, enable) -->
    <operation name="hostSetNotificationsOnDown">
      <documentation>Enable or disable notifications when host is down.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetNotificationsOnDowntime(host, enable) -->
    <operation name="hostSetNotificationsOnDowntime">
      <documentation>Enable or disable notifications when host is in downtime.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetNotificationsOnFlapping(host, enable) -->
    <operation name="hostSetNotificationsOnFlapping">
      <documentation>Enable or disable notifications when host is flappy.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetNotificationsOnRecovery(host, enable) -->
    <operation name="hostSetNotificationsOnRecovery">
      <documentation>Enable or disable notifications when host recovers.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetNotificationsOnSelfAndChildrenEnabled(host, enable) -->
    <operation name="hostSetNotificationsOnSelfAndChildrenEnabled">
      <documentation>Enable notifications of a host and its children.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetNotificationsOnUnreachable(host, enable) -->
    <operation name="hostSetNotificationsOnUnreachable">
      <documentation>Enable or disable notifications when host is unreachable.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetNotificationsPeriod(host, period) -->
    <operation name="hostSetNotificationsPeriod">
      <documentation>Set notification period of host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Obsession.
     -->

    <!-- hostGetObsessOver(host) -->
    <operation name="hostGetObsessOver">
      <documentation>Check whether or not host is being obsessed over.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostSetObsessOver(host, enable) -->
    <operation name="hostSetObsessOver">
      <documentation>Enable or disable host obsession.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Perfdata.
     -->

    <!-- hostGetPerfdataProcessingEnabled(host) -->
    <operation name="hostGetPerfdataProcessingEnabled">
      <documentation>Check if perfdata processing is enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostSetPerfdataProcessingEnabled(host, enable) -->
    <operation name="hostSetPerfdataProcessingEnabled">
      <documentation>Enable or disable perfdata processing.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Plugin.
     -->

    <!-- hostGetPluginExecutionTime(host) -->
    <operation name="hostGetPluginExecutionTime">
      <documentation>Get the last execution time of the plugin.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- hostGetPluginIsExecuting(host) -->
    <operation name="hostGetPluginIsExecuting">
      <documentation>Check if host check if currently executing.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetPluginLatency(host) -->
    <operation name="hostGetPluginLatency">
      <documentation>Get the host latency.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:doubleResponse"/>
    </operation>

    <!-- hostGetPluginOutput(host) -->
    <operation name="hostGetPluginOutput">
      <documentation>Get the plugin output.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- hostGetPluginPerfdata(host) -->
    <operation name="hostGetPluginPerfdata">
      <documentation>Get the plugin perfdata.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!--
     --  Retention.
     -->

    <!-- hostGetRetainStatusInformation(host) -->
    <operation name="hostGetRetainStatusInformation">
      <documentation>Check if host status information are retained.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetRetainNonStatusInformation(host) -->
    <operation name="hostGetRetainNonStatusInformation">
      <documentation>Check if host non status information are retained.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostSetRetainStatusInformation(host, enable) -->
    <operation name="hostSetRetainStatusInformation">
      <documentation>Enable or disable status information retention on host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetRetainNonStatusInformation(host, enable) -->
    <operation name="hostSetRetainNonStatusInformation">
      <documentation>Enable or disable non status information retention on host.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Services.
     -->

    <!-- hostGetServicesCount(host) -->
    <operation name="hostGetServicesCount">
      <documentation>Get the number of services on this host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- hostGetServicesTotalCheckInterval(host) -->
    <operation name="hostGetServicesTotalCheckInterval">
      <documentation>Get the total check interval on this host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!--
     --  Stalking.
     -->

    <!-- hostGetStalkOnDown(host) -->
    <operation name="hostGetStalkOnDown">
      <documentation>Check if stalking on down is enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetStalkOnUnreachable(host) -->
    <operation name="hostGetStalkOnUnreachable">
      <documentation>Check if stalking on unreachable is enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostGetStalkOnUp(host) -->
    <operation name="hostGetStalkOnUp">
      <documentation>Check if stalking on up is enabled on host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- hostSetStalkOnDown(host, enable) -->
    <operation name="hostSetStalkOnDown">
      <documentation>Enable or disable stalking on down.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetStalkOnUnreachable(host, enable) -->
    <operation name="hostSetStalkOnUnreachable">
      <documentation>Enable or disable stalking on unreachable.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- hostSetStalkOnUp(host, enable) -->
    <operation name="hostSetStalkOnUp">
      <documentation>Enable or disable stalking on up.</documentation>
      <input message="tns:hostBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  State.
     -->

    <!-- hostGetStateCurrent(host) -->
    <operation name="hostGetStateCurrent">
      <documentation>Get the current state of the state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- hostGetStateInitial(host) -->
    <operation name="hostGetStateInitial">
      <documentation>Get the initial state of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- hostGetStateLast(host) -->
    <operation name="hostGetStateLast">
      <documentation>Get the last host state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- hostGetStateLastChange(host) -->
    <operation name="hostGetStateLastChange">
      <documentation>Get the last time the state changed.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- hostGetStateLastDown(host) -->
    <operation name="hostGetStateLastDown">
      <documentation>Get the last time the host was in a down state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- hostGetStateLastHard(host) -->
    <operation name="hostGetStateLastHard">
      <documentation>Get the host last hard state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- hostGetStateLastHardChange(host) -->
    <operation name="hostGetStateLastHardChange">
      <documentation>Get the last time at which the hard state changed.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- hostGetStateLastUnreachable(host) -->
    <operation name="hostGetStateLastUnreachable">
      <documentation>Get the last time the host was in an unreachable state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- hostGetStateLastUp(host) -->
    <operation name="hostGetStateLastUp">
      <documentation>Get the last time the host was in an up state.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- hostGetStatePercentChange(host) -->
    <operation name="hostGetStatePercentChange">
      <documentation>Get the percent state change of the host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- hostGetStateType(host) -->
    <operation name="hostGetStateType">
      <documentation>Get state type (hard or soft).</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:dateResponse"/>
    </operation>


    <!--------------------------
     --                       --
     --  Service properties.  --
     --                       --
     --------------------------->

    <!--
     --  Acknowledgement.
     -->

    <!-- serviceGetAcknowledgementIsSet(service) -->
    <operation name="serviceGetAcknowledgementIsSet">
      <documentation>Get whether or not the service is acknowledged.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetAcknowledgementType(service) -->
    <operation name="serviceGetAcknowledgementType">
      <documentation>Get the current type of the acknowledgement on a service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!--
     --  Check.
     -->

    <!-- serviceGetCheckActiveEnabled(service) -->
    <operation name="serviceGetCheckActiveEnabled">
      <documentation>Check if active checks are enabled on the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetCheckCommand(service) -->
    <operation name="serviceGetCheckCommand">
      <documentation>Get the service check command.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- serviceGetCheckCurrentAttempt(service) -->
    <operation name="serviceGetCheckCurrentAttempt">
      <documentation>Get the current check attempt of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- serviceGetCheckIntervalNormal(service) -->
    <operation name="serviceGetCheckIntervalNormal">
      <documentation>Get the normal check interval.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- serviceGetCheckIntervalRetry(service) -->
    <operation name="serviceGetCheckIntervalRetry">
      <documentation>Get the retry check interval.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- serviceGetCheckLast(service) -->
    <operation name="serviceGetCheckLast">
      <documentation>Get the date when the last check was executed.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- serviceGetCheckMaxAttempts(service) -->
    <operation name="serviceGetCheckMaxAttempts">
      <documentation>Get the max check attempts of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- serviceGetCheckNext(service) -->
    <operation name="serviceGetCheckNext">
      <documentation>Get the time at which the next service check is scheduled to run.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- serviceGetCheckOptions(service) -->
    <operation name="serviceGetCheckOptions">
      <documentation>Get the service check options.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- serviceGetCheckPassiveEnabled(service) -->
    <operation name="serviceGetCheckPassiveEnabled">
      <documentation>Check if passive checks are enabled on this service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetCheckPeriod(service) -->
    <operation name="serviceGetCheckPeriod">
      <documentation>Get the service check period.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- serviceGetCheckShouldBeScheduled(service) -->
    <operation name="serviceGetCheckShouldBeScheduled">
      <documentation>Check if the service should be scheduled.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetCheckType(service) -->
    <operation name="serviceGetCheckType">
      <documentation>Get the type of the service check.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- serviceSetCheckActiveEnabled(service, enable) -->
    <operation name="serviceSetCheckActiveEnabled">
      <documentation>Enable or disable active checks on the service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetCheckCommand(service, command) -->
    <operation name="serviceSetCheckCommand">
      <documentation>Set the service check command.</documentation>
      <input message="tns:serviceStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetCheckIntervalNormal(service, interval) -->
    <operation name="serviceSetCheckIntervalNormal">
      <documentation>Set the normal check interval of the service.</documentation>
      <input message="tns:serviceUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetCheckIntervalRetry(service, interval) -->
    <operation name="serviceSetCheckIntervalRetry">
      <documentation>Set the retry check interval of the service.</documentation>
      <input message="tns:serviceUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetCheckMaxAttempts(service, attempts) -->
    <operation name="serviceSetCheckMaxAttempts">
      <documentation>Set the max check attempts of the service.</documentation>
      <input message="tns:serviceUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetCheckPassiveEnabled(service, enable) -->
    <operation name="serviceSetCheckPassiveEnabled">
      <documentation>Enable or disable host passive checks.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetCheckPeriod(service, period) -->
    <operation name="serviceSetCheckPeriod">
      <documentation>Set the service check period.</documentation>
      <input message="tns:serviceStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Custom Variable.
     -->

    <!-- serviceGetCustomVariable(service) -->
    <operation name="serviceGetCustomVariable">
      <documentation>Get the value of a service custom variable.</documentation>
      <input message="tns:serviceStringRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- serviceGetCustomVariables(service) -->
    <!-- XXX -->

    <!-- serviceSetCustomVariable(service, variable, value) -->
    <!-- XXX -->

    <!--
     --  Downtime.
     -->

    <!-- serviceGetDowntimeDepth(service) -->
    <operation name="serviceGetDowntimeDepth">
      <documentation>Get the service downtime depth.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- serviceGetDowntimeFlexPending(service) -->
    <operation name="serviceGetDowntimeFlexPending">
      <documentation>Check if service has a pending flexible downtime.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!--
     --  Event Handler.
     -->

    <!-- serviceGetEventHandler(service) -->
    <operation name="serviceGetEventHandler">
      <documentation>Get the service event handler.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- serviceGetEventHandlerEnabled(service) -->
    <operation name="serviceGetEventHandlerEnabled">
      <documentation>Check if the service event handler is enabled.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceSetEventHandler(service, eventhandler) -->
    <operation name="serviceSetEventHandler">
      <documentation>Set the service event handler.</documentation>
      <input message="tns:serviceStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetEventHandlerEnabled(service, enable) -->
    <operation name="serviceSetEventHandlerEnabled">
      <documentation>Enable or disable service event handler.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Failure Prediction.
     -->

    <!-- serviceGetFailurePredictionEnabled(service) -->
    <operation name="serviceGetFailurePredictionEnabled">
      <documentation>Check if failure prediction is enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetFailurePredictionOptions(service) -->
    <operation name="serviceGetFailurePredictionOptions">
      <documentation>Get service failure prediction options.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- serviceSetFailurePredictionEnabled(service, enable) -->
    <operation name="serviceSetFailurePredictionEnabled">
      <documentation>Enable or disable failure prediction on service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Flap Detection.
     -->

    <!-- serviceGetFlapDetectionCommentID(host) -->
    <operation name="serviceGetFlapDetectionCommentID">
      <documentation>Get the flap detection comment ID of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- serviceGetFlapDetectionEnabled(service) -->
    <operation name="serviceGetFlapDetectionEnabled">
      <documentation>Check whether flap detection is enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetFlapDetectionIsFlapping(service) -->
    <operation name="serviceGetFlapDetectionIsFlapping">
      <documentation>Check if service is flapping.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetFlapDetectionOnCritical(service) -->
    <operation name="serviceGetFlapDetectionOnCritical">
      <documentation>Check if flap detection is enabled on critical state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetFlapDetectionOnOk(service) -->
    <operation name="serviceGetFlapDetectionOnOk">
      <documentation>Check if flap detection is enabled on ok state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetFlapDetectionOnUnknown(service) -->
    <operation name="serviceGetFlapDetectionOnUnknown">
      <documentation>Check if flap detection is enabled on unknown state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetFlapDetectionOnWarning(service) -->
    <operation name="serviceGetFlapDetectionOnWarning">
      <documentation>Check if flap detection is enabled on warning state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetFlapDetectionStateHistory(service) -->
    <!-- XXX -->

    <!-- serviceGetFlapDetectionThresholdHigh(service) -->
    <operation name="serviceGetFlapDetectionThresholdHigh">
      <documentation>Get the service high flap threshold.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:doubleResponse"/>
    </operation>

    <!-- serviceGetFlapDetectionThresholdLow(service) -->
    <operation name="serviceGetFlapDetectionThresholdLow">
      <documentation>Get the service low flap threshold.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:doubleResponse"/>
    </operation>

    <!-- serviceSetFlapDetectionEnabled(service, enable) -->
    <operation name="serviceSetFlapDetectionEnabled">
      <documentation>Enable or disable flap detection on service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetFlapDetectionOnCritical(service, enable) -->
    <operation name="serviceSetFlapDetectionOnCritical">
      <documentation>Enable or disable flap detection on critical state.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetFlapDetectionOnOk(service, enable) -->
    <operation name="serviceSetFlapDetectionOnOk">
      <documentation>Enable or disable flap detection on ok state.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetFlapDetectionOnUnknown(service, enable) -->
    <operation name="serviceSetFlapDetectionOnUnknown">
      <documentation>Enable or disable flap detection on unknown state.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetFlapDetectionOnWarning(service, enable) -->
    <operation name="serviceSetFlapDetectionOnWarning">
      <documentation>Enable or disable flap detection on warning state.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetFlapDetectionThresholdHigh(service, threshold) -->
    <operation name="serviceSetFlapDetectionThresholdHigh">
      <documentation>Set the high flap threshold of the service.</documentation>
      <input message="tns:serviceDoubleRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetFlapDetectionThresholdLow(service, threshold) -->
    <operation name="serviceSetFlapDetectionThresholdLow">
      <documentation>Set the low flap threshold of the service.</documentation>
      <input message="tns:serviceDoubleRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Freshness.
     -->

    <!-- serviceGetFreshnessCheckEnabled(service) -->
    <operation name="serviceGetFreshnessCheckEnabled">
      <documentation>Check if freshness checks are enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetFreshnessIsActive(service) -->
    <operation name="serviceGetFreshnessIsActive">
      <documentation>Check if freshness check is active on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetFreshnessThreshold(service) -->
    <operation name="serviceGetFreshnessThreshold">
      <documentation>Get the freshness threshold of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:integerResponse"/>
    </operation>

    <!-- serviceSetFreshnessCheckEnabled(service, enable) -->
    <operation name="serviceSetFreshnessCheckEnabled">
      <documentation>Enable or disable freshness checks on service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetFreshnessThreshold(service, threshold) -->
    <operation name="serviceSetFreshnessThreshold">
      <documentation>Set the service freshness threshold.</documentation>
      <input message="tns:serviceIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Modified Attributes.
     -->

    <!-- serviceGetModifiedAttributes(service) -->
    <operation name="serviceGetModifiedAttributes">
      <documentation>Get the modified attributes on the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!--
     --  Name.
     -->

    <!-- serviceGetNameDisplay(service) -->
    <operation name="serviceGetNameDisplay">
      <documentation>Get the service display name.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- serviceSetNameDisplay(service, displayname) -->
    <operation name="serviceSetNameDisplay">
      <documentation>Set the display name of the service.</documentation>
      <input message="tns:serviceStringRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Notifications.
     -->

    <!-- serviceGetNotificationsCurrentID(service) -->
    <operation name="serviceGetNotificationsCurrentID">
      <documentation>Get the ID of the current service notification.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- serviceGetNotificationsCurrentNumber(service) -->
    <operation name="serviceGetNotificationsCurrentNumber">
      <documentation>Get the current notification number of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- serviceGetNotificationsEnabled(service) -->
    <operation name="serviceGetNotificationsEnabled">
      <documentation>Check if notifications are enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetNotificationsFirstDelay(service) -->
    <operation name="serviceGetNotificationsFirstDelay">
      <documentation>Get the first notification delay of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- serviceGetNotificationsInterval(service) -->
    <operation name="serviceGetNotificationsInterval">
      <documentation>Get the notification interval of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- serviceGetNotificationsLast(service) -->
    <operation name="serviceGetNotificationsLast">
      <documentation>Get the time at which the last notification was sent.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- serviceGetNotificationsNext(service) -->
    <operation name="serviceGetNotificationsNext">
      <documentation>Get the time at which the next notification will be sent.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- serviceGetNotificationsNoMore(service) -->
    <!-- XXX -->

    <!-- serviceGetNotificationsOnCritical(service) -->
    <operation name="serviceGetNotificationsOnCritical">
      <documentation>Check if notifications are sent if service is critical.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetNotificationsOnDowntime(service) -->
    <operation name="serviceGetNotificationsOnDowntime">
      <documentation>Check if notifications are sent if service is on downtime.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetNotificationsOnFlapping(service) -->
    <operation name="serviceGetNotificationsOnFlapping">
      <documentation>Check if notifications are sent if service is flappy.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetNotificationsOnRecovery(service) -->
    <operation name="serviceGetNotificationsOnRecovery">
      <documentation>Check if notifications are sent if service recovers.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetNotificationsOnUnknown(service) -->
    <operation name="serviceGetNotificationsOnUnknown">
      <documentation>Check if notifications are sent if service is unknown.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetNotificationsOnWarning(service) -->
    <operation name="serviceGetNotificationsOnWarning">
      <documentation>Check if notifications are sent if service is warning.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetNotificationsPeriod(service) -->
    <operation name="serviceGetNotificationsPeriod">
      <documentation>Get the notification period of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceSetNotificationsEnabled(service, enable) -->
    <operation name="serviceSetNotificationsEnabled">
      <documentation>Enable or disable notifications on service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetNotificationsFirstDelay(service, delay) -->
    <operation name="serviceSetNotificationsFirstDelay">
      <documentation>Set the time after which the first service notification will be sent.</documentation>
      <input message="tns:serviceUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetNotificationsInterval(service, interval) -->
    <operation name="serviceSetNotificationsInterval">
      <documentation>Set the notification interval of the service.</documentation>
      <input message="tns:serviceUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetNotificationsOnCritical(service, enable) -->
    <operation name="serviceSetNotificationsOnCritical">
      <documentation>Enable or disable notifications when service is critical.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetNotificationsOnDowntime(service, enable) -->
    <operation name="serviceSetNotificationsOnDowntime">
      <documentation>Enable or disable notifications when service is in downtime.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetNotificationsOnFlapping(service, enable) -->
    <operation name="serviceSetNotificationsOnFlapping">
      <documentation>Enable or disable notifications when service is flappy.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetNotificationsOnRecovery(service, enable) -->
    <operation name="serviceSetNotificationsOnRecovery">
      <documentation>Enable or disable notifications when service recovers.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetNotificationsOnUnknown(service, enable) -->
    <operation name="serviceSetNotificationsOnUnknown">
      <documentation>Enable or disable notifications when service is unknown.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetNotificationsOnWarning(service, enable) -->
    <operation name="serviceSetNotificationsOnWarning">
      <documentation>Enable or disable notifications when service is warning.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetNotificationsPeriod(service, period) -->
    <operation name="serviceSetNotificationsPeriod">
      <documentation>Set notification period of service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Obsession.
     -->

    <!-- serviceGetObsessOver(service) -->
    <operation name="serviceGetObsessOver">
      <documentation>Check whether or not service is being obsessed over.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceSetObsessOver(service, enable) -->
    <operation name="serviceSetObsessOver">
      <documentation>Enable or disable service obsession.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Perfdata.
     -->

    <!-- serviceGetPerfdataProcessingEnabled(service) -->
    <operation name="serviceGetPerfdataProcessingEnabled">
      <documentation>Check if perfdata processing is enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceSetPerfdataProcessingEnabled(service, enable) -->
    <operation name="serviceSetPerfdataProcessingEnabled">
      <documentation>Enable or disable perfdata processing.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Plugin.
     -->

    <!-- serviceGetPluginExecutionTime(service) -->
    <operation name="serviceGetPluginExecutionTime">
      <documentation>Get the last execution time of the plugin.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedIntResponse"/>
    </operation>

    <!-- serviceGetPluginIsExecuting(service) -->
    <operation name="serviceGetPluginIsExecuting">
      <documentation>Check if service check if currently executing.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetPluginLatency(service) -->
    <operation name="serviceGetPluginLatency">
      <documentation>Get the service latency.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:doubleResponse"/>
    </operation>

    <!-- serviceGetPluginOutput(service) -->
    <operation name="serviceGetPluginOutput">
      <documentation>Get the plugin output.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- serviceGetPluginPerfdata(service) -->
    <operation name="serviceGetPluginPerfdata">
      <documentation>Get the plugin perfdata.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!--
     --  Retention.
     -->

    <!-- serviceGetRetainStatusInformation(service) -->
    <operation name="serviceGetRetainStatusInformation">
      <documentation>Check if service status information are retained.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetRetainNonStatusInformation(service) -->
    <operation name="serviceGetRetainNonStatusInformation">
      <documentation>Check if service non status information are retained.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceSetRetainStatusInformation(service, enable) -->
    <operation name="serviceSetRetainStatusInformation">
      <documentation>Enable or disable status information retention on service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetRetainNonStatusInformation(service, enable) -->
    <operation name="serviceSetRetainNonStatusInformation">
      <documentation>Enable or disable non status information retention on service.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Stalking.
     -->

    <!-- serviceGetStalkOnCritical(service) -->
    <operation name="serviceGetStalkOnCritical">
      <documentation>Check if stalking on critical is enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetStalkOnOk(service) -->
    <operation name="serviceGetStalkOnOk">
      <documentation>Check if stalking on ok is enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetStalkOnUnknown(service) -->
    <operation name="serviceGetStalkOnUnknown">
      <documentation>Check if stalking on unknown is enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceGetStalkOnWarning(service) -->
    <operation name="serviceGetStalkOnWarning">
      <documentation>Check if stalking on warning is enabled on service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- serviceSetStalkOnCritical(service, enable) -->
    <operation name="serviceSetStalkOnCritical">
      <documentation>Enable or disable stalking on critical.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetStalkOnOk(service, enable) -->
    <operation name="serviceSetStalkOnOk">
      <documentation>Enable or disable stalking on ok.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetStalkOnUnknown(service, enable) -->
    <operation name="serviceSetStalkOnUnknown">
      <documentation>Enable or disable stalking on unknown.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- serviceSetStalkOnWarning(service, enable) -->
    <operation name="serviceSetStalkOnWarning">
      <documentation>Enable or disable stalking on warning.</documentation>
      <input message="tns:serviceBooleanRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  State.
     -->

    <!-- serviceGetStateCurrent(service) -->
    <operation name="serviceGetStateCurrent">
      <documentation>Get the current state of the state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- serviceGetStateInitial(service) -->
    <operation name="serviceGetStateInitial">
      <documentation>Get the initial state of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- serviceGetStateLast(service) -->
    <operation name="serviceGetStateLast">
      <documentation>Get the last service state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:unsignedShortResponse"/>
    </operation>

    <!-- serviceGetStateLastChange(service) -->
    <operation name="serviceGetStateLastChange">
      <documentation>Get the last time the state changed.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- serviceGetStateLastCritical(service) -->
    <operation name="serviceGetStateLastCritical">
      <documentation>Get the last time the service was in a critical state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- serviceGetStateLastHard(service) -->
    <operation name="serviceGetStateLastHard">
      <documentation>Get the service last hard state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- serviceGetStateLastHardChange(service) -->
    <operation name="serviceGetStateLastHardChange">
      <documentation>Get the last time at which the hard state changed.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- serviceGetStateLastOk(service) -->
    <operation name="serviceGetStateLastOk">
      <documentation>Get the last time the service was in an ok state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- serviceGetStateLastUnknown(service) -->
    <operation name="serviceGetStateLastUnknown">
      <documentation>Get the last time the service was in an unknown state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- serviceGetStateLastWarning(service) -->
    <operation name="serviceGetStateLastWarning">
      <documentation>Get the last time the service was in a warning state.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- serviceGetStatePercentChange(service) -->
    <operation name="serviceGetStatePercentChange">
      <documentation>Get the percent state change of the service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- serviceGetStateType(service) -->
    <operation name="serviceGetStateType">
      <documentation>Get state type (hard or soft).</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:dateResponse"/>
    </operation>


    <!------------------------
     --                     --
     --  Acknowledgements.  --
     --                     --
     ------------------------->

    <!--
     --  Host.
     -->

    <!-- acknowledgementOnHostAdd(host, acknowledgement) -->
    <operation name="acknowledgementOnHostAdd">
      <documentation>Acknowledge a problem on a host.</documentation>
      <input message="tns:acknowledgementOnHostAddRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- acknowledgementOnHostRemove(host) -->
    <operation name="acknowledgementOnHostRemove">
      <documentation>Remove an acknowledgement on a host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  Service.
     -->

    <!-- acknowledgementOnServiceAdd(service, acknowledgement) -->
    <operation name="acknowledgementOnServiceAdd">
      <documentation>Acknowledge a problem on a service.</documentation>
      <input message="tns:acknowledgementOnServiceAddRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- acknowledgementOnServiceRemove(service) -->
    <operation name="acknowledgementOnServiceRemove">
      <documentation>Remove an acknowledgement on a service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>


    <!--------------
     --           --
     --  Checks.  --
     --           --
     --------------->

    <!-- checkHostProcessResult(host, result) -->
    <operation name="checkHostProcessResult">
      <documentation>Process a host check result.</documentation>
      <input message="tns:checkHostRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- checkHostSchedule(host, when) -->
    <operation name="checkHostSchedule">
      <documentation>Schedule a host check.</documentation>
      <input message="tns:hostDateRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- checkHostScheduleForced(host, when) -->
    <operation name="checkHostScheduleForced">
      <documentation>Schedule a forced host check.</documentation>
      <input message="tns:hostDateRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- checkHostScheduleServices(host, when) -->
    <operation name="checkHostScheduleServices">
      <documentation>Schedule a check of all services associated with the host.</documentation>
      <input message="tns:hostDateRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- checkHostScheduleServicesForced(host, when) -->
    <operation name="checkHostScheduleServicesForced">
      <documentation>Schedule a forced check of all services associated with the host.</documentation>
      <input message="tns:hostDateRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- checkServiceProcessResult(service, result) -->
    <operation name="checkServiceProcessResult">
      <documentation>Process a service check result.</documentation>
      <input message="tns:checkServiceRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- checkServiceSchedule(service, when) -->
    <operation name="checkServiceSchedule">
      <documentation>Schedule a service check.</documentation>
      <input message="tns:serviceDateRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- checkServiceScheduleForced(service, when) -->
    <operation name="checkServiceScheduleForced">
      <documentation>Schedule a forced service check.</documentation>
      <input message="tns:serviceDateRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>


    <!-----------------
     --              --
     --  Downtimes.  --
     --              --
     ------------------>

    <!--
     --  Properties.
     -->

    <!-- downtimeGetAuthor(downtime) -->
    <operation name="downtimeGetAuthor">
      <documentation>Get the author of a downtime.</documentation>
      <input message="tns:downtimeRequest"/>
      <output message="tns:stringResponse"/>
    </operation>

    <!-- downtimeGetComment(downtime) -->
    <!-- XXX -->

    <!-- downtimeGetDuration(downtime) -->
    <operation name="downtimeGetDuration">
      <documentation>Get the duration of a downtime.</documentation>
      <input message="tns:downtimeRequest"/>
      <output message="tns:doubleResponse"/>
    </operation>

    <!-- downtimeGetEnd(downtime) -->
    <operation name="downtimeGetEnd">
      <documentation>Get the end time of a downtime.</documentation>
      <input message="tns:downtimeRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- downtimeGetFixed(downtime) -->
    <operation name="downtimeGetFixed">
      <documentation>Check if a downtime is fixed or not.</documentation>
      <input message="tns:downtimeRequest"/>
      <output message="tns:booleanResponse"/>
    </operation>

    <!-- downtimeGetStart(downtime) -->
    <operation name="downtimeGetStart">
      <documentation>Get the start time of a downtime.</documentation>
      <input message="tns:downtimeRequest"/>
      <output message="tns:dateResponse"/>
    </operation>

    <!-- downtimeGetTriggerID(downtime) -->
    <!-- XXX -->

    <!--
     --  Deletion.
     -->

    <!-- downtimeDelete(downtime) -->
    <operation name="downtimeDelete">
      <documentation>Delete a downtime.</documentation>
      <input message="tns:downtimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  By host.
     -->

    <!-- downtimeAddToHost(host, downtime) -->
    <operation name="downtimeAddToHost">
      <documentation>Schedule a downtime on a host.</documentation>
      <input message="tns:downtimeHostRequest"/>
      <output message="tns:downtimeResponse"/>
    </operation>

    <!-- downtimeAddAndPropagateToHost(host, downtime) -->
    <operation name="downtimeAddAndPropagateToHost">
      <documentation>Schedule downtime for a host and all of its children.</documentation>
      <input message="tns:downtimeHostRequest"/>
      <output message="tns:downtimeResponse"/>
    </operation>

    <!-- downtimeAddAndPropagateTriggeredToHost(host, downtime) -->
    <operation name="downtimeAddAndPropagateTriggeredToHost">
      <documentation>Schedule downtime for a host and all of its children.</documentation>
      <input message="tns:downtimeHostRequest"/>
      <output message="tns:downtimeResponse"/>
    </operation>

    <!-- downtimeAddToHostServices(host, downtime) -->
    <operation name="downtimeAddToHostServices">
      <documentation>Schedule a downtime on all services of a host.</documentation>
      <input message="tns:downtimeHostRequest"/>
      <output message="tns:downtimeResponse"/>
    </operation>

    <!--
     --  By service.
     -->

    <!-- downtimeAddToService(service, downtime) -->
    <operation name="downtimeAddToService">
      <documentation>Schedule a downtime on a service.</documentation>
      <input message="tns:downtimeServiceRequest"/>
      <output message="tns:downtimeResponse"/>
    </operation>

    <!---------------------
     --                  --
     --  Notifications.  --
     --                  --
     ---------------------->

    <!--
     --  By host.
     -->

    <!-- notificationHostDelay(host, until) -->
    <operation name="notificationHostDelay">
      <documentation>Delay a host notification.</documentation>
      <input message="tns:hostDateRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- notificationHostSend(host, notification) -->
    <operation name="notificationHostSend">
      <documentation>Send a notification on a host.</documentation>
      <input message="tns:notificationHostRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--
     --  By service.
     -->

    <!-- notificationServiceDelay(service, until) -->
    <operation name="notificationServiceDelay">
      <documentation>Delay a service notification.</documentation>
      <input message="tns:serviceDateRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- notificationServiceSend(service, notification) -->
    <operation name="notificationServiceSend">
      <documentation>Send a notification on a service.</documentation>
      <input message="tns:notificationServiceRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>



    <!-- Not validated commands. -->

    <!-- deleteComment(unsigned long commentid) -->
    <operation name="deleteComment">
      <documentation>Delete a comment.</documentation>
      <input message="tns:IDRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- deleteHostAllComments(string host) -->
    <operation name="deleteHostAllComments">
      <documentation>Delete all comments of a host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- deleteServiceAllComments(string host, string service) -->
    <operation name="deleteServiceAllComments">
      <documentation>Delete all comments of a service.</documentation>
      <input message="tns:serviceRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- flushPendingCommands() -->
    <operation name="flushPendingCommands">
      <documentation>Discard commands already sent but not yet processed.</documentation>
      <input message="tns:emptyRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- newHostComment(string host, string comment, string user, bool persistent) -->
    <operation name="newHostComment">
      <documentation>Add a comment on a host.</documentation>
      <input message="tns:newHostCommentRequest"/>
      <output message="tns:newCommentResponse"/>
    </operation>

    <!-- newServiceComment(string host, string service, string comment, string user, bool persistent) -->
    <operation name="newServiceComment">
      <documentation>Add a comment on a service.</documentation>
      <input message="tns:newServiceCommentRequest"/>
      <output message="tns:newCommentResponse"/>
    </operation>

    <!-- scheduleHostgroupHostDowntime(string hostgroup, downtimeType downtime) -->
    <operation name="scheduleHostgroupHostDowntime">
      <documentation>Schedule a downtime on all hosts of a host group.</documentation>
      <input message="tns:scheduleDowntimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleHostgroupServiceDowntime(string hostgroup, downtimeType downtime) -->
    <operation name="scheduleHostgroupServiceDowntime">
      <documentation>Schedule a downtime on all services of the hosts of the host group.</documentation>
      <input message="tns:scheduleDowntimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleServicegroupHostDowntime(string servicegroup, downtimeType downtime) -->
    <operation name="scheduleServicegroupHostDowntime">
      <documentation>Schedule a downtime on all hosts related to services members of the service group.</documentation>
      <input message="tns:scheduleDowntimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- scheduleServicegroupServiceDowntime(string servicegroup, downtimeType downtime) -->
    <operation name="scheduleServicegroupServiceDowntime">
      <documentation>Schedule a downtime on all services of the service group.</documentation>
      <input message="tns:scheduleDowntimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactCustomVar(string contact, string varname, string varvalue) -->
    <operation name="setContactCustomVar">
      <documentation>Set the value of a custom variable of a contact.</documentation>
      <input message="tns:setCustomVarRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactgroupHostNotificationsEnabled(string contactgroup) -->
    <operation name="setContactgroupHostNotificationsEnabled">
      <documentation>Enable hosts notifications for each member of the contact group.</documentation>
      <input message="tns:contactgroupRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactgroupServiceNotificationsEnabled(string contactgroup) -->
    <operation name="setContactgroupServiceNotificationsEnabled">
      <documentation>Enable services notifications for each member of the contact group.</documentation>
      <input message="tns:contactgroupRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactHostNotificationsEnabled(string contact) -->
    <operation name="setContactHostNotificationsEnabled">
      <documentation>Enable host notifications on a contact.</documentation>
      <input message="tns:contactRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactHostNotificationTimeperiod(string contact, string timeperiod) -->
    <operation name="setContactHostNotificationTimeperiod">
      <documentation>Change the host notification timeperiod of a contact.</documentation>
      <input message="tns:setContactNotificationTimeperiodRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactModattr(string contact, unsigned int modattr) -->
    <operation name="setContactModattr">
      <documentation>Change the contact modified attributes value.</documentation>
      <input message="tns:setContactModattrRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactModhattr(string contact, unsigned int modattr) -->
    <operation name="setContactModhattr">
      <documentation>Change the contact modified host attributes value.</documentation>
      <input message="tns:setContactModattrRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactModsattr(string contact, unsigned int modattr) -->
    <operation name="setContactModsattr">
      <documentation>Change the contact modified service attributes value.</documentation>
      <input message="tns:setContactModattrRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactServiceNotificationsEnabled(string contact) -->
    <operation name="setContactServiceNotificationsEnabled">
      <documentation>Enable service notifications on a contact.</documentation>
      <input message="tns:contactRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setContactServiceNotificationTimeperiod(string contact, string timeperiod) -->
    <operation name="setContactServiceNotificationTimeperiod">
      <documentation>Change the service notification timeperiod of a contact.</documentation>
      <input message="tns:setContactNotificationTimeperiodRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setEventHandlersEnabled(bool enable) -->
    <operation name="setEventHandlersEnabled">
      <documentation>Enable or disable event handlers globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setFailurePredictionEnabled(bool enable) -->
    <operation name="setFailurePredictionEnabled">
      <documentation>Enable or disable failure prediction globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setFlapDetectionEnabled(bool enable) -->
    <operation name="setFlapDetectionEnabled">
      <documentation>Enable or disable flap detection globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostActiveChecksEnabled(string host, bool enable) -->
    <operation name="setHostActiveChecksEnabled">
      <documentation>Enable or disable active checks on a host.</documentation>
      <input message="tns:setHostEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostCheckCommand(string host, string command) -->
    <operation name="setHostCheckCommand">
      <documentation>Change the host check command.</documentation>
      <input message="tns:setHostCheckCommandRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostCheckTimeperiod(string host, string timeperiod) -->
    <operation name="setHostCheckTimeperiod">
      <documentation>Change the check timeperiod of a host.</documentation>
      <input message="tns:setHostTimeperiodRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostCustomVar(string host, string varname, string varvalue) -->
    <operation name="setHostCustomVar">
      <documentation>Set the value of a custom variable of a host.</documentation>
      <input message="tns:setCustomVarRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostEventHandler(string host, string eventhandler) -->
    <operation name="setHostEventHandler">
      <documentation>Change the event handler of a host.</documentation>
      <input message="tns:setHostEventHandlerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostEventHandlerEnabled(string host) -->
    <operation name="setHostEventHandlerEnabled">
      <documentation>Enable or disable event handler on a host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostFlapDetectionEnabled(string host) -->
    <operation name="setHostFlapDetectionEnabled">
      <documentation>Enable or disable flap detection on a host.</documentation>
      <input message="tns:hostRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostgroupHostActiveChecksEnabled(string hostgroup, bool enable) -->
    <operation name="setHostgroupHostActiveChecksEnabled">
      <documentation>Enable or disable active checks of all hosts of the host group.</documentation>
      <input message="tns:hostgroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostgroupHostNotificationsEnabled(string hostgroup, bool enable) -->
    <operation name="setHostgroupHostNotificationsEnabled">
      <documentation>Enable or disable notifications on all hosts of the host group.</documentation>
      <input message="tns:hostgroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostgroupHostPassiveChecksEnabled(string hostgroup, bool enable) -->
    <operation name="setHostgroupHostPassiveChecksEnabled">
      <documentation>Enable or disable passive checks of all hosts of the host group.</documentation>
      <input message="tns:hostgroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostgroupServiceActiveChecksEnabled(string hostgroup, bool enable) -->
    <operation name="setHostgroupServiceActiveChecksEnabled">
      <documentation>Enable or disable active checks of all services of hosts of the host group.</documentation>
      <input message="tns:hostgroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostgroupServiceNotificationsEnabled(string hostgroup, bool enable) -->
    <operation name="setHostgroupServiceNotificationsEnabled">
      <documentation>Enable or disable notifications of all services of hosts of the host group.</documentation>
      <input message="tns:hostgroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostgroupServicePassiveChecksEnabled(string hostgroup, bool enable) -->
    <operation name="setHostgroupServicePassiveChecksEnabled">
      <documentation>Enable or disable passive checks of all services of hosts of the host group.</documentation>
      <input message="tns:hostgroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostMaxCheckAttempts(string host, unsigned int maxattempts) -->
    <operation name="setHostMaxCheckAttempts">
      <documentation>Change the max check attempt value of a host.</documentation>
      <input message="tns:setHostUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostModattr(string host, unsigned int modattr) -->
    <operation name="setHostModattr">
      <documentation>Change the host modified attributes value.</documentation>
      <input message="tns:setHostModattrRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostNormalCheckInterval(string host, time_t interval) -->
    <operation name="setHostNormalCheckInterval">
      <documentation>Change the normal check interval of a host.</documentation>
      <input message="tns:hostTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostNotificationNumber(string host, unsigned int notificationnumber) -->
    <operation name="setHostNotificationNumber">
      <documentation>Set the notification number of a host.</documentation>
      <input message="tns:setHostUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostObsessOver(string host, bool enable) -->
    <operation name="setHostObsessOver">
      <documentation>Start or stop obsessing over a host.</documentation>
      <input message="tns:setHostEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostPassiveChecksEnabled(string host, bool enable) -->
    <operation name="setHostPassiveChecksEnabled">
      <documentation>Enable or disable passive checks on a host.</documentation>
      <input message="tns:setHostEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostRetryCheckInterval(string host, time_t interval) -->
    <operation name="setHostRetryCheckInterval">
      <documentation>Change the retry check interval of a host.</documentation>
      <input message="tns:hostTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostsActiveChecksEnabled(bool enable) -->
    <operation name="setHostsActiveChecksEnabled">
      <documentation>Enable or disable active host checks globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostServicesActiveChecksEnabled(string host, bool enable) -->
    <operation name="setHostServicesActiveChecksEnabled">
      <documentation>Enable all active checks of all services of a host.</documentation>
      <input message="tns:setHostEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostServicesNotificationsEnabled(string host, bool enable) -->
    <operation name="setHostServicesNotificationsEnabled">
      <documentation>Enable or disable notifications on all services of a host.</documentation>
      <input message="tns:setHostEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostsEventHandler(string command) -->
    <operation name="setHostsEventHandler">
      <documentation>Change the global host event handler.</documentation>
      <input message="tns:setEventHandlerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostsFreshnessChecksEnabled(bool enable) -->
    <operation name="setHostsFreshnessChecksEnabled">
      <documentation>Enable or disable host freshness checks globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setHostsPassiveChecksEnabled(bool enable) -->
    <operation name="setHostsPassiveChecksEnabled">
      <documentation>Enable or disable passive host checks globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setNotificationsEnabled(bool enable) -->
    <operation name="setNotificationsEnabled">
      <documentation>Enable or disable notifications globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setObsessOverHostsEnabled(bool enable) -->
    <operation name="setObsessOverHostsEnabled">
      <documentation>Enable or disable obsession over host checks.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setObsessOverServicesEnabled(bool enable) -->
    <operation name="setObsessOverServicesEnabled">
      <documentation>Enable or disable obsession over service checks.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setPerformanceDataEnabled(bool enable) -->
    <operation name="setPerformanceDataEnabled">
      <documentation>Enable or disable performance data processing globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceActiveChecksEnabled(string host, string service, bool enable) -->
    <operation name="setServiceActiveChecksEnabled">
      <documentation>Enable or disable active checks of a service.</documentation>
      <input message="tns:setServiceEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceCheckCommand(string host, string service, string command) -->
    <operation name="setServiceCheckCommand">
      <documentation>Change the service check command.</documentation>
      <input message="tns:setServiceCheckCommandRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceCheckTimeperiod(string host, string service, string timeperiod) -->
    <operation name="setServiceCheckTimeperiod">
      <documentation>Change the check timeperiod of a service.</documentation>
      <input message="tns:setServiceTimeperiodRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceCustomVar(string host, string service, string varname, string varvalue) -->
    <operation name="setServiceCustomVar">
      <documentation>Set the value of a custom variable of a service.</documentation>
      <input message="tns:setServiceCustomVarRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceEventHandler(string host, string service, string eventhandler) -->
    <operation name="setServiceEventHandler">
      <documentation>Change the event handler of a service.</documentation>
      <input message="tns:setServiceEventHandlerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceEventHandlerEnabled(string host, string service, bool enable) -->
    <operation name="setServiceEventHandlerEnabled">
      <documentation>Enable or disable the event handler of a service.</documentation>
      <input message="tns:setServiceEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!--setServiceFlapDetectionEnabled(string host, string service, bool enable) -->
    <operation name="setServiceFlapDetectionEnabled">
      <documentation>Enable or disable flap detection on a service.</documentation>
      <input message="tns:setServiceEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicegroupHostActiveChecksEnabled(string servicegroup, bool enable) -->
    <operation name="setServicegroupHostActiveChecksEnabled">
      <documentation>Enable or disable active checks of hosts of services of the service group.</documentation>
      <input message="tns:servicegroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicegroupHostNotificationsEnabled(string servicegroup, bool enable) -->
    <operation name="setServicegroupHostNotificationsEnabled">
      <documentation>Enable or disable notifications of hosts of services of the service group.</documentation>
      <input message="tns:servicegroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicegroupHostPassiveChecksEnabled(string servicegroup, bool enable) -->
    <operation name="setServicegroupHostPassiveChecksEnabled">
      <documentation>Enable or disable passive checks of hosts of services of the service group.</documentation>
      <input message="tns:servicegroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicegroupServiceActiveChecksEnabled(string servicegroup, bool enable) -->
    <operation name="setServicegroupServiceActiveChecksEnabled">
      <documentation>Enable or disable active checks of services of the service group.</documentation>
      <input message="tns:servicegroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicegroupServiceNotificationsEnabled(string servicegroup, bool enable) -->
    <operation name="setServicegroupServiceNotificationsEnabled">
      <documentation>Enable or disable notifications of services of the service group.</documentation>
      <input message="tns:servicegroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicegroupServicePassiveChecksEnabled(string servicegroup, bool enable) -->
    <operation name="setServicegroupServicePassiveChecksEnabled">
      <documentation>Enable or disable passive checks of services of the service group.</documentation>
      <input message="tns:servicegroupEnableRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceMaxCheckAttempts(string host, string service, unsigned int maxattempts) -->
    <operation name="setServiceMaxCheckAttempts">
      <documentation>Set the maximum attempts of a service check.</documentation>
      <input message="tns:setServiceUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceModattr(string host, string service, unsigned int modattr) -->
    <operation name="setServiceModattr">
      <documentation>Change the service modified attributes value.</documentation>
      <input message="tns:setServiceModattrRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNormalCheckInterval(string host, string service, time_t interval) -->
    <operation name="setServiceNormalCheckInterval">
      <documentation>Change the normal check interval of a service.</documentation>
      <input message="tns:serviceTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNotificationNumber(string host, string service, unsigned int notificationnumber) -->
    <operation name="setServiceNotificationNumber">
      <documentation>Set the notification number of a service.</documentation>
      <input message="tns:setServiceUnsignedIntegerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNotificationsEnabled(string host, string service, bool enable) -->
    <operation name="setServiceNotificationsEnabled">
      <documentation>Enable or disable notifications of a service.</documentation>
      <input message="tns:setServiceEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceNotificationTimeperiod(string host, string service, string timeperiod) -->
    <operation name="setServiceNotificationTimeperiod">
      <documentation>Change the service notification timeperiod.</documentation>
      <input message="tns:setServiceTimeperiodRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceObsessOver(string host, string service, bool enable) -->
    <operation name="setServiceObsessOver">
      <documentation>Start or stop obsessing over a service.</documentation>
      <input message="tns:setServiceEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicePassiveChecksEnabled(string host, string service, bool enable) -->
    <operation name="setServicePassiveChecksEnabled">
      <documentation>Enable or disable passive checks on a service.</documentation>
      <input message="tns:setServiceEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServiceRetryCheckInterval(string host, string service, time_t interval) -->
    <operation name="setServiceRetryCheckInterval">
      <documentation>Change the retry check interval of a service.</documentation>
      <input message="tns:serviceTimeRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicesEventHandler(string command) -->
    <operation name="setServicesEventHandler">
      <documentation>Change the global service event handler.</documentation>
      <input message="tns:setEventHandlerRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicesActiveChecksEnabled(bool enable) -->
    <operation name="setServicesActiveChecksEnabled">
      <documentation>Enable or disable active service checks globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicesFreshnessChecksEnabled(bool enable) -->
    <operation name="setServicesFreshnessChecksEnabled">
      <documentation>Enable or disable service freshness checks globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

    <!-- setServicesPassiveChecksEnabled(bool enable) -->
    <operation name="setServicesPassiveChecksEnabled">
      <documentation>Enable or disable passive service checks globally.</documentation>
      <input message="tns:setEnabledRequest"/>
      <output message="tns:defaultResponse"/>
    </operation>

  </portType>

  <binding name="centreonscheduler" type="tns:commandPortType">
    <SOAP:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>

    <!-------------------------
     --                      --
     --  Global operations.  --
     --                      --
     -------------------------->

    <operation name="processRestart">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="processShutdown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="stateInformationLoad">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="stateInformationSave">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>


    <!-----------------------
     --                    --
     --  Host properties.  --
     --                    --
     ------------------------>

    <operation name="hostGetAcknowledgementIsSet">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetAcknowledgementType">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetAddress">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetAddress">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetCheckActiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetCheckCommand">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetCheckCurrentAttempt">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetCheckIntervalNormal">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetCheckIntervalRetry">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetCheckLast">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetCheckMaxAttempts">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetCheckNext">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetCheckOptions">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetCheckPassiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetCheckPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetCheckShouldBeScheduled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetCheckType">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetCheckActiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetCheckCommand">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetCheckIntervalNormal">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetCheckIntervalRetry">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetCheckMaxAttempts">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetCheckPassiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetCheckPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetCircularPathChecked">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetCircularPathHas">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetDowntimeDepth">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetDowntimeFlexPending">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetEventHandlerEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetEventHandlerEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetFailurePredictionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetFailurePredictionOptions">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetFailurePredictionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetFlapDetectionCommentID">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetFlapDetectionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetFlapDetectionIsFlapping">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetFlapDetectionOnDown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetFlapDetectionOnUnreachable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetFlapDetectionOnUp">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetFlapDetectionStateHistoryLastUpdate">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetFlapDetectionThresholdHigh">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetFlapDetectionThresholdLow">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetFlapDetectionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetFlapDetectionOnDown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetFlapDetectionOnUnreachable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetFlapDetectionOnUp">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetFlapDetectionThresholdHigh">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetFlapDetectionThresholdLow">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetFreshnessCheckEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetFreshnessIsActive">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetFreshnessThreshold">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetFreshnessCheckEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetFreshnessThreshold">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetModifiedAttributes">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetNameAlias">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetNameDisplay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetNameAlias">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetNameDisplay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetNotificationsCurrentID">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetNotificationsCurrentNumber">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetNotificationsFirstDelay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetNotificationsInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetNotificationsLast">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetNotificationsNext">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetNotificationsOnDown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetNotificationsOnDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetNotificationsOnFlapping">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetNotificationsOnRecovery">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetNotificationsOnUnreachable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetNotificationsPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetNotificationsBeyondEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetNotificationsFirstDelay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetNotificationsInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetNotificationsOnDown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetNotificationsOnDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetNotificationsOnFlapping">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetNotificationsOnRecovery">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetNotificationsOnSelfAndChildrenEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetNotificationsOnUnreachable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetNotificationsPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetObsessOver">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetObsessOver">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetPerfdataProcessingEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetPerfdataProcessingEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetPluginExecutionTime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetPluginIsExecuting">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetPluginLatency">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetPluginOutput">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetPluginPerfdata">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetRetainStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetRetainNonStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetRetainStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetRetainNonStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetServicesCount">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetServicesTotalCheckInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetStalkOnDown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetStalkOnUnreachable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetStalkOnUp">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetStalkOnDown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetStalkOnUnreachable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostSetStalkOnUp">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetStateCurrent">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetStateInitial">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetStateLast">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetStateLastChange">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetStateLastDown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetStateLastHard">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetStateLastHardChange">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetStateLastUnreachable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetStateLastUp">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetStatePercentChange">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="hostGetStateType">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>


    <!--------------------------
     --                       --
     --  Service properties.  --
     --                       --
     --------------------------->

    <operation name="serviceGetAcknowledgementIsSet">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetAcknowledgementType">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetCheckActiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetCheckCommand">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetCheckCurrentAttempt">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetCheckIntervalNormal">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetCheckIntervalRetry">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetCheckLast">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetCheckMaxAttempts">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetCheckNext">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetCheckOptions">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetCheckPassiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetCheckPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetCheckShouldBeScheduled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetCheckType">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetCheckActiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetCheckCommand">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetCheckIntervalNormal">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetCheckIntervalRetry">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetCheckMaxAttempts">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetCheckPassiveEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetCheckPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetCustomVariable">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetDowntimeDepth">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetDowntimeFlexPending">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetEventHandlerEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetEventHandlerEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetFailurePredictionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetFailurePredictionOptions">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetFailurePredictionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetFlapDetectionCommentID">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetFlapDetectionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetFlapDetectionIsFlapping">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetFlapDetectionOnCritical">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetFlapDetectionOnOk">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetFlapDetectionOnUnknown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetFlapDetectionOnWarning">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetFlapDetectionThresholdHigh">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetFlapDetectionThresholdLow">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetFlapDetectionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetFlapDetectionOnCritical">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetFlapDetectionOnOk">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetFlapDetectionOnUnknown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetFlapDetectionOnWarning">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetFlapDetectionThresholdHigh">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetFlapDetectionThresholdLow">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetFreshnessCheckEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetFreshnessIsActive">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetFreshnessThreshold">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetFreshnessCheckEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetFreshnessThreshold">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetModifiedAttributes">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetNameDisplay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetNameDisplay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetNotificationsCurrentID">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetNotificationsCurrentNumber">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetNotificationsFirstDelay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetNotificationsInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetNotificationsLast">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetNotificationsNext">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetNotificationsOnCritical">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetNotificationsOnDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetNotificationsOnFlapping">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetNotificationsOnRecovery">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetNotificationsOnUnknown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetNotificationsOnWarning">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetNotificationsPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetNotificationsFirstDelay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetNotificationsInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetNotificationsOnCritical">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetNotificationsOnDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetNotificationsOnFlapping">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetNotificationsOnRecovery">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetNotificationsOnUnknown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetNotificationsOnWarning">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetNotificationsPeriod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetObsessOver">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetObsessOver">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetPerfdataProcessingEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetPerfdataProcessingEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetPluginExecutionTime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetPluginIsExecuting">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetPluginLatency">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetPluginOutput">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetPluginPerfdata">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetRetainStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetRetainNonStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetRetainStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetRetainNonStatusInformation">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStalkOnCritical">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStalkOnOk">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStalkOnUnknown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStalkOnWarning">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetStalkOnCritical">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetStalkOnOk">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetStalkOnUnknown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceSetStalkOnWarning">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStateCurrent">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStateInitial">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStateLast">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStateLastChange">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStateLastCritical">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStateLastHard">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStateLastHardChange">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStateLastOk">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStateLastUnknown">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStateLastWarning">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStatePercentChange">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="serviceGetStateType">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <!------------------------
     --                     --
     --  Acknowledgements.  --
     --                     --
     ------------------------->

    <operation name="acknowledgementOnHostAdd">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="acknowledgementOnHostRemove">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="acknowledgementOnServiceAdd">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="acknowledgementOnServiceRemove">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <!--------------
     --           --
     --  Checks.  --
     --           --
     --------------->

    <operation name="checkHostProcessResult">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="checkHostSchedule">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="checkHostScheduleForced">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="checkHostScheduleServices">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="checkHostScheduleServicesForced">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="checkServiceProcessResult">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="checkServiceSchedule">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="checkServiceScheduleForced">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>
    

    <!-----------------
     --              --
     --  Downtimes.  --
     --              --
     ------------------>

    <operation name="downtimeGetAuthor">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="downtimeGetDuration">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="downtimeGetEnd">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="downtimeGetFixed">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="downtimeGetStart">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="downtimeDelete">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="downtimeAddToHost">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="downtimeAddAndPropagateToHost">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="downtimeAddAndPropagateTriggeredToHost">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="downtimeAddToHostServices">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="downtimeAddToService">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <!---------------------
     --                  --
     --  Notifications.  --
     --                  --
     ---------------------->

    <operation name="notificationHostDelay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="notificationHostSend">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="notificationServiceDelay">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="notificationServiceSend">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    

    

    <!-- Not validated operations. -->

    <operation name="deleteComment">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="deleteHostAllComments">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="deleteServiceAllComments">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="flushPendingCommands">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="newHostComment">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="newServiceComment">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleHostgroupHostDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleHostgroupServiceDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleServicegroupHostDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="scheduleServicegroupServiceDowntime">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactCustomVar">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactgroupHostNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactgroupServiceNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactHostNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactHostNotificationTimeperiod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactModattr">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactModhattr">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactModsattr">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactServiceNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setContactServiceNotificationTimeperiod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setEventHandlersEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setFailurePredictionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setFlapDetectionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostCheckCommand">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostCheckTimeperiod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostCustomVar">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostEventHandlerEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostFlapDetectionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostgroupHostActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostgroupHostNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostgroupHostPassiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostgroupServiceActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostgroupServiceNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostgroupServicePassiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostMaxCheckAttempts">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostModattr">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNormalCheckInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostNotificationNumber">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostObsessOver">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostRetryCheckInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostsActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostServicesActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostServicesNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostsEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostsFreshnessChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setHostsPassiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setObsessOverHostsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setObsessOverServicesEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setPerformanceDataEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceCheckCommand">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceCheckTimeperiod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceCustomVar">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceEventHandlerEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceFlapDetectionEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicegroupHostActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicegroupHostNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicegroupHostPassiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicegroupServiceActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicegroupServiceNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicegroupServicePassiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceMaxCheckAttempts">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceModattr">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNormalCheckInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationNumber">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationsEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceNotificationTimeperiod">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceObsessOver">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicePassiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServiceRetryCheckInterval">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicesActiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicesEventHandler">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicesFreshnessChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

    <operation name="setServicesPassiveChecksEnabled">
      <SOAP:operation style="rpc" soapAction=""/>
      <input><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></input>
      <output><SOAP:body use="encoded" namespace="urn:centreonscheduler" encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/></output>
    </operation>

  </binding>

  <service name="centreonscheduler">
    <documentation>Centreon Scheduler service definition</documentation>
    <port name="centreonscheduler" binding="tns:centreonscheduler">
      <SOAP:address location="http://www.centreon.com/scheduler/commands/"/>
    </port>
  </service>

</definitions>
