/**
 *  @page hostchecks Host Checks
 *  @section hostchecksintroduction Introduction
 *
 *  The basic workings of host checks are described here...
 *
 *  @section hostcheckswhenarehostchecksperformed When Are Host Checks Performed?
 *
 *  Hosts are checked by the Centron Scheduler daemon:
 *  - At regular intervals, as defined by the check_interval and
 *  retry_interval options in your @ref objectdefinitionsobjecttypeshostdefinition
 *  "host definitions".
 *  - On-demand when a service associated with the host changes state.
 *  - On-demand as needed as part of the @ref determiningstatusandreachabilityofnetworkhosts
 *  "host reachability" logic.
 *  - On-demand as needed for @ref hostandservicedependencies "predictive
 *  host dependency checks".
 *
 *  Regularly scheduled host checks are optional. If you set the
 *  check_interval option in your host definition to zero (0), Centron
 *  Scheduler will not perform checks of the hosts on a regular basis.
 *  It will, however, still perform on-demand checks of the host as
 *  needed for other parts of the monitoring logic.
 *
 *  On-demand checks are made when a service associated with the host
 *  changes state because Centron Scheduler needs to know whether the
 *  host has also changed state. Services that change state are often
 *  an indicator that the host may have also changed state. For
 *  example, if Centron Scheduler detects that the HTTP service
 *  associated with a host just changed from a CRITICAL to an OK state,
 *  it may indicate that the host just recovered from a reboot and is
 *  now back up and running.
 *
 *  On-demand checks of hosts are also made as part of the @link
 *  determiningstatusandreachabilityofnetworkhosts host reachability @endlink logic. Centron
 *  Scheduler is designed to detect network outages as quickly as
 *  possible, and distinguish between DOWN and UNREACHABLE host states.
 *  These are very different states and can help an admin quickly
 *  locate the cause of a network outage.
 *
 *  On-demand checks are also performed as part of the @link
 *  hostandservicedependencies predictive host dependency check @endlink
 *  logic. These checks help ensure that the dependency logic is as
 *  accurate as possible.
 *
 *  @section hostcheckscachedhostchecks Cached Host Checks
 *
 *  The performance of on-demand host checks can be significantly
 *  improved by implementing the use of cached checks, which allow
 *  Centron Scheduler to forgo executing a host check if it determines
 *  a relatively recent check result will do instead. More information
 *  on cached checks can be found @link cachedchecks.html here
 *  @endlink.
 *
 *  @section hostchecksdependenciesandchecks Dependencies and Checks
 *
 *  You can define @ref objectdefinitionsobjecttypeshostdependencydefinition "host
 *  execution dependencies" that prevent Centron Scheduler from
 *  checking the status of a host depending on the state of one or more
 *  other hosts. More information on dependencies can be found @link
 *  hostandservicedependencies here @endlink.
 *
 *  @section hostchecksparallelizationofhostchecks Parallelization of
 *  Host Checks
 *
 *  Scheduled host checks are run in parallel. When Centron Scheduler
 *  needs to run a scheduled host check, it will initiate the host
 *  check and then return to doing other work (running service checks,
 *  etc). The host check runs in a child process that was fork()ed from
 *  the main Centron Scheduler daemon. When the host check has
 *  completed, the child process will inform the main Centron Scheduler
 *  process (its parent) of the check results. The main Centron
 *  Scheduler process then handles the check results and takes
 *  appropriate action (running event handlers, sending notifications,
 *  etc.).
 *
 *  On-demand host checks are also run in parallel if needed. As
 *  mentioned earlier, Centron Scheduler can forgo the actual execution
 *  of an on-demand host check if it can use the cached results from a
 *  relatively recent host check.
 *
 *  When Centron Scheduler processes the results of scheduled and
 *  on-demand host checks, it may initiate (secondary) checks of other
 *  hosts. These checks can be initated for two reasons: @link
 *  hostandservicedependencies predictive dependency checks @endlink and to
 *  determining the status of the host using the @link
 *  determiningstatusandreachabilityofnetworkhosts network reachability @endlink logic. The
 *  secondary checks that are initiated are usually run in parallel.
 *  However, there is one big exception that you should be aware of, as
 *  it can have negative effect on performance...
 *
 *  @note Hosts which have their max_check_attempts value set to 1 can
 *  cause serious performance problems. The reason? If Centron Scheduler
 *  needs to determine their true state using the @link
 *  determiningstatusandreachabilityofnetworkhosts network reachability @endlink logic (to
 *  see if they're DOWN or UNREACHABLE), it will have to launch serial
 *  checks of all of the host's immediate parents. Just to reiterate,
 *  those checks are run serially, rather than in parallel, so it can
 *  cause a big performance hit. For this reason, I would recommend
 *  that you always use a value greater than 1 for the
 *  max_check_attempts directives in your host definitions.
 *
 *  @section hostcheckshoststates Host States
 *
 *  Hosts that are checked can be in one of three different states:
 *  - UP
 *  - DOWN
 *  - UNREACHABLE
 *
 *  @section hostcheckshoststatedetermination Host State Determination
 *
 *  Host checks are performed by @link plugins.html plugins @endlink,
 *  which can return a state of OK, WARNING, UNKNOWN, or CRITICAL. How
 *  does Centron Scheduler translate these plugin return codes into
 *  host states of UP, DOWN, or UNREACHABLE? Lets see...
 *
 *  The table below shows how plugin return codes correspond with
 *  preliminary host states. Some post-processing (which is described
 *  later) is done which may then alter the final host state.
 *
 *  <table>
 *    <tr>
 *      <th>Plugin Result</th>
 *      <th>Preliminary Host State</th>
 *    </tr>
 *    <tr>
 *      <td>OK</td>
 *      <td>UP</td>
 *    </tr>
 *    <tr>
 *      <td>WARNING</td>
 *      <td>UP or DOWN<sup>*</sup></td>
 *    </tr>
 *    <tr>
 *      <td>UNKNOWN</td>
 *      <td>DOWN</td>
 *    </tr>
 *    <tr>
 *      <td>CRITICAL</td>
 *      <td>DOWN</td>
 *    </tr>
 *  </table>
 *
 *  @note WARNING results usually means the host is UP. However,
 *  WARNING results are interpreted to mean the host is DOWN if the
 *  @ref mainconfigurationfileoptionsconfigurationfilevariablesaggressivehostcheckingoption
 *  "use_aggressive_host_checking" option is enabled.
 *
 *  If the preliminary host state is DOWN, Centron Scheduler will
 *  attempt to see if the host is really DOWN or if it is UNREACHABLE.
 *  The distinction between DOWN and UNREACHABLE host states is
 *  important, as it allows admins to determine root cause of network
 *  outages faster. The following table shows how Centron Scheduler
 *  makes a final state determination based on the state of the hosts
 *  parent(s). A host's parents are defined in the parents directive in
 *  host definition.
 *
 *  <table>
 *    <tr>
 *      <th>Preliminary Host State</th>
 *      <th>Parent Host State</th>
 *      <th>Final Host State</th>
 *    </tr>
 *    <tr>
 *      <td>DOWN</td>
 *      <td>At least one parent is UP</td>
 *      <td>DOWN</td>
 *    </tr>
 *    <tr>
 *      <td>DOWN</td>
 *      <td>All parents are either DOWN or UNREACHABLE</td>
 *      <td>UNREACHABLE</td>
 *    </tr>
 *  </table>
 *
 *  More information on how Centron Scheduler distinguishes between
 *  DOWN and UNREACHABLE states can be found @link
 *  determiningstatusandreachabilityofnetworkhosts here @endlink.
 *
 *  @section hostcheckshoststatechanges Host State Changes
 *
 *  As you are probably well aware, hosts don't always stay in one
 *  state. Things break, patches get applied, and servers need to be
 *  rebooted. When Centron Scheduler checks the status of hosts, it
 *  will be able to detect when a host changes between UP, DOWN, and
 *  UNREACHABLE states and take appropriate action. These state changes
 *  result in different @link statetypes.html state types @endlink
 *  (HARD or SOFT), which can trigger @link eventhandlers.html event
 *  handlers @endlink to be run and @link notifications.html
 *  notifications @endlink to be sent out. Detecting and dealing with
 *  state changes is what Centron Scheduler is all about.
 *
 *  When hosts change state too frequently they are considered to be
 *  "flapping". A good example of a flapping host would be server that
 *  keeps spontaneously rebooting as soon as the operating system
 *  loads. That's always a fun scenario to have to deal with. Centron
 *  Scheduler can detect when hosts start flapping, and can suppress
 *  notifications until flapping stops and the host's state stabilizes.
 *  More information on the flap detection logic can be found @link
 *  detectionandhandlingofstateflapping here @endlink.
 */

