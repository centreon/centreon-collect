/**
 *  @page servicechecks Service Checks
 *  @section servicechecksintroduction Introduction
 *
 *  The basic workings of service checks are described here...
 *
 *  @section servicecheckswhenareservicechecksperformed When Are Service Checks Performed?
 *
 *  Services are checked by the Centron Scheduler daemon:
 *  - At regular intervals, as defined by the check_interval and
 *  retry_interval options in your @link objectdefinitions.html#service
 *  service definitions @endlink.
 *  - On-demand as needed for @link dependencychecks.html predictive
 *  service dependency checks @endlink.
 *
 *  On-demand checks are performed as part of the @link
 *  dependencychecks.html predictive service dependency check @endlink
 *  logic. These checks help ensure that the dependency logic is as
 *  accurate as possible. If you don't make use of @link
 *  objectdefinitions.html#servicedependency service dependencies
 *  @endlink, Centron Scheduler won't perform any on-demand service
 *  checks.
 *
 *  @section servicecheckscachedservicechecks Cached Service Checks
 *
 *  The performance of on-demand service checks can be significantly
 *  improved by implementing the use of cached checks, which allow
 *  Centron Scheduler to forgo executing a service check if it
 *  determines a relatively recent check result will do instead. Cached
 *  checks will only provide a performance increase if you are making
 *  use of @link objectdefinitions.html#servicedependency service
 *  dependencies @endlink. More information on cached checks can be
 *  found @link cachedchecks.html here @endlink.
 *
 *  @section servicechecksdependenciesandchecks Dependencies and Checks
 *
 *  You can define @link objectdefinitions.html#servicedependency
 *  service execution dependencies @endlink that prevent Centron
 *  Scheduler from checking the status of a service depending on the
 *  state of one or more other services. More information on
 *  dependencies can be found @link dependencies.html here @endlink.
 *
 *  @section servicechecksparallelizationofservicechecks Parallelization of Service Checks
 *
 *  Scheduled service checks are run in parallel. When Centron
 *  Scheduler needs to run a scheduled service check, it will initiate
 *  the service check and then return to doing other work (running host
 *  checks, etc). The service check runs in a child process that was
 *  fork()ed from the main Centron Scheduler daemon. When the service
 *  check has completed, the child process will inform the main Centron
 *  Scheduler process (its parent) of the check results. The main
 *  Centron Scheduler process then handles the check results and takes
 *  appropriate action (running event handlers, sending notifications,
 *  etc.).
 *
 *  On-demand service checks are also run in parallel if needed. As
 *  mentioned earlier, Centron Scheduler can forgo the actual execution
 *  of an on-demand service check if it can use the cached results from
 *  a relatively recent service check.
 *
 *  @section servicechecksservicestates Service States
 *
 *  Services that are checked can be in one of four different states:
 *  - OK
 *  - WARNING
 *  - UNKNOWN
 *  - CRITICAL
 *
 *  @section servicechecksservicestatedetermination Service State Determination
 *
 *  Service checks are performed by @link plugins.html plugins
 *  @endlink, which can return a state of OK, WARNING, UNKNOWN, or
 *  CRITICAL. These plugin states directly translate to service states.
 *  For example, a plugin which returns a WARNING state will cause a
 *  service to have a WARNING state.
 *
 *  @section servicechecksservicesstatechanges Services State Changes
 *
 *  When Centron Scheduler checks the status of services, it will be
 *  able to detect when a service changes between OK, WARNING, UNKNOWN,
 *  and CRITICAL states and take appropriate action. These state
 *  changes result in different @link statetypes.html state types
 *  @endlink (HARD or SOFT), which can trigger @link eventhandlers.html
 *  event handlers @endlink to be run and @link notifications.html
 *  notifications @endlink to be sent out. Service state changes can
 *  also trigger on-demand @link hostchecks.html host checks @endlink.
 *  Detecting and dealing with state changes is what Centron Scheduler
 *  is all about.
 *
 *  When services change state too frequently they are considered to be
 *  "flapping". Centron Scheduler can detect when services start
 *  flapping, and can suppress notifications until flapping stops and
 *  the service's state stabilizes. More information on the flap
 *  detection logic can be found @link flapping.html here @endlink.
 */

