/**
 *  @page predictivedependencychecks Predictive Dependency Checks
 *  @section predictivedependencychecksintroduction Introduction
 *
 *  Host and service @link hostandservicedependencies dependencies @endlink can
 *  be defined to allow you greater control over when checks are
 *  executed and when notifications are sent out. As dependencies are
 *  used to control basic aspects of the monitoring process, it is
 *  crucial to ensure that status information used in the dependency
 *  logic is as up to date as possible.
 *
 *  Centreon Engine allows you to enable predictive dependency checks
 *  for hosts and services to ensure that the dependency logic will
 *  have the most up-to-date status information when it comes to making
 *  decisions about whether to send out notifications or allow active
 *  checks of a host or service.
 *
 *  @section predictivedependencycheckshowdopredictivecheckswork How Do Predictive Checks Work?
 *
 *  The image below shows a basic diagram of hosts that are being
 *  monitored by Centreon Engine, along with their parent/child
 *  relationships and dependencies.
 *
 *  The Switch2 host in this example has just changed state from an UP
 *  state to a problem state. Centreon Engine needs to determine
 *  whether the host is DOWN or UNREACHABLE, so it will launch parallel
 *  checks of Switch2's immediate parents (Firewall1) and children
 *  (Comp1, Comp2, and Switch3). This is a normal function of the @link
 *  determiningstatusandreachabilityofnetworkhosts host reachability @endlink logic.
 *
 *  You will also notice that Switch2 is depending on Monitor1 and
 *  File1 for either notifications or check execution (which one is
 *  unimportant in this example). If predictive host dependency checks
 *  are enabled, Centreon Engine will launch parallel checks of
 *  Monitor1 and File1 at the same time it launches checks of Switch2's
 *  immediate parents and children. Centreon Engine does this because
 *  it knows that it will have to test the dependency logic in the near
 *  future (e.g. for purposes of notification) and it wants to make
 *  sure it has the most current status information for the hosts that
 *  take part in the dependency.
 *
 *  @image html predictive-dependency-checks.png
 *  @image latex predictive-dependency-checks.eps width=\linewidth
 *
 *  That's how predictive dependency checks work. Simple, eh?
 *
 *  @note Predictive service dependency checks work in a similiar
 *  manner to what is described above. Except, of course, they deal
 *  with services instead of hosts.
 *
 *  @section predictivedependencychecksenablingpredictivechecks Enabling Predictive Checks
 *
 *  Predictive dependency checks involve rather little overhead, so I
 *  would recommend that you enable them. In most cases, the benefits
 *  of having accurate information for the dependency logic outweighs
 *  the extra overhead imposed by these checks.
 *
 *  Enabling predictive dependency checks is easy:
 *  - Predictive host dependency checks are controlled by the
 *  @ref mainconfigurationfileoptionsconfigurationfilevariablespredictivehostdependencychecksoption
 *  "enable_predictive_host_dependency_checks" option.
 *  - Predictive service dependency checks are controlled by the @ref
 *  mainconfigurationfileoptionsconfigurationfilevariablespredictiveservicedependencychecksoption
 *  "enable_predictive_service_dependency_checks" option.
 *
 *  @section predictivedependencycheckscachedchecks Cached Checks
 *
 *  Predictive dependency checks are on-demand checks and are therefore
 *  subject to the rules of @link cachedchecks.html cached checks
 *  @endlink. Cached checks can provide you with performance
 *  improvements by allowing Centreon Engine to forgo running an
 *  actual host or service check if it can use a relatively recent
 *  check result instead. More information on cached checks can be
 *  found @link cachedchecks.html here @endlink.
 */
