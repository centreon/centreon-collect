syntax = "proto3";

package com.centreon.broker;

message Service {
  uint64 host_id = 1;
  uint64 service_id = 2;

  enum AckType {
    NONE = 0;
    NORMAL = 1;
    STICKY = 2;
  }
  bool acknowledged = 3;
  AckType acknowledgement_type = 4;

  bool active_checks_enabled = 5;
  bool enabled = 6;
  int32 downtime_depth = 7;
  string check_command = 8;
  uint32 check_interval = 9;
  string check_period = 10;

  enum CheckType {
    ACTIVE = 0;
    PASSIVE = 1;
  }
  CheckType check_type = 11;
  int32 current_check_attempt = 12;
  enum State {
    OK = 0;
    WARNING = 1;
    CRITICAL = 2;
    UNKNOWN = 3;
    PENDING = 4;
  }
  State current_state = 13;
  bool event_handler_enabled = 14;
  string event_handler = 15;
  double execution_time = 16;
  bool flap_detection_enabled = 17;
  bool has_been_checked = 18;
  bool is_flapping = 19;
  int64 last_check = 20;
  State last_hard_state = 21;
  int64 last_hard_state_change = 22;
  int64 last_notification = 23;
  int32 notification_number = 24;
  int64 last_state_change = 25;
  int64 last_time_ok = 26;
  int64 last_time_warning = 27;
  int64 last_time_critical = 28;
  int64 last_time_unknown = 29;
  int64 last_update = 30;
  double latency = 31;
  uint32 max_check_attempts = 32;
  int64 next_check = 33;
  int64 next_notification = 34;
  bool no_more_notifications = 35;
  bool notifications_enabled = 36;
  string output = 37;
  string long_output = 38;
  bool passive_checks_enabled = 39;
  double percent_state_change = 40;
  string perf_data = 41;
  double retry_interval = 42;
  string host_name = 43;
  string service_description = 44;
  bool should_be_scheduled = 45;
  bool obsess_over = 46;

  enum StateType {
    SOFT = 0;
    HARD = 1;
  }

  StateType state_type = 47;
  string action_url = 48;
  bool check_freshness = 49;
  bool default_active_checks_enabled = 50;
  bool default_event_handler_enabled = 51;
  bool default_flap_detection_enabled = 52;
  bool default_notifications_enabled = 53;
  bool default_passive_checks_enabled = 54;
  string display_name = 55;
  double first_notification_delay = 56;
  bool flap_detection_on_critical = 57;
  bool flap_detection_on_ok = 58;
  bool flap_detection_on_unknown = 59;
  bool flap_detection_on_warning = 60;
  double freshness_threshold = 61;
  double high_flap_threshold = 62;
  string icon_image = 63;
  string icon_image_alt = 64;
  bool is_volatile = 65;
  double low_flap_threshold = 66;
  string notes = 67;
  string notes_url = 68;
  double notification_interval = 69;
  string notification_period = 70;
  bool notify_on_critical = 71;
  bool notify_on_downtime = 72;
  bool notify_on_flapping = 73;
  bool notify_on_recovery = 74;
  bool notify_on_unknown = 75;
  bool notify_on_warning = 76;
  bool stalk_on_critical = 77;
  bool stalk_on_ok = 78;
  bool stalk_on_unknown = 79;
  bool stalk_on_warning = 80;
  bool retain_nonstatus_information = 81;
  bool retain_status_information = 82;
  uint64 severity_id = 83;
}

/**
 * @brief Message sent in BBDO 3.0.0 instead of neb::service_status
 */
message ServiceStatusCheckResult {
  uint64 host_id = 1;
  uint64 service_id = 2;

  bool has_been_checked = 3;
  enum CheckType {
    ACTIVE = 0;
    PASSIVE = 1;
  }
  CheckType check_type = 4;

  enum State {
    OK = 0;
    WARNING = 1;
    CRITICAL = 2;
    UNKNOWN = 3;
    PENDING = 4;
  }
  State current_state = 5;
  enum StateType {
    SOFT = 0;
    HARD = 1;
  }
  StateType state_type = 6;
  int64 last_state_change = 7;
  State last_hard_state = 8;
  int64 last_hard_state_change = 9;
  int64 last_time_ok = 10;
  int64 last_time_warning = 11;
  int64 last_time_critical = 12;
  int64 last_time_unknown = 13;

  string output = 14;
  string long_output = 15;
  string perf_data = 16;

  bool is_flapping = 17;
  double percent_state_change = 18;
  double latency = 19;
  double execution_time = 20;
  int64 last_check = 21;
  int64 next_check = 22;
  bool should_be_scheduled = 23;
  int32 current_check_attempt = 24;

  int32 notification_number = 25;
  bool no_more_notifications = 26;
  int64 last_notification = 27;
  int64 next_notification = 28;

  enum AckType {
    NONE = 0;
    NORMAL = 1;
    STICKY = 2;
  }
  AckType acknowledgement_type = 29;
  int32 downtime_depth = 30;
}

/**
 * @brief Message sent in BBDO 3.0.0 instead of neb::service_status
 * When only one of the downtime depth or the next_check changed.
 */
message ServiceStatusSmall {
  uint64 host_id = 1;
  uint64 service_id = 2;

  enum CheckType {
    ACTIVE = 0;
    PASSIVE = 1;
  }
  CheckType check_type = 3;
  int64 next_check = 4;
  int32 downtime_depth = 5;
}

message AdaptiveService {
  uint64 host_id = 1;
  uint64 service_id = 2;

  optional bool notifications_enabled = 3;
  optional bool active_checks_enabled = 4;
  optional bool should_be_scheduled = 5;
  optional bool passive_checks_enabled = 6;
  optional bool event_handler_enabled = 7;
  optional bool flap_detection_enabled = 8;
  optional bool obsess_over = 9;
  optional string event_handler = 10;
  optional string check_command = 11;
  optional uint32 check_interval = 12;
  optional uint32 retry_interval = 13;
  optional uint32 max_check_attempts  = 14;
  optional bool check_freshness = 15;
  optional string check_period = 16;
  optional string notification_period = 17;
}
