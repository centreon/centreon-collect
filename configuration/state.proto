/*
** Copyright 2022-2023 Centreon
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
**
** For more information : contact@centreon.com
*/

syntax = "proto3";

import "state-generated.proto";

package com.centreon.engine.configuration;

enum DateType {
  us = 0;              // U.S. (MM-DD-YYYY HH:MM:SS)
  euro = 1;            // European (DD-MM-YYYY HH:MM:SS)
  iso8601 = 2;         // ISO8601 (YYYY-MM-DD HH:MM:SS)
  strict_iso8601 = 3;  // ISO8601 (YYYY-MM-DDTHH:MM:SS)
}

message InterCheckDelay {
  enum IcdType {
    none = 0;   // no inter-check delay
    dumb = 1;   // dumb delay of 1 second
    smart = 2;  // smart delay
    user = 3;   // user-specified delay
  }
  IcdType type = 1;
  double user_value = 2;
}

message State {
  string cfg_main = 1;
  repeated string cfg_file = 2;
  repeated string resource_file = 3;
  int32 instance_heartbeat_interval = 4;
  bool check_service_freshness = 5;
  bool enable_flap_detection = 6;
  string rpc_listen_address = 7;
  uint32 rpc_port = 8;
  map<string, string> users = 9;
  repeated string cfg_dir = 10;
  string state_retention_file = 11;
  repeated string broker_module = 12;
  bool enable_macros_filter = 13;
  StringSet macros_filter = 14;

  bool log_v2_enabled = 15;
  bool log_legacy_enabled = 16;
  bool use_syslog = 17;
  string log_v2_logger = 18;
  string log_file = 19;
  string debug_file = 20;
  uint32 debug_level = 21;
  uint32 debug_verbosity = 22;
  uint32 max_debug_file_size = 23;
  bool log_pid = 24;
  bool log_file_line = 25;
  int32 log_flush_period = 26;
  string log_level_checks = 27;
  string log_level_commands = 28;
  string log_level_comments = 29;
  string log_level_config = 30;
  string log_level_downtimes = 31;
  string log_level_eventbroker = 32;
  string log_level_events = 33;
  string log_level_external_command = 34;
  string log_level_functions = 35;
  string log_level_macros = 36;
  string log_level_notifications = 37;
  string log_level_process = 38;
  string log_level_runtime = 39;

  string global_host_event_handler = 40;
  string global_service_event_handler = 41;
  string illegal_object_chars = 42;
  string illegal_output_chars = 43;
  uint32 interval_length = 44;
  string ochp_command = 45;
  string ocsp_command = 46;
  string use_timezone = 47;
  bool accept_passive_host_checks = 48;
  bool accept_passive_service_checks = 49;
  int32 additional_freshness_latency = 50;
  uint32 cached_host_check_horizon = 51;
  bool check_external_commands = 52;
  bool check_host_freshness = 53;
  uint32 check_reaper_interval = 54;
  bool enable_event_handlers = 55;
  bool enable_notifications = 56;
  bool execute_host_checks = 57;
  bool execute_service_checks = 58;
  uint32 max_host_check_spread = 59;
  uint32 max_service_check_spread = 60;
  uint32 notification_timeout = 61;
  bool obsess_over_hosts = 62;
  bool obsess_over_services = 63;
  bool process_performance_data = 64;
  bool soft_state_dependencies = 65;
  bool use_large_installation_tweaks = 66;
  string admin_email = 67;
  string admin_pager = 68;
  bool allow_empty_hostgroup_assignment = 69;
  string command_file = 70;
  string status_file = 71;
  string poller_name = 72;
  uint32 poller_id = 73;
  bool auto_reschedule_checks = 74;
  uint32 auto_rescheduling_interval = 75;
  uint32 auto_rescheduling_window = 76;
  uint32 cached_service_check_horizon = 77;
  bool check_orphaned_hosts = 78;
  bool check_orphaned_services = 79;
  int32 command_check_interval = 80;
  bool enable_environment_macros = 81;
  uint32 event_broker_options = 82;
  uint32 event_handler_timeout = 83;
  int32 external_command_buffer_slots = 84;
  float high_host_flap_threshold = 85;
  float high_service_flap_threshold = 86;
  int32 host_check_timeout = 87;
  uint32 host_freshness_check_interval = 88;
  bool log_event_handlers = 89;
  bool log_external_commands = 90;
  bool log_notifications = 91;
  bool log_passive_checks = 92;
  bool log_host_retries = 93;
  bool log_service_retries = 94;
  uint32 max_log_file_size = 95;
  float low_host_flap_threshold = 96;
  float low_service_flap_threshold = 97;
  uint32 max_parallel_service_checks = 98;
  uint32 ochp_timeout = 99;
  uint32 ocsp_timeout = 100;
  int32 perfdata_timeout = 101;
  uint32 retained_host_attribute_mask = 102;
  bool retain_state_information = 103;
  uint32 retention_scheduling_horizon = 104;
  uint32 retention_update_interval = 105;
  uint32 service_check_timeout = 106;
  float sleep_time = 107;
  uint32 status_update_interval = 108;
  uint32 time_change_threshold = 109;
  bool use_regexp_matches = 110;
  bool use_retained_program_state = 111;
  bool use_retained_scheduling_info = 112;
  bool use_setpgid = 113;
  bool use_true_regexp_matching = 114;
  DateType date_format = 115;
  InterCheckDelay host_inter_check_delay_method = 116;
  InterCheckDelay service_inter_check_delay_method = 117;

  repeated Command commands = 118;
  repeated Connector connectors = 119;
  repeated Contact contacts = 120;
  repeated Contactgroup contactgroups = 121;
  repeated Hostdependency hostdependencies = 122;
  repeated Hostescalation hostescalations = 123;
  repeated Hostgroup hostgroups = 124;
  repeated Host hosts = 125;
  repeated Servicedependency servicedependencies = 126;
  repeated Serviceescalation serviceescalations = 127;
  repeated Servicegroup servicegroups = 128;
  repeated Service services = 129;
  repeated Anomalydetection anomalydetections = 130;
  repeated Timeperiod timeperiods = 131;
  repeated Severity severities = 132;
  repeated Tag tags = 133;
}

message Value {
  oneof value {
    bool value_b = 1;
    int32 value_i32 = 2;
    uint32 value_u32 = 3;
    string value_str = 4;
    TimeRange value_tr = 5;
    Daterange value_dr = 6;
    Timeperiod value_tp = 7;
    Connector value_cn = 8;
    Command value_co = 9;
    CustomVariable value_cv = 10;
    Contact value_ct = 11;
  }
}

message Key {
  oneof key {
    int32 i32 = 1;
    string str = 2;
  }
}

message Path {
  repeated Key key = 1;
}

message PathWithValue {
  Path path = 1;
  Value val = 2;
}

message PathWithPair {
  Path path = 1;
  Value val1 = 2;
  Value val2 = 3;
}

message DiffState {
  repeated PathWithValue to_add = 1;
  repeated Path to_remove = 2;
  repeated PathWithValue to_modify = 3;
}
