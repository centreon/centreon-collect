name: gorgoned
database:
  db_centreon: 
    dsn: "mysql:host=localhost;dbname=centreon"
    username: centreon
    password: centreon
  db_centstorage: 
    dsn: "mysql:host=localhost;dbname=centreon_storage"
    username: centreon
    password: centreon
gorgonecore:
  internal_com_type: ipc
  internal_com_path: /tmp/gorgone/routing.ipc
  external_com_type: tcp
  external_com_path: "*:5555"
  # in seconds before sending kill signals (not gently)
  timeout: 50
  gorgone_db_type: SQLite
  gorgone_db_name: dbname=/tmp/gorgone.sdb
  gorgone_db_host: 
  gorgone_db_port: 
  gorgone_db_user:
  gorgone_db_password:
  # If not set. Use 'hostname' function.
  hostname:
  # If not set. Try from 'hostname' in database
  # Set 'none', if you don't need it (for poller in push mode)
  id: none
  privkey: keys/central/privkey.pem
  cipher: "Cipher::AES"
  # in bytes
  keysize: 32
  # 16 bytes for AES
  vector: 0123456789012345
  # in seconds
  sessions_time: 86400
  # in seconds
  purge_sessions_time: 3600
  # shouldn't be changed
  proxy_name: gorgoneproxy
modules:
  - name: gorgonehttpserver
    module: modules::gorgonehttpserver::hooks
    enable: false
    address: 0.0.0.0
    port: 8080
    ssl: true
    ssl_cert_file: /etc/pki/tls/certs/server-cert.pem
    ssl_key_file: /etc/pki/tls/server-key.pem
    auth:
      user: admin
      password: password

  - name: gorgonecron
    module: modules::gorgonecron::hooks
    enable: true

  - name: gorgoneaction
    module: modules::gorgoneaction::hooks
    enable: false

  - name: gorgoneacl
    module: modules::gorgoneacl::hooks
    enable: false
    on_demand: 1
    # How much to keep open in seconds without event received
    on_demand_time: 60
    # in seconds - do purge for organizations also
    check_organizations_time: 3600
    # in seconds - do a resync of the organizations
    resync_time: 28800
    # in seconds - random windows (to avoid resync at the same time)
    resync_random_windows: 7200
    # set to 1 to disable - if you want to do it by a cron
    resync_auto_disable: 0
    sql_fetch: 10000
    sql_bulk: 2000

  - name: gorgoneproxy
    module: modules::gorgoneproxy::hooks
    enable: false
    pool: 5
    # sync history each 5 minutes
    synchistory_time: 300
    # how much time before the response is in timeout
    synchistory_timeout: 120
    # ping each X seconds
    ping: 60

  - name: gorgonescom
    module: modules::gorgonescom::hooks
    enable: true
    # in seconds - do purge for container also
    check_containers_time: 3600
    dsmclient_bin: /usr/share/centreon/bin/dsmclient.pl
    centcore_cmd: /var/lib/centreon/centcore.cmd
    containers:
        - name: toto
          api_version: 2016
          url: "http://scomserver/api/"
          username: toto
          password: pass
          httpauth: basic
          resync_time: 300
          dsmhost: ADH3
          dsmslot: Scom-%
          dsmmacro: ALARM_ID
          dsmalertmessage: "%{monitoringobjectdisplayname} %{name}"
          dsmrecoverymessage: slot ok
          curlopts:
              CURLOPT_SSL_VERIFYPEER: 0
      # - name: tutu
      #   url: http://scomserver2/
      #   username: toto2
      #   password: toto2
      #   resync_time: 600

  - name: gorgonenewtest
    module: modules::gorgonenewtest::hooks
    enable: false
    # in seconds - do purge for container also
    check_containers_time: 3600
    clapi_command: /usr/bin/centreon
    clapi_username: admin
    clapi_password: centreon
    clapi_action_applycfg: RELOAD
    centcore_cmd: /var/lib/centreon/centcore.cmd
    containers:
        - name: toto
          resync_time: 300
          nmc_endpoint: "http://__NMC_ADDRESS__/nws/managementconsoleservice.asmx"
          username: user
          password: pass
          host_template: generic-active-host-custom
          host_prefix: Robot-%s
          service_template: generic-passive-service-custom
          service_prefix: Scenario-%s
          poller_name: Central
          list_scenario_status: '{ "search": "All", "instances": [] }'
        - name: tutu
          resync_time: 600
          nmc_endpoint: "http://__NMC_ADDRESS__/nws/managementconsoleservice.asmx"
          username: user
          password: pass
          host_template: generic-active-host-custom
          host_prefix: Robot-%s
          service_template: generic-passive-service-custom
          service_prefix: Scenario-%s
          poller_name: Central
          list_scenario_status: '{ "search": "Robot", "instances": ["XXXX"] }' 
