#!/usr/bin/env python
# coding: utf-8

import os
import sys
import argparse
import ConfigParser
import datetime
import tempfile
import time
sys.path.append("lib/python")
import sysutils


class BuildError(Exception): pass


class ISOBuilder(object):
    def __init__(self, args):
        self.config = ConfigParser.ConfigParser()
        self.args = args
        self.src_dir = 'iso/ces%s' % args.version
        self.cfgfile = '%s/%s.config' % (self.src_dir, self.args.flavor)

        try:
            with open(self.cfgfile) as fp:
                self.config.readfp(fp)
        except IOError:
            sysutils.print_error("Fichier de configuration introuvable")
            sys.exit(1)

        self.orig_distro_name = "%s-%s" \
            % (self.config.get("distribution", "name").lower(),
               self.config.get("distribution", "version"))
        self.orig_distro_version = \
            "%s.%s" % (self.config.get("distribution", "version"),
                       self.config.get("distribution", "release"))
        self.ces_distro_name = "%s-%s-%s" \
            % (self.config.get("general", "name").lower(),
               args.flavor,
               self.config.get("general", "release"))

        self.pkgcache_dir = os.path.join(args.bdir, "pkgcache")
        self.chroots_dir = os.path.join(
            args.bdir, "chroots", self.orig_distro_name, self.arch
        )
        self.iso_dir = os.path.join(
            args.bdir, "iso", self.ces_distro_name, self.arch
        )

        self.__make_path(self.pkgcache_dir)
        self.__make_path(self.chroots_dir)
        self.__make_path(self.iso_dir)

        try:
            if args.mirror:
                self.mirror_centos_repos()
            if args.installer:
                self.make_installer()
            self.make_iso()
        except BuildError, e:
            sysutils.print_error("Failed:")
            sysutils.print_error(e)
            sys.exit(2)

    def __make_path(self, path):
        """Création d'un chemin complet de répertoires

        :param path: le chemin à créer
        """
        try:
            os.makedirs(path)
        except os.error:
            pass

    def _runcmd(self, cmd, title=None, cwd=None):
        """Exécution d'une commande shell

        Le traitement des erreurs est assuré. (levée d'exception)

        :param cmd: la commande à exécuter
        :param title: un éventuel message à afficher avant
        :param cwd: un éventuel répertoire d'exécution
        """
        if title:
            sysutils.print_warning("  > %s" % title)
        if not cwd:
            code, out = sysutils.runcmd(cmd)
        else:
            code, out = sysutils.runcmd(cmd, cwd=cwd)
        if self.args.verbose:
            print out
        if code:
            raise BuildError(out)
        self._last_command_output = out

    @property
    def arch(self):
        """Retourne l'architecture matérielle au format CentOS"""
        return "x86_64" if self.args.arch == "amd64" else self.args.arch

    @property
    def iso_packages_dir(self):
        raise NotImplementedError

    @property
    def squashfs_version(self):
        """Retourne la version de squashfs requise

        Le noyau embarqué sur CentOS 5 étant vieux, il supporte une
        version de squashfs vieille (3.1). D'autre part, la majorité
        des distributions récentes embarque une version 4+ de squashfs
        (non rétro-compatible).

        Pour palier à ce problème, une version 3.1 des outils squashfs
        est embarquée dans le dépôt ces-base.
        """
        try:
            squashfs_v = self.config.get("general", "squashfs")
        except:
            squashfs_v = "4"
        return squashfs_v

    @property
    def mksquashfs(self):
        """Retourne la version de mksquashfs à utiliser"""
        if self.squashfs_version == "3":
            return "bin/mksquashfs-%s-3.1" % self.args.arch
        return "mksquashfs"

    @property
    def unsquashfs(self):
        """Retourne la version de unsquashfs à utiliser"""
        if self.squashfs_version == "3":
            return "bin/unsquashfs-%s-3.1" % self.args.arch
        return "unsquashfs"

    def make_installer(self):
        """Création de l'installeur embarqué dans l'ISO

        L'ensemble des fichiers requis est téléchargé depuis un
        mirroir officiel. L'image *stage2* récupérée est ensuite
        modifiée pour la mettre aux couleurs de Merethis.
        """
        sysutils.print_info("Building installer")

        url = self.config.get("installer", "mirror_url")
        url = "%s/%s/os/%s/" % (url, self.orig_distro_version, self.arch)
        mirror_cmd = "mirror"
        if self.config.get('installer', 'exclude_files'):
            mirror_cmd += " --exclude %s" % self.config.get('installer', 'exclude_files')
        self._runcmd("lftp -e 'set xfer:log 1; set xfer:rate-period 10; set ftp:list-options -a; %s; quit' %s" \
                         % (mirror_cmd, url),
                     title="Fetching files from official mirror",
                     cwd=self.iso_dir)
        self._runcmd("lftp -e 'set xfer:clobber on; set xfer:log 1; set xfer:rate-period 10; mget -d %s; quit' %s" \
                          % (".discinfo .treeinfo", url),
                      title="Fetching dot files from official mirror",
                       cwd=self.iso_dir)

    def __rinse_post_install(self):
        fd, fname = tempfile.mkstemp()
        pkgfile = os.path.join(
            os.path.dirname(self.cfgfile),
            self.config.get("distribution", "packages")
        )
        with open(pkgfile) as fp:
            packages = fp.read().replace('\n', ' ')
        chroot = 'chroot' if self.args.arch == 'amd64' else 'linux32 chroot'
        os.write(fd, """
prefix=$1
%(chroot)s ${prefix} /usr/bin/yum -y install yum-plugin-downloadonly
PACKAGES=$(chroot ${prefix} rpm -qa | tr '\n' ' ')
%(chroot)s ${prefix} /usr/bin/yum -y reinstall --setopt=protected_multilib=false --downloadonly --downloaddir=/tmp $PACKAGES
%(chroot)s ${prefix} /usr/bin/yum -y install --downloadonly --downloaddir=/tmp %(packages)s
""" % {"chroot": chroot, "packages": packages})
        os.close(fd)
        sysutils.runcmd_and_check('chmod a+x %s' % fname)
        return fname

    def mirror_centos_repos(self):
        """Récupération des paquets RPM CentOS

        Les paquets nécessaires à la construction d'une ISO CentOS
        sont téléchargés depuis un mirroir officiel.

        L'outils `rinse <http://www.steve.org.uk/Software/rinse/>`_ est
        utilisé pour cette opération.
        """
        sysutils.print_info("Cloning official CentOS mirror")
        cmd = "sudo rinse --arch %s --distribution %s --directory %s --after-post-install %s --cache-dir %s" \
            % (self.args.arch, self.orig_distro_name, self.chroots_dir,
               self.__rinse_post_install(), self.pkgcache_dir)
        sysutils.print_warning("Boostraping CentOS image using rinse")
        sysutils.runcmd(cmd, verbose=True)

    def include_repo_packages(self, pkgdir):
        """Inclusion des paquets donnant accès aux dépôts CES

        Les paquets requis sont copiés dans l'ISO.

        :param pkgdir: répertoire de destination
        """
        packages = self.config.get("general", "repo_packages")
        packages = packages.split(" ")
        ces_version = self.config.get("general", "release")
        print 'Version %s' % (ces_version)
        #if ces_version.startswith('3.'):
        #    ces_version = '3.0'
        #if ces_version == '3.4':
        #    ces_version = '3.4'
        for pkg in packages:
            pkgpath = 'ces-%s/%s' % (ces_version, pkg)
            print 'pkgpath %s' % (pkgpath)
            try:
                config = ConfigParser.ConfigParser()
                config.readfp(open("packages/ces-repositories/%s/pkg.config" % pkgpath))
            except IOError:
                raise BuildError("Failed to open package config file (%s:%s)" % (pkg, ces_version))
            if self.args.category is not None:
                pkgfile = "%s/%s-%s-%s-%s.noarch.rpm" % (self.args.bdir,
                                                         config.get("package", "name"),
                                                         self.args.category,
                                                         config.get("package", "version"),
                                                         config.get("package", "release"))
                flavor = self.args.category
            else:
                pkgfile = "%s/%s-%s-%s.noarch.rpm" % (self.args.bdir,
                                                      config.get("package", "name"),
                                                      config.get("package", "version"),
                                                      config.get("package", "release"))
                flavor = ces_version
            print 'Release package %s' % (pkgfile)
            if not os.path.exists(pkgfile):
                print 'Build CES Release package'
                self._runcmd(
                    "./packages/ces-repositories/build --flavor %s ces-%s:%s" % (flavor, pkg, ces_version),
                    "Building repo packages"
                )
	    print 'cp %s %s" % (pkgfile, pkgdir), "Copying %s" % pkgfile'
            self._runcmd("cp %s %s" % (pkgfile, pkgdir), "Copying %s" % pkgfile)

    def make_iso(self):
        """Construction de l'ISO

        Les paquets CentOS et les paquets fournis par Merethis sont
        mélangés au sein du même répertoire, les index sont recrées
        (via createrepo) et l'ISO est générée via ``mkisofs``.
        """
        sysutils.print_info("Generating ISO file")

        pkgdir = os.path.join(self.iso_dir, self.iso_packages_dir)
        self.__make_path(pkgdir)
	self._runcmd("cp %s/%s.%s/* %s" \
                          % (self.pkgcache_dir, self.orig_distro_name,
                             self.args.arch, pkgdir),
                      "Copying CentOS packages")
        self._runcmd("cp %s/tmp/*.rpm %s" % (self.chroots_dir, pkgdir))

        files = [
            "noarch/RPMS/*",
            "%s/RPMS/*" % self.arch
        ]
        repo_urls = self.config.get("general", "repo_urls")
        pkgdir = os.path.join(pkgdir, "Centreon")
        self.__make_path(pkgdir)
        for url in repo_urls.split():
            url = url.strip()

            for f in flist:
                dname = os.path.dirname(f)
                self._runcmd(
                    "lftp -e 'ls %s|wc -l; quit' %s" % (dname, url),
                    "Checking content for %s" % dname,
                    cwd=pkgdir
                )
                if self._last_command_output.split("\n")[1] == "1":
                    continue
                self._runcmd(
                    "lftp -e 'set xfer:clobber on; mget %s; quit' %s" % (f, url),
                    "Cloning CES packages from %s%s" % (url, f),
                    cwd=pkgdir
                )

        self.include_repo_packages(pkgdir)
        self._runcmd("createrepo -g repodata/*comps.xml .",
                      title="Updating XML files",
                      cwd=self.iso_dir)

        now = datetime.datetime.strftime(datetime.datetime.now(), "%Y/%m/%d")
        if self.args.category is None:
            outfile = "%s/%s-%s.iso" % (os.path.abspath(self.args.bdir), self.ces_distro_name, self.arch)
        else:
            outfile = "%s/%s-%s-%s.iso" % (os.path.abspath(self.args.bdir), self.ces_distro_name,
                                           self.args.category, self.arch)
        cmd = "sudo mkisofs -R -J -T -joliet-long -no-emul-boot -boot-load-size 4 -boot-info-table -V '%(descr)s' -A 'Created on %(date)s' -P '%(publisher)s' -p '%(publisher)s' -b isolinux/isolinux.bin -c isolinux/boot.cat -x 'lost+found' -o %(outfile)s ." \
            % {"descr" : "Centreon",
               "date" : now,
               "publisher" : "Centreon",
               "outfile" : outfile}

        self._runcmd(cmd, title="Running mkisofs", cwd=self.iso_dir)
        self._runcmd('sudo implantisomd5 %s' % outfile,
                     title="Implanting md5sum into ISO file", cwd=self.iso_dir)
        sysutils.print_success("ISO file %s created." % outfile)


class CES2Builder(ISOBuilder):

    @property
    def iso_packages_dir(self):
        return 'Packages'

    def make_installer(self):
        super(CES2Builder, self).make_installer()

        sysutils.print_info("Updating stage2 image")
        orig_stage2_file = os.path.join(self.iso_dir, "images/stage2.img")
        tmpdir = os.path.join(self.args.bdir, "squashfs-root")
        self._runcmd("%s -dest %s %s" % ("unsquashfs", tmpdir, orig_stage2_file),
                      "Decompressing stage2 image")
        pixmaps_dir = os.path.join(tmpdir, "usr/share/anaconda/pixmaps")
        self._runcmd("rm -rf %s/*" % pixmaps_dir, "Cleaning image")
        self._runcmd("cp -rf %s/pixmaps/* %s" % (self.src_dir, pixmaps_dir),
                      "Copying Merethis files")
        new_stage2_file = os.path.join(self.args.bdir, "stage2.img")
        self._runcmd("%s %s %s -b 65536 -all-root -no-fragments" \
                          % (self.mksquashfs, tmpdir, new_stage2_file),
                      "Compressing new stage2 image")
        self._runcmd("mv %s %s" % (new_stage2_file, orig_stage2_file),
                      "Moving new file")

        sysutils.print_info("Copying configuration files")
        files = ["%(srcdir)s/isolinux/",
                 "%(srcdir)s/kickstart/%(flavor)s/*",
                 "%(srcdir)s/RELEASE*",
                 "gpg/RPM-GPG-KEY-CES"]
        self._runcmd("cp -r %(files)s %(dstdir)s" \
                          % {"files" : " ".join(files) % {"srcdir" : self.src_dir,
                                                          "flavor": self.args.flavor},
                             "dstdir" : self.iso_dir})


class CES3Builder(ISOBuilder):

    @property
    def iso_packages_dir(self):
        return 'Packages'

    def make_installer(self):
        super(CES3Builder, self).make_installer()

        sysutils.print_info("Updating initrd.img file")
        orig_file = os.path.join(self.iso_dir, "isolinux/initrd.img")
        tmpdir = tempfile.mkdtemp()
        initrd_dir = "%s/initrd" % tmpdir
        os.mkdir(initrd_dir)
        self._runcmd("cp %s %s/initrd.img.lzma" % (orig_file, tmpdir))
        self._runcmd("unlzma --stdout ../initrd.img.lzma | cpio -id",
                     title="Uncompressing initrd file", cwd=initrd_dir)
        with open("%s/.buildstamp" % initrd_dir, "w") as fp:
            print >> fp, """201309230102.%s
CES
3.0
FINAL=YES
http://bugs.centos.org/""" % self.arch
        self._runcmd("find . | cpio -o --format='newc' > ../initrd.img.new", cwd=initrd_dir)
        self._runcmd("lzma initrd.img.new", "Compressing new initrd file", cwd=tmpdir)
        self._runcmd("cp %s/initrd.img.new.lzma %s" % (tmpdir, orig_file),
                     "Moving new file")
        self._runcmd("rm -rf %s" % tmpdir)

        sysutils.print_info("Creating updates.img file")
        targetfile = "%s/images/updates.img" % self.iso_dir
        self._runcmd(
            "dd if=/dev/zero of=%s bs=1k count=1440" % targetfile
        )
        self._runcmd("mkfs.ext2 -F %s" % targetfile)
        tmpdir = tempfile.mkdtemp()
        self._runcmd("sudo mount -o loop %s %s" % (targetfile, tmpdir))
        self._runcmd("cp -r %s/kickstart/%s %s/kickstart" % (self.src_dir, self.args.flavor, tmpdir))
        self._runcmd("cp -r %s/anaconda/* %s" % (self.src_dir, tmpdir))
        time.sleep(0.1)
        self._runcmd("sudo umount %s" % tmpdir)
        self._runcmd("rm -r %s" % tmpdir)

        sysutils.print_info("Updating isolinux files")
        self._runcmd(
            "sudo cp -r %s/isolinux/* %s/isolinux" % (self.src_dir, self.iso_dir)
        )


class CES3_1Builder(ISOBuilder):

    @property
    def iso_packages_dir(self):
        return 'Packages'

    def make_installer(self):
        super(CES3_1Builder, self).make_installer()

        sysutils.print_info("Updating initrd.img file")
        orig_file = os.path.join(self.iso_dir, "isolinux/initrd.img")
        tmpdir = tempfile.mkdtemp()
        initrd_dir = "%s/initrd" % tmpdir
        os.mkdir(initrd_dir)
        self._runcmd("cp %s %s/initrd.img.lzma" % (orig_file, tmpdir))
        self._runcmd("unlzma --stdout ../initrd.img.lzma | cpio -id",
                     title="Uncompressing initrd file", cwd=initrd_dir)
        with open("%s/.buildstamp" % initrd_dir, "w") as fp:
            print >> fp, """201309230102.%s
CES
3.1
FINAL=YES
http://bugs.centos.org/""" % self.arch
        self._runcmd("find . | cpio -o --format='newc' > ../initrd.img.new", cwd=initrd_dir)
        self._runcmd("lzma initrd.img.new", "Compressing new initrd file", cwd=tmpdir)
        self._runcmd("cp %s/initrd.img.new.lzma %s" % (tmpdir, orig_file),
                     "Moving new file")
        self._runcmd("rm -rf %s" % tmpdir)

        sysutils.print_info("Creating updates.img file")
        targetfile = "%s/images/updates.img" % self.iso_dir
        self._runcmd(
            "dd if=/dev/zero of=%s bs=1k count=1440" % targetfile
        )
        self._runcmd("mkfs.ext2 -F %s" % targetfile)
        tmpdir = tempfile.mkdtemp()
        self._runcmd("sudo mount -o loop %s %s" % (targetfile, tmpdir))
        self._runcmd("cp -r %s/kickstart/%s %s/kickstart" % (self.src_dir, self.args.flavor, tmpdir))
        self._runcmd("cp -r %s/anaconda/* %s" % (self.src_dir, tmpdir))
        time.sleep(0.1)
        self._runcmd("sudo umount %s" % tmpdir)
        self._runcmd("rm -r %s" % tmpdir)

        sysutils.print_info("Updating isolinux files")
        self._runcmd(
            "sudo cp -r %s/isolinux/* %s/isolinux" % (self.src_dir, self.iso_dir)
        )


class CES3_2Builder(ISOBuilder):

    @property
    def iso_packages_dir(self):
        return 'Packages'

    def make_installer(self):
        super(CES3_2Builder, self).make_installer()

        sysutils.print_info("Updating initrd.img file")
        orig_file = os.path.join(self.iso_dir, "isolinux/initrd.img")
        tmpdir = tempfile.mkdtemp()
        initrd_dir = "%s/initrd" % tmpdir
        os.mkdir(initrd_dir)
        self._runcmd("cp %s %s/initrd.img.lzma" % (orig_file, tmpdir))
        self._runcmd("unlzma --stdout ../initrd.img.lzma | cpio -id",
                     title="Uncompressing initrd file", cwd=initrd_dir)
        with open("%s/.buildstamp" % initrd_dir, "w") as fp:
            print >> fp, """201309230102.%s
CES
3.2
FINAL=YES
http://bugs.centos.org/""" % self.arch
        self._runcmd("find . | cpio -o --format='newc' > ../initrd.img.new", cwd=initrd_dir)
        self._runcmd("lzma initrd.img.new", "Compressing new initrd file", cwd=tmpdir)
        self._runcmd("cp %s/initrd.img.new.lzma %s" % (tmpdir, orig_file),
                     "Moving new file")
        self._runcmd("rm -rf %s" % tmpdir)

        sysutils.print_info("Creating updates.img file")
        targetfile = "%s/images/updates.img" % self.iso_dir
        self._runcmd(
            "dd if=/dev/zero of=%s bs=1k count=1440" % targetfile
        )
        self._runcmd("mkfs.ext2 -F %s" % targetfile)
        tmpdir = tempfile.mkdtemp()
        self._runcmd("sudo mount -o loop %s %s" % (targetfile, tmpdir))
        self._runcmd("cp -r %s/kickstart/%s %s/kickstart" % (self.src_dir, self.args.flavor, tmpdir))
        self._runcmd("cp -r %s/anaconda/* %s" % (self.src_dir, tmpdir))
        time.sleep(0.1)
        self._runcmd("sudo umount %s" % tmpdir)
        self._runcmd("rm -r %s" % tmpdir)

        sysutils.print_info("Updating isolinux files")
        self._runcmd(
            "sudo cp -r %s/isolinux/* %s/isolinux" % (self.src_dir, self.iso_dir)
        )

class CES3_3Builder(ISOBuilder):

    @property
    def iso_packages_dir(self):
        return 'Packages'

    def make_installer(self):
        super(CES3_3Builder, self).make_installer()

        sysutils.print_info("Updating initrd.img file")
        orig_file = os.path.join(self.iso_dir, "isolinux/initrd.img")
        tmpdir = tempfile.mkdtemp()
        initrd_dir = "%s/initrd" % tmpdir
        os.mkdir(initrd_dir)
        self._runcmd("cp %s %s/initrd.img.lzma" % (orig_file, tmpdir))
        self._runcmd("unlzma --stdout ../initrd.img.lzma | cpio -id",
                     title="Uncompressing initrd file", cwd=initrd_dir)
        with open("%s/.buildstamp" % initrd_dir, "w") as fp:
            print >> fp, """201309230102.%s
CES
3.3
FINAL=YES
http://bugs.centos.org/""" % self.arch
        self._runcmd("find . | cpio -o --format='newc' > ../initrd.img.new", cwd=initrd_dir)
        self._runcmd("lzma initrd.img.new", "Compressing new initrd file", cwd=tmpdir)
        self._runcmd("cp %s/initrd.img.new.lzma %s" % (tmpdir, orig_file),
                     "Moving new file")
        self._runcmd("rm -rf %s" % tmpdir)

        sysutils.print_info("Creating updates.img file")
        targetfile = "%s/images/updates.img" % self.iso_dir
        self._runcmd(
            "dd if=/dev/zero of=%s bs=1k count=1440" % targetfile
        )
        self._runcmd("mkfs.ext2 -F %s" % targetfile)
        tmpdir = tempfile.mkdtemp()
        self._runcmd("sudo mount -o loop %s %s" % (targetfile, tmpdir))
        self._runcmd("sudo cp -r %s/kickstart/%s %s/kickstart" % (self.src_dir, self.args.flavor, tmpdir))
        self._runcmd("sudo cp -r %s/anaconda/* %s" % (self.src_dir, tmpdir))
        time.sleep(0.1)
        self._runcmd("sudo umount %s" % tmpdir)
        self._runcmd("rm -r %s" % tmpdir)

        sysutils.print_info("Updating isolinux files")
        self._runcmd(
            "sudo cp -r %s/isolinux/* %s/isolinux" % (self.src_dir, self.iso_dir)
        )

class CES3_4Builder(ISOBuilder):

    @property
    def iso_packages_dir(self):
        return 'Packages'

    def make_installer(self):
        super(CES3_4Builder, self).make_installer()

        sysutils.print_info("Updating initrd.img file")
        orig_file = os.path.join(self.iso_dir, "isolinux/initrd.img")
        tmpdir = tempfile.mkdtemp()
        initrd_dir = "%s/initrd" % tmpdir
        os.mkdir(initrd_dir)
        self._runcmd("cp %s %s/initrd.img.lzma" % (orig_file, tmpdir))
        self._runcmd("unlzma --stdout ../initrd.img.lzma | cpio -id",
                     title="Uncompressing initrd file", cwd=initrd_dir)
        with open("%s/.buildstamp" % initrd_dir, "w") as fp:
            print >> fp, """201309230102.%s
CES
3.4
FINAL=YES
http://bugs.centos.org/""" % self.arch
        self._runcmd("find . | cpio -o --format='newc' > ../initrd.img.new", cwd=initrd_dir)
        self._runcmd("lzma initrd.img.new", "Compressing new initrd file", cwd=tmpdir)
        self._runcmd("cp %s/initrd.img.new.lzma %s" % (tmpdir, orig_file),
                     "Moving new file")
        self._runcmd("rm -rf %s" % tmpdir)

        sysutils.print_info("Creating updates.img file")
        targetfile = "%s/images/updates.img" % self.iso_dir
        self._runcmd(
            "dd if=/dev/zero of=%s bs=1k count=1440" % targetfile
        )
        self._runcmd("mkfs.ext2 -F %s" % targetfile)
        tmpdir = tempfile.mkdtemp()
        self._runcmd("sudo mount -o loop %s %s" % (targetfile, tmpdir))
        self._runcmd("sudo cp -r %s/kickstart/%s %s/kickstart" % (self.src_dir, self.args.flavor, tmpdir))
        self._runcmd("sudo cp -r %s/anaconda/* %s" % (self.src_dir, tmpdir))
        time.sleep(0.1)
        self._runcmd("sudo umount %s" % tmpdir)
        self._runcmd("rm -r %s" % tmpdir)

        sysutils.print_info("Updating isolinux files")
        self._runcmd(
            "sudo cp -r %s/isolinux/* %s/isolinux" % (self.src_dir, self.iso_dir)
        )


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=u"Construction d'une image ISO")
    parser.add_argument("--bdir", default="build",
                        help=u"Répertoire de travail")
    parser.add_argument("--mirror", action="store_true", default=False,
                        help=u"Récupérer les paquets depuis Internet")
    parser.add_argument("--installer", action="store_true", default=False,
                        help=u"Reconstruit l'installeur depuis Internet")
    parser.add_argument("--arch", default="amd64",
                        help=u"L'architecture matérielle utilisée")
    parser.add_argument("--verbose", action="store_true",
                        help=u"Activer des traces plus verbeuses")
    parser.add_argument("--version", default="2",
                        help=u"Version majeure de CES à construire (2 ou 3)")
    parser.add_argument("--flavor", default="standard",
                        help=u"Saveur de CES à construire (standard, essentials ou advanced)")
    parser.add_argument("--category", default=None,
                        help=u"Catégorie à générer autre que stable (testing ou unstable)")
    args = parser.parse_args()

    if not args.version in ['2', '3', '3.1', '3.2', '3.3', '3.4']:
        sysutils.print_error(u'Version de CES inconnue')
        sys.exit(1)
    if not args.flavor in ['standard', 'essentials', 'advanced']:
        sysutils.print_error(u'Saveur de CES inconnue')
        sys.exit(1)
    if args.category is not None and not args.category in ['testing', 'unstable']:
        sysutils.print_error(u'Catégorie inconnue')
        sys.exit(1)

    builder = globals()['CES%sBuilder' % args.version.replace('.', '_')]
    builder(args)
