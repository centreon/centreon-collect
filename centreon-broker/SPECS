
          ------------------------------------------------------------

                                Centreon-Broker

          ------------------------------------------------------------


1 Introduction
--------------

The goal of Centreon-Broker is to store configuration and event data from
Nagios instances in one or more databases, as NDOUTILS do, but in a more
optimized way. Currently Centreon-Broker only provides a ndo2db replacement
called cb2db which has many features the original daemon lacks, like :

  - support of multiple DBMS (like MySQL, PostgreSQL and Oracle) (only MySQL
    support is fully implemented yet)
  - simultaneous output in multiple database server

Also cb2db is more optimized. According to our first benchmarks, cb2db have a
smaller network footprint and is roughly 60 times faster than ndo2db (which
seems a lot, I doubt that this is really the case).


2 Overall
---------

For now, Centreon-Broker still uses ndomod as event broker and globally works
like ndo2db. So basically, cb2db listens on a socket, waiting for new ndomod
clients to connect, generates events which are later processed and pushed in
one or more databases.


                       ______________
                      /              \
                      |   Network    |    Listen on a socket (default 5668)
                      |   Acceptor   |    waiting for new clients.
                      \______________/

                         |   |
                             |
           - - - - - - - '   |  Accepts new client connections.
          |                  |
                             V
       ___V___         ______________
      |Network|       /              \    Each NetworkInput object represents
      | Input |       |   Network    |    a client connection. Every connection
       -------        |    Input     |    is separatly handled in its own
          |           \______________/    thread.

          |                  |
                             |
          |                  |  Generates events.
           - - - - - - - -   |
                          V   V
                       ______________
                      /              \    Then Events are generated. Events can
                      |    Events    |    be all kind of Nagios events (host
                      |              |    definition, service status, ...)
                      \______________/

                         |   |
                             |
           - - - - - - - '   |  Are processed.
          |                  |
                             V
       ___V____        ______________
      |Database|      /              \
       --------       |   Database   |    Finally events are processed and
                      |              |    pushed in database(s).
                      \______________/


3 Network
---------

As you can see in the schema above, cb2db can accept multiple Nagios instances
connections. Also, as soon as we will start to implement the ndomod part of
Centreon-Broker, we will likely add the following features :

  - IPv6 socket
  - Unix domain socket
  - multiple listening sockets

  3.1 TLS
  -------

cb2db support TLSv1 sockets, to ensure proper client authentication, as well as
encrypted event flow (for more information on TLS, please refer to
http://en.wikipedia.org/wiki/Transport_Layer_Security). To make TLS work in
CentreonBroker, you need at least three files :

  - one containing your public key (`tls_certificate` config file parameter)
  - one containing your private key (`tls_key config` file parameter)
  - one containing a Diffie-Hellman parameters (`tls_dh512` parameter)

Optionnally you can also have a Certificate Authority (CA) public key if you
want to provide authentication (`tls_ca` config file parameter).

If your are not familiar with certificate generation and want to provide only
encrypted event flow, type the following commands :

# Generate the private key (private.key)
 $> openssl genrsa -out private.key 1024
# Generate the public key from the private key (certificate.pem)
 $> openssl req -new -x509 -key private.key -out certificate.pem
# Generate Diffie-Hellman parameters (dh512.pem)
 $> openssl dhparam -out dh512.pem 512

If you want to authenticate clients, you need a private key (see above to see
how to generate such a key). You can then sign client certificates using the
generated server certificate like this :

# Generate a Certificate Signing Request
 $> openssl req -new -key client.key -out client.csr
# Sign the CSR using the server certificate
 $> openssl x509 -req -in client.csr -CA certificate.pem -CAkey private.key
 -set_serial 01 -out client.pem
# Discard CSR
 $> rm client.csr


4 Events
--------

cb2db does not fully support the integral list of Nagios events, but the main
ones are :

  - NDO_API_HOSTDEFINITION
  - NDO_API_HOSTSTATUSDATA
  - NDO_API_SERVICEDEFINITION
  - NDO_API_SERVICESTATUSDATA

More will come soon.


5 Configuration file
--------------------

To start, a cb2db instance needs a configuration file supplied as its first
argument. It supports both input and output definition on the following form :

input
{
	parameter1=value1
	parameter2=value2
}

output
{
	parameter1=value1
	parameter2=value2
}

 5.1 Input parameters
 --------------------

port                Port number on which we should listen.
tls_ca              If you want to provide client authentication, set this to
                    the filename of the CA's certificate who signed clients'
                    certificates.
tls_certificate     If you want to provide TLS support on socket, set this
                    parameter to the filename of the public key.
tls_dh512           This file should contain Diffie-Hellman parameters. See 3.1
                    if you don't know how to generate such a file.
tls_key             If you want to provide TLS support on socket, set this
                    parameter to the filename of the private key.
type                Can only be 'socket', as only such inputs are supported.

 5.2 Output parameters
 ---------------------

db                  DB name.
host                DB server host.
password            DB password used to authenticate.
prefix              Prefix used on each table name (not yet used).
type                Only 'db' is currently supported.
user                DB user name used to authenticate.


6 Output
--------

Right now, only database output is supported but we plan to add file output
too. This will help for debugging purposes, backlog in case of database failure
or just because you want plain-text output :-)

 6.1 Database
 ------------

MySQL is currently the only DBMS supported and implemented (but PostgreSQL
support has been started). The current implementation makes use of a nice
features supported by modern DBMS : prepared statements. I won't go in details
of all advantages that prepared statements have (for this you have Google) but
note that prepared statements will help us reduce network footprint as well as
DB server load.
