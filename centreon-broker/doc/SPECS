
          ------------------------------------------------------------

                                Centreon Broker

          ------------------------------------------------------------


1 Introduction
--------------

The goal of Centreon Broker is to store configuration and event data from
Nagios instances in one or more databases, as NDOUtils do, but in a more
optimized way. Currently Centreon Broker is provided in two forms : either a
standalone daemon or a Nagios plugin.


2 Overall
---------

Basically, cb2db listens on a socket, waiting for new clients to connect,
generates events which are later processed and pushed in one or more databases.


                       ______________
                      /              \
                      |    Client    |    Listen on a socket (default 5668)
                      |   Acceptor   |    waiting for new clients.
                      \______________/

                         |   |
                             |
           - - - - - - - '   |  Accepts new client connections.
          |                  |
                             V
       ___V___         ______________
      |Network|       /              \    Each Network Input object represents
      | Input |       |   Network    |    a client connection. Every connection
       -------        |    Input     |    is separatly handled in its own
          |           \______________/    thread.

          |                  |
                             |
          |                  |  Generates events.
           - - - - - - - -   |
                          V   V
                       ______________
                      /              \    Then Events are generated. Events can
                      |    Events    |    be all kind of Nagios events (host
                      |              |    definition, service status, ...)
                      \______________/

                         |   |
                             |
           - - - - - - - '   |  Are processed.
          |                  |
                             V
       ___V____        ______________
      |Database|      /              \
       --------       |   Database   |    Finally events are processed and
                      |              |    pushed in database(s).
                      \______________/


3 Network
---------

As you can see in the schema above, Centreon Broker can accept multiple Nagios
instances connections. These can be of different kinds : IPv4, IPv6 or Unix,
all of them with or without TLS.

  3.1 TLS
  -------

Centreon Broker support TLSv1 sockets, to ensure proper client authentication,
as well as encrypted event flow (for more information on TLS, please refer to
http://en.wikipedia.org/wiki/Transport_Layer_Security). To make TLS work in
Centreon Broker, you need at least two files :

  - one containing your public key (`cert` config file parameter)
  - one containing your private key (`key` config file parameter)

Optionnally you can also have a Certificate Authority (CA) public key if you
want to provide authentication (`ca` config file parameter).

If your are not familiar with certificate generation and want to provide only
encrypted event flow, type the following commands :

# Generate the private key (private.key)
 $> openssl genrsa -out private.key 1024
# Generate the public key from the private key (certificate.pem)
 $> openssl req -new -x509 -key private.key -out certificate.pem

If you want to authenticate clients, you need a private key (see above to see
how to generate such a key). You can then sign client certificates using the
generated server certificate like this :

# Generate a Certificate Signing Request
 $> openssl req -new -key client.key -out client.csr
# Sign the CSR using the server certificate
 $> openssl x509 -req -in client.csr -CA certificate.pem -CAkey private.key
 -set_serial 01 -out client.pem
# Discard CSR
 $> rm client.csr


4 Events
--------

Centreon Broker does not fully support the integral list of Nagios events, but
most of them are :

  - acknowledgements
  - comments
  - downtimes
  - hosts
  - host checks
  - host dependencies
  - host groups
  - host group members
  - host parents
  - host status
  - logs
  - program status
  - services
  - service dependencies
  - service groups
  - service group members
  - service status


5 Configuration file
--------------------

To start, a Centreon Broker instance needs a configuration file supplied as its
first argument. It supports both input and output definition on the following
form :

input
{
	parameter1=value1
	parameter2=value2
}

output
{
	parameter1=value1
	parameter2=value2
}

You can also specify how to log Centreon Broker's logs (file, syslog, ...)
using the same syntax.

 5.1 Input parameters
 --------------------

ca                  If you want to provide client authentication, set this to
                    the filename of the CA's certificate who signed clients'
                    certificates.
cert                If you want to provide TLS support on socket, set this
                    parameter to the filename of the public key.
compress            When using TLS, specify whether or not the data stream
                    should be compressed as well as encrypted.
interface           In case that CentreonBroker should listen on a specific
                    interface, give the IP address of this interface in this
                    parameter.
key                 If you want to provide TLS support on socket, set this
                    parameter to the filename of the private key.
port                Port number on which we should listen.
socket              For an input of type 'unix', specify the path of the
                    socket.
tls                 Whether or not TLS should be activated on this input.
                    Default is 'no'.
type                Can be 'ip' (equal to 'ipv4'), 'ipv6' or 'unix'. This
                    parameter is mandatory.

 5.2 Logging parameters
 ----------------------

To define a log output, simply defines a `log` block. The following variables
are available :

flags               Determines what kind of information should be sent. You can
                    OR the following macros : DEBUG, ERROR and INFO.
path                For a log type `file`, specify the file on which data shall
                    be sent
type                Can be 'file', 'stderr', 'stdout' or 'syslog'.

 5.3 Output parameters
 ---------------------

db                  DB name.
dumpfile            Base path of the file to use to dump events. A number will
                    be appended to this base.
host                DB server host.
password            DB password used to authenticate.
type                Can be 'mysql', 'oracle' or 'postgresql'.
user                DB user name used to authenticate.


6 Output
--------

MySQL is currently the only DBMS supported and implemented (but PostgreSQL
support has been started). The current implementation makes use of a nice
features supported by modern DBMS : prepared statements. I won't go in details
of all advantages that prepared statements have (for this you have Google) but
note that prepared statements will help us reduce network footprint as well as
DB server load.
