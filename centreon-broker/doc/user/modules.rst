.. _user_modules:

********
 Modules
********

NEB
===

The NEB module is required if monitoring events generated by a
monitoring engine (Centreon Engine, Nagios, Icinga, ...) are
transmitted by this instance of Centreon Broker. No special
configuration is required, the module just need to be loaded
through the global *module_directory* directive.

File
====

As its name suggests, the file module is used to read from or write to
files.

================== ====
**Type**           file
**Layer(s)**       1-3
**Work on input**  Yes
**Work on output** Yes
================== ====

Configuration
-------------

==== =================
Tag  Description
==== =================
path Path to the file.
==== =================

Example
-------

::

  <input>
    <type>file</type>
    <path>/var/lib/centreon/broker.file</path>
    <protocol>ndo</protocol>
  </input>

Local
=====

The local module allow local domain (a.k.a. Unix domain) socket
creation. Sockets can be created either as clients (type
*local_client*) or server (type *local_server*).

================== ============================
**Type**           local_client or local_server
**Layer(s)**       1-3
**Work on input**  Yes
**Work on output** Yes
================== ============================

Configuration
-------------

==== =========================
Tag  Description
==== =========================
path Path of the local socket.
==== =========================

Example
-------

::

  <output>
    <type>local_client</type>
    <path>/var/lib/centreon/broker.sock</path>
    <protocol>ndo</protocol>
  </output>

::

  <output>
    <type>local_server</type>
    <path>/var/lib/centreon/broker.sock</path>
    <protocol>ndo</protocol>
  </output>

.. _user_modules_rrd:

RRD
===

The RRD module is used to create RRD graphs. It fetches events
generated by storage output and directly handle them. It was designed to
be used with Centreon and replace the Centstorage software. Its type in
the configuration should be rrd.

================== ===
**Type**           rrd
**Layer(s)**       1-7
**Work on input**  No
**Work on output** Yes
================== ===

Description
-----------

Notice that an RRD endpoint receive data to insert in RRD graphs from
:ref:`a storage endpoint <user_modules_storage>`. RRD endpoints only
manage physical graph creation, update and deletion. The whole
intelligence on what to update and when is not done here.

Configuration
-------------

============ ===========================================================
Tag          Description
============ ===========================================================
metrics_path Path to where the metrics graphs should be written.
status_path  Path to where the status graphs should be written.
path         If using *rrdcached* software with local socket connection,
             path to this socket.
port         If using *rrdcached* software with a network connection,
             port on which rrdcached listens. The RRD module onlys
             supports connection with localhost *rrdcached*.
============ ===========================================================

Example
-------

::

  <output>
    <type>rrd</type>
    <metrics_path>/var/lib/centreon/metrics</metrics_path>
    <status_path>/var/lib/centreon/status</status_path>
  </output>

rrdcached
---------

In large setups, the number of graphs handled by Centreon Broker can
become very important and generate I/O massively. The *rrdcached*
software was created to circumvent this issue as explained in its
.. _man page: http://oss.oetiker.ch/rrdtool/doc/rrdcached.en.html .

Due to current *rrdcached* limitations, Centreon Broker can only use it
when local. This explains why you do not have any configuration tag for
the *rrdcached* host.

SQL
===

Insert data in Centreon Broker database.

================== ===
**Type**           sql
**Layer(s)**       1-7
**Work on input**  No
**Work on output** Yes
================== ===

Configuration
-------------

=========== ======================================================
Tag         Description
=========== ======================================================
db_type     Type of the database (mysql, postgresql, oracle, ...).
db_host     Database host.
db_port     Database port.
db_user     Database user.
db_password Password associated with *db_user*.
db_name     Database name.
=========== ======================================================

Example
-------

::

  <output>
    <type>sql</type>
    <db_type>mysql</db_type>
    <db_host>localhost</db_host>
    <db_port>3306</db_port>
    <db_user>centreon</db_user>
    <db_password>noertnec</db_password>
    <db_name>centreon_storage</db_name>
  </output>

.. _user_modules_storage:

Storage
=======

The storage module extract performance data from check results and
insert them in a database. It also generate events for use by the
:ref:`modules rrd <user_modules_rrd>`.

================== =======
**Type**           storage
**Layer(s)**       1-7
**Work on input**  No
**Work on output** Yes
================== =======

Configuration
-------------

=========== ============================================================
Tag         Description
=========== ============================================================
interval    Monitoring engine base interval (usually 60 seconds).
length RRD  file length in seconds (ie. how much data your RRD file will
            contain). For 180 days (recommanded), 15552000.
db_type     Database type. One of db2, ibase, mysql, oracle, odbc,
            postgresql, sqlite, tds.
db_host     Database host.
db_port     Database port.
db_user     Database user.
db_password Database password.
db_name     Database name.
=========== ============================================================

Example
-------

::

  <output>
    <type>storage</type>
    <interval>60</interval>
    <length>15552000</length>
    <db_type>oracle</db_type>
    <db_host>localhost</db_host>
    <db_port>1521</db_port>
    <db_user>centreon</db_user>
    <db_password>noertnec</db_password>
    <db_name>centreon_storage</db_name>
  </output>

TCP
===

Probably one of the most used module. Provides network connectivity.

================== ===
**Type**           tcp
**Layer(s)**       1-3
**Work on input**  Yes
**Work on output** Yes
================== ===

Configuration
-------------

============== =======================================================
Tag            Description
============== =======================================================
port           Port on which Centreon Broker should listen (if no host
               is defined) or connect to.
host           Host to connect to. To have a server connection, do not
               use this tag.
tls            Enable TLS protocol. It can either be used as anonymous
               (no public_cert nor private_key) or with appropriate
               settings (ca_certificate) used with certificate
               authentication.
private_key    Private key.
public_cert    Public certificate associated with private_key.
ca_certificate Trusted Certificate Authority certificate. If this
               parameter is set, the CAâ€™s certificate is used to
               authenticate client connections which are denied
               if the peer key could not be validated.
============== =======================================================

Example
-------

Input stream that waits for clients to connect on port 5668.

::

  <input>
    <type>tcp</type>
    <port>5668</port>
    <protocol>ndo</protocol>
  </input>

Output stream that connects on host remotehost.tld on port 5668.

::

  <output>
    <type>tcp</type>
    <host>remotehost.tld</host>
    <port>5668</port>
    <protocol>5668</protocol>
  </output>

NDO
===

NDO is currently the sole generic serialization layer that exists for
events. A serialization layer is required on some endpoints to reach the
7th layer (NDO is inserted at layer 7).

================== ===
**Type**           N/A
**Layer(s)**       7
**Work on input**  Yes
**Work on output** Yes
================== ===

Configuration
-------------

======== =====================
Tag      Description
======== =====================
protocol Must be set to *ndo*.
======== =====================

Example
-------

::

  <input>
    <type>tcp</tcp>
    <port>5668</port>
    <protocol>ndo</protocol>
  </input>

Compression
===========

The compression module uses the `zlib <http://www.zlib.org>`_
compression algorithm to reduce the size of data transmitted by Centreon
Broker. Typical compression ratio range from 2:1 to 5:1.

================== ===
**Type**           N/A
**Layer(s)**       6
**Work on input**  Yes
**Work on output** Yes
================== ===

Options
-------

The compression can be configured with the tags defined in the table
below.

================== ====================================================
Tag                Description
================== ====================================================
compression        Set it to 1 to enable compression. This is the sole
                   mandatory parameter.
compression_level  Level of compression from 0 (no compression) to 9
                   (best compression). Defaults to -1 which is zlib's
                   default compression level.
compression_buffer Size in bytes of the compression buffer. The biggest
                   the buffer is, the best is the compression. However
                   the latency increase along with the buffer size.
================== ====================================================

Example
-------

::

  <output>
    <type>tcp</type>
    <host>localhost</host>
    <port>5668</port>
    <compression>1</compression>
    <compression_level>4</compression_level>
    <compression_buffer>5000</compression_buffer>
  </output>
