.. _user_modules:

********
 Modules
********

NEB
===

The NEB module is required if monitoring events generated by a
monitoring engine (Centreon Engine, Nagios, Icinga, ...) are
transmitted by this instance of Centreon Broker. No special
configuration is required, the module just need to be loaded through
the global *module_directory* directive.

File
====

As its name suggests, the file module is used to read from or write to
files.

===================== ====
**Type**              file
**Layer(s)**          1-3
**Work on input**     Yes
**Work on output**    Yes
**Work on temporary** Yes
===================== ====

Configuration
-------------

======== ===========================================================
Tag      Description
======== ===========================================================
path     Path to the file.
max_size Maximum file size in bytes. If the limit is reached, Broker
         will go on with *path1*, then *path2*, ..., *pathN*.
======== ===========================================================

Example
-------

::

  <input>
    <type>file</type>
    <path>/var/lib/centreon/broker.file</path>
    <protocol>bbdo</protocol>
    <max_size>100000000</max_size> <!-- 100MB limit -->
  </input>

Local
=====

The local module allow local domain (a.k.a. Unix domain) socket
creation. Sockets can be created either as clients (type
*local_client*) or server (type *local_server*).

===================== ============================
**Type**              local_client or local_server
**Layer(s)**          1-3
**Work on input**     Yes
**Work on output**    Yes
**Work on temporary** No
===================== ============================

Configuration
-------------

==== =========================
Tag  Description
==== =========================
path Path of the local socket.
==== =========================

Example
-------

::

  <output>
    <type>local_client</type>
    <path>/var/lib/centreon/broker.sock</path>
    <protocol>bbdo</protocol>
  </output>

::

  <output>
    <type>local_server</type>
    <path>/var/lib/centreon/broker.sock</path>
    <protocol>bbdo</protocol>
  </output>


.. _user_modules_rrd:

RRD
===

The RRD module is used to create RRD graphs. It fetches events
generated by storage output and directly handle them. It was designed to
be used with Centreon and replace the Centstorage software. Its type in
the configuration should be rrd.

===================== ===
**Type**              rrd
**Layer(s)**          1-7
**Work on input**     No
**Work on output**    Yes
**Work on temporary** No
===================== ===

Description
-----------

Notice that an RRD endpoint receives data to insert in RRD graphs from
:ref:`a storage endpoint <user_modules_storage>`. RRD endpoints only
manage physical graph creation, update and deletion. The whole
intelligence on what to update and when is not done here.

Configuration
-------------

============= ===========================================================
Tag           Description
============= ===========================================================
metrics_path  Path to where the metrics graphs should be written.
status_path   Path to where the status graphs should be written.
path          If using *rrdcached* software with local socket connection,
              path to this socket.
port          If using *rrdcached* software with a network connection,
              port on which rrdcached listens. The RRD module onlys
              supports connection with localhost *rrdcached*.
write_metrics Enable or disable metrics graph creation and update.
              Enabled by default.
write_status  Enable or disable status graph creation and update. Enabled
              by default.
============= ===========================================================

Example
-------

::

  <output>
    <type>rrd</type>
    <metrics_path>/var/lib/centreon/metrics</metrics_path>
    <status_path>/var/lib/centreon/status</status_path>
  </output>

rrdcached
---------

In large setups, the number of graphs handled by Centreon Broker can
become very important and generate I/O massively. The *rrdcached*
software was created to circumvent this issue as explained in its
`man page <http://oss.oetiker.ch/rrdtool/doc/rrdcached.en.html>`_.

Due to current *rrdcached* limitations, Centreon Broker can only use it
when local. This explains why you do not have any configuration tag for
the *rrdcached* host.

SQL
===

Insert data in Centreon Broker database.

===================== ===
**Type**              sql
**Layer(s)**          1-7
**Work on input**     No
**Work on output**    Yes
**Work on temporary** No
===================== ===

Configuration
-------------

======================= ===============================================
Tag                     Description
======================= ===============================================
db_type                 Type of the database (mysql, postgresql,
                        oracle, ...).
db_host                 Database host.
db_port                 Database port.
db_user                 Database user.
db_password             Password associated with *db_user*.
db_name                 Database name.
queries_per_transaction Number of queries per transaction. Set to 1 or
                        below to disable transactions. Default to 1.
read_timeout            When using transactions, maximum time between
                        commits. This prevent database from not being
                        updated due to lack of queries to fill the
                        transaction.
check_replication       Useful when using DB replication. Enable or
                        disable replication check when connecting.
                        Default is enabled.
======================= ===============================================

Example
-------

::

  <output>
    <type>sql</type>
    <db_type>mysql</db_type>
    <db_host>localhost</db_host>
    <db_port>3306</db_port>
    <db_user>centreon</db_user>
    <db_password>noertnec</db_password>
    <db_name>centreon_storage</db_name>
  </output>


.. _user_modules_storage:

Storage
=======

The storage module extract performance data from check results and
insert them in a database. It also generate events for use by the
:ref:`modules rrd <user_modules_rrd>`.

===================== =======
**Type**              storage
**Layer(s)**          1-7
**Work on input**     No
**Work on output**    Yes
**Work on temporary** No
===================== =======

Configuration
-------------

======================= ===============================================
Tag                     Description
======================= ===============================================
interval                Monitoring engine base interval (usually 60
                        seconds).
length RRD              file length in seconds (ie. how much data your
                        RRD file will contain). For 180 days
                        (recommanded), 15552000.
db_type                 Database type. One of db2, ibase, mysql,
                        oracle, odbc, postgresql, sqlite, tds.
db_host                 Database host.
db_port                 Database port.
db_user                 Database user.
db_password             Database password.
db_name                 Database name.
queries_per_transaction Number of queries per transaction. Set to 1 or
                        below to disable transactions. Default to 1.
read_timeout            When using transactions, maximum time between
                        commits. This prevent database from not being
                        updated due to lack of queries to fill the
                        transaction.
check_replication       Useful when using DB replication. Enable or
                        disable replication check when connecting.
                        Default is enabled.
======================= ===============================================

Example
-------

::

  <output>
    <type>storage</type>
    <interval>60</interval>
    <length>15552000</length>
    <db_type>oracle</db_type>
    <db_host>localhost</db_host>
    <db_port>1521</db_port>
    <db_user>centreon</db_user>
    <db_password>noertnec</db_password>
    <db_name>centreon_storage</db_name>
  </output>

TCP
===

Probably one of the most used module. Provides network connectivity.

===================== ===
**Type**              tcp
**Layer(s)**          1-3
**Work on input**     Yes
**Work on output**    Yes
**Work on temporary** No
===================== ===

Configuration
-------------

============== =======================================================
Tag            Description
============== =======================================================
port           Port on which Centreon Broker should listen (if no host
               is defined) or connect to.
host           Host to connect to. To have a server connection, do not
               use this tag.
============== =======================================================

Example
-------

Input stream that waits for clients to connect on port 5668.

::

  <input>
    <type>tcp</type>
    <port>5668</port>
    <protocol>bbdo</protocol>
  </input>

Output stream that connects on host remotehost.tld on port 5668.

::

  <output>
    <type>tcp</type>
    <host>remotehost.tld</host>
    <port>5668</port>
    <protocol>5668</protocol>
  </output>

BBDO
====

BBDO is a serialization layer introduced by Centreon Broker. Its name
stands for *Broker Binary Data Objects*. This protocol was initially
introduced to improve performance over the NDO protocol which was using
data stringification. As its name suggests, BBDO is using raw binary
data transfer which drastically reduce its CPU footprint on busy
servers.

BBDO also supports feature negociation and can automatically encrypt
and/or compress transmitted data. No configuration is required, whereas
possible, to use compression and TLS modules.

===================== ===
**Type**              N/A
**Layer(s)**          7
**Work on input**     Yes
**Work on output**    Yes
**Work on temporary** No
===================== ===

Configuration
-------------

======== =====================
Tag      Description
======== =====================
protocol Must be set to *bbdo*.
======== =====================

NDO
===

NDO is the historical but deprecated serialization layer for events. A
serialization layer is required on some endpoints to reach the 7th layer
(NDO is inserted at layer 7).

===================== ===
**Type**              N/A
**Layer(s)**          7
**Work on input**     Yes
**Work on output**    Yes
**Work on temporary** No
===================== ===

Configuration
-------------

======== =====================
Tag      Description
======== =====================
protocol Must be set to *ndo*.
======== =====================

Example
-------

::

  <input>
    <type>tcp</tcp>
    <port>5668</port>
    <protocol>ndo</protocol>
  </input>


.. _user_modules_tls:

TLS
===

The TLS module is using `GNU TLS <http://www.gnutls.org>`_ to provide
encryption. Encryption can work with two modes : either with provided
certificates (and optionally authentication with a trusted CA) or by
using anonymous mode. With this last mode, TLS just have to be enabled
and encryption is configured by the software. It is this last mode that
is used by the BBDO protocol.

================== ===
**Type**           N/A
**Layer(s)**       5
**Work on input**  Yes
**Work on output** Yes
================== ===

Options
-------

============== =======================================================
Tag            Description
============== =======================================================
tls            Enable TLS protocol. It can either be used as anonymous
               (no public_cert nor private_key) or with appropriate
               settings (ca_certificate) used with certificate
               authentication.
private_key    Private key.
public_cert    Public certificate associated with private_key.
ca_certificate Trusted Certificate Authority certificate. If this
               parameter is set, the CA’s certificate is used to
               authenticate client connections which are denied
               if the peer key could not be validated.
============== =======================================================

Example
-------

Output stream connecting to remotehost.tld using public.cert and
private.key files.

::

  <output>
    <type>tcp</type>
    <host>remotehost.tld</host>
    <port>5669</port>
    <public_cert>public.cert</public_cert>
    <private_key>private.key</private_key>
    <protocol>bbdo</protocol>
  </output>

Input stream that authenticate clients using the trusted CA's
certificate (trusted_ca.cert).

::

  <input>
    <type>tcp</type>
    <port>5669</port>
    <public_cert>public.cert</public_cert>
    <private_key>private.key</private_key>
    <ca_certificate>trusted_ca.cert</ca_certificate>
    <protocol>bbdo</protocol>
  </input>


.. _user_modules_compression:

Compression
===========

The compression module uses the `zlib <http://www.zlib.org>`_
compression algorithm to reduce the size of data transmitted by Centreon
Broker. Typical compression ratio range from 2:1 to 5:1.

================== ===
**Type**           N/A
**Layer(s)**       6
**Work on input**  Yes
**Work on output** Yes
================== ===

Options
-------

The compression can be configured with the tags defined in the table
below.

================== ====================================================
Tag                Description
================== ====================================================
compression        Set it to 1 to enable compression. This is the sole
                   mandatory parameter.
compression_level  Level of compression from 0 (no compression) to 9
                   (best compression). Defaults to -1 which is zlib's
                   default compression level.
compression_buffer Size in bytes of the compression buffer. The biggest
                   the buffer is, the best is the compression. However
                   the latency increase along with the buffer size.
================== ====================================================

Example
-------

::

  <output>
    <type>tcp</type>
    <host>localhost</host>
    <port>5668</port>
    <compression>1</compression>
    <compression_level>4</compression_level>
    <compression_buffer>5000</compression_buffer>
  </output>


.. _user_modules_stats:

Statistics
==========

The statistics (stats) module was created to provide information about
the ongoing processing of Centreon Broker. You find various statistics
such as the number of events processed by second per input or output,
the number of queued events, connected peers, loaded modules, ...

This is a global module that do not apply to a specific endpoint.

===================== ====
**Type**              N/A
**Layer(s)**          N/A
**Work on input**     No
**Work on output**    No
**Work on temporary** No
===================== ====

Configuration
-------------

A *stats* node must be defined right under the root node of the XML
configuration file. This node can then contain the following tags.

==== =====================================================
Tag  Description
==== =====================================================
fifo The FIFO file from which you can read the statistics.
==== =====================================================

Example
-------

::

  <stats>
    <fifo>/var/lib/centreon-broker/central-module.stats</fifo>
  </stats>

You can then read the file with a simple *cat* command.

::

  $> cat /var/lib/centreon-broker/central-module.stats
  module /usr/share/centreon/lib/centreon-broker/50-tcp.so
  state=loaded

  module /usr/share/centreon/lib/centreon-broker/20-correlation.so
  state=loaded

  module /usr/share/centreon/lib/centreon-broker/10-neb.so
  state=loaded

  module /usr/share/centreon/lib/centreon-broker/60-compression.so
  state=loaded

  module /usr/share/centreon/lib/centreon-broker/20-storage.so
  state=loaded

  module /usr/share/centreon/lib/centreon-broker/80-sql.so
  state=loaded

  module /usr/share/centreon/lib/centreon-broker/70-rrd.so
  state=loaded

  module /usr/share/centreon/lib/centreon-broker/50-local.so
  state=loaded

  module /usr/share/centreon/lib/centreon-broker/80-ndo.so
  state=loaded

  module /usr/share/centreon/lib/centreon-broker/05-stats.so
  state=loaded

  module /usr/share/centreon/lib/centreon-broker/50-file.so
  state=loaded

  output poller-module
  state=connected
  queued_events=0
  last event at=1358863864
  event processing speed=160.3 events/s
  last connection attempt=1358862546
  last connection success=1358862546


.. _user_modules_correlation:

Correlation
===========

The correlation module provide basic correlation features to Centreon
Broker.

This is a global module that do not apply to a specific endpoint.

===================== ====
**Type**              N/A
**Layer(s)**          N/A
**Work on input**     No
**Work on output**    No
**Work on temporary** No
===================== ====

Configuration
-------------

A *correlation* node must be defined right under the root node of the
XML configuration file. This node can then contain the tags described
in the table below.

========= ==============================================================
Tag       Description
========= ==============================================================
file      The XML configuration file containing host and service
          definitions along with parenting and dependencies definitions.
retention The XML retention file. This file is written by Centreon
          Broker so that the correlation engine does not forget the
          current states of the hosts and services across Broker
          restarts.
========= ==============================================================

Example
-------

::

  <correlation>
    <file>/etc/centreon-broker/correlation.cfg</file>
    <retention>/var/lib/centreon-broker/correlation.sav</retention>
  </correlation>
