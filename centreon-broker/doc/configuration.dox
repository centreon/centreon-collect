/**
 *  @page configuration Configuration
 *
 *  Centreon Broker's configuration is based on XML. This format allows
 *  module configuration within the main configuration file without
 *  interfering with core options. The core options are listed in the
 *  table below. They must be specified right under the root node.
 *
 *  <table>
 *  <tr>
 *    <td><b>Option</b></td><td><b>Description</b></td><td><b>Example</b></td>
 *  </tr>
 *  <tr>
 *    <td>module_directory</td><td>Where Centreon Broker's modules are stored.</td><td>/var/lib/centreon/broker/</td>
 *  </tr>
 *  <tr>
 *    <td>instance</td><td>Only useful if Centreon Broker is loaded as a module of a monitoring engine (Centreon Engine, Nagios ...). Unique number that identify the poller.</td><td>42</td>
 *  </tr>
 *
 *  There are three more options which are specially handled by Centreon
 *  Broker. In fact they are treated as configuration blocks. These are
 *  the input, output and logger keywords. They are described in the
 *  following sections.
 *
 *
 *  @section logger Logger
 *
 *  A logger is an object that receives log messages generated by
 *  Centreon Broker. Here's an example of a full logger definition.
 *
 *  <logger>
 *    <type>file</type>
 *    <config>1</config>
 *    <debug>0</debug>
 *    <error>1</error>
 *    <info>1</info>
 *    <level>2</level>
 *    <name>/var/log/centreon/broker/cbd.log</name>
 *  </logger>
 *
 *  The list of available options for use within a logger block are
 *  defined in the table below.
 *
 *  <table>
 *  <tr>
 *    <td><b>Option</b></td><td><b>Description</b></td>
 *  </tr>
 *  <tr>
 *    <td>type</td><td>One of file, standard or syslog. File to write logs to a file, standard to write on the process' stdout or stderr and syslog to write on syslog.</td>
 *  </tr>
 *  <tr>
 *    <td>config</td><td>Enable or disable logging of config messages.</td>
 *  </tr>
 *  <tr>
 *    <td>debug</td><td>Enable or disable logging of debug messages.</td>
 *  </tr>
 *  <tr>
 *    <td>error</td><td>Enable or disable logging of error messages.</td>
 *  </tr>
 *  <tr>
 *    <td>info</td><td>Enable or disable logging of informational messages.</td>
 *  </tr>
 *  <tr>
 *    <td>level</td><td>Log verbosity. Range from 0 (no message) to 3 (highly detailed messages).</td>
 *  </tr>
 *  <tr>
 *    <td>name</td><td>For file loggers, path to the log file. For standard loggers, one of stdout or stderr.</td>
 *  </tr>
 *  </table>
 *
 *
 *  @section inout Input and Output
 *
 *  Input objects insert objects within the multiplexing cycle. Output
 *  objects receive such events and send them out. The necessary
 *  features to get events in or out of Centreon Broker are handled by
 *  modules (some of them are distributed along with Centreon Broker).
 *  They are usually a stack of so called "protocols", some of which are
 *  available only for input, only for output or both. Protocol level
 *  range from 1 to 7 like an OSI layer.
 *
 *  Input objects are defined using an input block. Output objects are
 *  defined using an output block. Either input or output blocks have a
 *  mandatory tag called @b type used to build the protocol stack
 *  associated with this endpoint.
 *
 *  @verbatim
 *  <?xml version="1.0" encoding="UTF-8" ?>
 *  <broker>
 *    <input>
 *      <type>ipv4</type>
 *      ...
 *    </input>
 *
 *    <output>
 *      <type>sql</type>
 *      ...
 *    </output>
 *  </broker>
 *  @endverbatim
 *
 *
 *  @section compression Compression Module
 *
 *  The compression module uses the @b zlib compression algorithm to
 *  reduce the size of data transmitted by Centreon Broker. The
 *  compression protocol can be inserted at layer 6 of the protocol
 *  stack. It works on both input and output endpoints.
 *
 *  The compression can be configured with the tags defined in the table
 *  below.
 *
 *  <table>
 *  <tr>
 *    <td><b>Tag</b></td><td><b>Description</b></td>
 *  </tr>
 *  <tr>
 *    <td>compression</td><td>Set it to 1 to enable compression. This is the sole mandatory parameter.</td>
 *  </tr>
 *  <tr>
 *    <td>compression_level</td><td>Level of compression from 0 (no compression) to 9 (best compression). Defaults to -1 which is zlib's default compression level.</td>
 *  </tr>
 *  <tr>
 *    <td>compression_buffer</td><td>Size in bytes of the compression buffer. The biggest the buffer is, the best is the compression. However the latency increase along with the buffer size.</td>
 *  </tr>
 *  </table>
 *
 *
 *  @section file File Module
 *
 *  As its name suggests, the file module is used to read from or write
 *  to files. It's type is @em file. A file handle layers from 1 to 3 of
 *  the protocol stack. Here are the configurable tags :
 *
 *  <table>
 *  <tr>
 *    <td><b>Tag</b></td><td><b>Description</b></td>
 *  </tr>
 *  <tr>
 *    <td>path</td><td>Path to the file.</td>
 *  </tr>
 *  </table>
 *
 *
 *  @section local Local Module
 *
 *  The local module allow local domain (a.k.a. Unix domain) socket
 *  creation. Sockets can be created either as clients (type
 *  @em local_client) or server (type @em local_server). They both
 *  handle protocol layers from 1 to 3.
 *
 *  <table>
 *  <tr>
 *    <td><b>Tag</b></td><td><b>Description</b></td>
 *  </tr>
 *  <tr>
 *    <td>path</td><td>Path of the local socket.</td>
 *  </tr>
 *  </table>
 *
 *
 *  @section ndo NDO Module
 *
 *  NDO is currently the sole generic serialization layer that exists
 *  for events. A serialization layer is required on some endpoints to
 *  reach the 7th layer (NDO is inserted at layer 7).
 *
 *  <table>
 *  <tr>
 *    <td><b>Tag</b></td><td><b>Description</b></td>
 *  </tr>
 *  <tr>
 *    <td>protocol</td><td>Must be set to @em ndo.</td
 *  </tr>
 *  </table>
 *
 *
 *  @section neb NEB Module
 *
 *  The neb module is required if monitoring events generated by a
 *  monitoring engine (Centreon Engine, Nagios, Icinga, ...) are
 *  transmitted by this instance of Centreon Broker. No special
 *  configuration is required, the module just need to be loaded through
 *  the global @em module_directory directive.
 *
 *
 *  @section rrd RRD Module
 *
 *  The RRD module is used to create RRD graphs. It fetches events
 *  generated by @em storage output and directly handle them. Therefore
 *  it handles layers from 1 to 7. It was designed to be used with
 *  Centreon and replace part of the Centstorage software. Its type in
 *  the configuration should be @em rrd. Here are its configuration
 *  options.
 *
 *  <table>
 *  <tr>
 *    <td><b>Tag</b></td><td><b>Description</b></td>
 *  </tr>
 *  <tr>
 *    <td>metrics_path</td><td>Path to where the metrics graphs should be written.</td>
 *  </tr>
 *  <tr>
 *    <td>status_path</td><td>Path to where the status graphs should be written.</td>
 *  </tr>
 *  <tr>
 *    <td>path</td><td>If using the @em rrdcached software with local socket connection, path to this socket.</td>
 *  </tr>
 *  <tr>
 *    <td>port</td><td>If using the @em rrdcached software with a network connection, port on which rrdcached listens. The RRD module onlys supports connection with localhost @em rrdcached.</td>
 *  </tr>
 *  </table>
 *
 *
 *  @section sql SQL Module
 *
 *  Insert data in Centreon Broker database. The module only work with
 *  output endpoints and handle all layers from 1 to 7. Its type is
 *  simply @em sql.
 *
 *  <table>
 *  <tr>
 *    <td><b>Tag</b></td><td><b>Description</b></td>
 *  </tr>
 *  <tr>
 *    <td>db_type</td><td>Type of the database (mysql, postgresql, oracle, ...).</td>
 *  </tr>
 *  <tr>
 *    <td>db_host</td><td>Database host.</td>
 *  </tr>
 *  <tr>
 *    <td>db_port</td><td>Database port.</td>
 *  </tr>
 *  <tr>
 *    <td>db_user</td><td>Database user.</td>
 *  </tr>
 *  <tr>
 *    <td>db_password</td><td>Password associated with @em db_user.</td>
 *  </tr>
 *  <tr>
 *    <td>db_name</td><td>Database name.</td>
 *  </tr>
 *  </table>
 *
 *
 *  @section storage Storage Module
 *
 *  The storage module extract performance data from check results and
 *  insert them in a database. As the SQL module, it handles all layers.
 *  Its type is @em storage and only works as output endpoint.
 *  Its options are the same as the SQL module with the following
 *  additions.
 *
 *  <table>
 *  <tr>
 *    <td><b>Tag</b></td><td><b>Description</b></td>
 *  </tr>
 *  <tr>
 *    <td>interval</td><td>Monitoring engine base interval (usually 60 seconds).</td>
 *  </tr>
 *  <tr>
 *    <td>length</td><td>RRD length in seconds.</td>
 *  </tr>
 *  </table>
 *
 * 
 *  @section tcp TCP Module
 *
 *  Probably one of the most used module. Provides network connectivity.
 *  It inserts itself between layers 1 and 3 and its type is @em tcp. It
 *  can work either as server (no @em host) or client.
 *
 *  <table>
 *  <tr>
 *    <td><b>Tag</b></td><td><b>Description</b></td>
 *  </tr>
 *  <tr>
 *    <td>port</td><td>Port on which Centreon Broker should listen (if no @em host is defined) or connect to.</td>
 *  </tr>
 *  <tr>
 *    <td>host</td><td>Host to connect to. To have a server connection, do not use this tag.</td>
 *  </tr>
 *  <tr>
 *    <td>tls</td><td>Enable TLS protocol. It can either be used as anonymous (no @em public_cert nor @em private_key) or with appropriate settings (@em ca_certificate) used with certificate authentication.</td>
 *  </tr>
 *  <tr>
 *    <td>private_key</td><td>Private key.</td>
 *  </tr>
 *  <tr>
 *    <td>public_cert</td><td>Public certificate associated with @em private_key.</td>
 *  </tr>
 *  <tr>
 *    <td>ca_certificate</td><td>Trusted Certificate Authority certificate. If this parameter is set, the CA's certificate is used to authenticate client connections which are denied if the peer key could not be validated.</td>
 *  </tr>
 *  </table>
 */
