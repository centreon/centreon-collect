/*
** Copyright 2014 Merethis
**
** This file is part of Centreon Broker.
**
** Centreon Broker is free software: you can redistribute it and/or
** modify it under the terms of the GNU General Public License version 2
** as published by the Free Software Foundation.
**
** Centreon Broker is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with Centreon Broker. If not, see
** <http://www.gnu.org/licenses/>.

*/

#include <ctime>
#include "com/centreon/broker/bam/bool_expression.hh"
#include "com/centreon/broker/bam/bool_status.hh"
#include "com/centreon/broker/bam/bool_value.hh"
#include "com/centreon/broker/bam/impact_values.hh"
#include "com/centreon/broker/logging/logging.hh"

using namespace com::centreon::broker::bam;

/**
 *  Default constructor.
 */
bool_expression::bool_expression()
  : _id(0),
    _impact_if(true) {}

/**
 *  Copy constructor.
 *
 *  @param[in] other  Object to copy.
 */
bool_expression::bool_expression(bool_expression const& other)
  : computable(other) {
  _internal_copy(other);
}

/**
 *  Destructor.
 */
bool_expression::~bool_expression() {}

/**
 *  Assignment operator.
 *
 *  @param[in] other  Object to copy.
 *
 *  @return This object.
 */
bool_expression& bool_expression::operator=(
                                    bool_expression const& other) {
  if (this != &other) {
    computable::operator=(other);
    _internal_copy(other);
  }
  return (*this);
}

/**
 *  Base boolean expression got updated.
 *
 *  @param[in]  child    Expression that got updated.
 *  @param[out] visitor  Receive events generated by this object.
 *
 *  @return True if the values of this object were modified.
 */
bool bool_expression::child_has_update(
                        computable* child,
                        io::stream* visitor) {
  // It is useless to maintain a cache of expression values in this
  // class, as the bool_* classes already cache most of them.
  if (child == _expression.data()) {
    // Logging.
    logging::debug(logging::low) << "BAM: boolean expression " << _id
      << " is getting notified of child update";

    // Generate status event.
    visit(visitor);
  }
  return (true);
}

/**
 *  Get the boolean expression state.
 *
 *  @return Either OK (0) or CRITICAL (2).
 */
short bool_expression::get_state() const {
  return ((_expression->value_hard() == _impact_if)
          ? 2
          : 0);
}

/**
 *  Set evaluable boolean expression.
 *
 *  @param[in] expression Boolean expression.
 */
void bool_expression::set_expression(
                        misc::shared_ptr<bool_value> const& expression) {
  _expression = expression;
  return ;
}

/**
 *  Set boolean expression ID.
 *
 *  @param[in] id  Boolean expression ID.
 */
void bool_expression::set_id(unsigned int id) {
  _id = id;
  return ;
}

/**
 *  Set whether we should impact if the expression is true or false.
 *
 *  @param[in] impact_if True if impact is applied if the expression is
 *                       true. False otherwise.
 */
void bool_expression::set_impact_if(bool impact_if) {
  _impact_if = impact_if;
  return ;
}

/**
 *  Visit boolean expression.
 *
 *  @param[out] visitor  Object that will receive status.
 */
void bool_expression::visit(io::stream* visitor) {
  if (visitor) {
    // Generate status events.
    bool hard_value(_expression->value_hard());
    {
      misc::shared_ptr<bool_status> b(new bool_status);
      b->bool_id = _id;
      b->state = hard_value;
      logging::debug(logging::low)
        << "BAM: generating status of boolean expression " << b->bool_id
        << " (state " << b->state << ")";
      visitor->write(b.staticCast<io::data>());
    }
  }
  return ;
}

/**
 *  Copy internal data members.
 *
 *  @param[in] right Object to copy.
 */
void bool_expression::_internal_copy(bool_expression const& right) {
  _expression = right._expression;
  _id = right._id;
  _impact_if = right._impact_if;
  return ;
}
