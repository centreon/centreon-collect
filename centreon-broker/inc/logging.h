/*
**  Copyright 2009 MERETHIS
**  This file is part of CentreonBroker.
**
**  CentreonBroker is free software: you can redistribute it and/or modify it
**  under the terms of the GNU General Public License as published by the Free
**  Software Foundation, either version 2 of the License, or (at your option)
**  any later version.
**
**  CentreonBroker is distributed in the hope that it will be useful, but
**  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
**  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
**  for more details.
**
**  You should have received a copy of the GNU General Public License along
**  with CentreonBroker.  If not, see <http://www.gnu.org/licenses/>.
**
**  For more information : contact@centreon.com
*/

#ifndef LOGGING_H_
# define LOGGING_H_

# include <fstream>
# include <list>
# include <string>
# include "concurrency/mutex.h"

namespace                 CentreonBroker
{
  /**
   *  \class Logging logging.h "logging.h"
   *  \brief Logging facility.
   *
   *  All messages generated by CentreonBroker are sent through this facility.
   *  Those messages are broadcasted to all configured streams. Each stream can
   *  receive only specific messages like informational (INFO), debug (DEBUG)
   *  or error (ERROR).
   */
  class                   Logging
  {
   public:
    enum                  MsgType
    {
      DEBUG = 1,
      ERROR = 2,
      INFO = 4
    };

   private:
    /**
     *  This small class represents an output file and manage its handle
     *  internally.
     */
    class                 OutputFile
    {
     private:
      void                InternalCopy(const Logging::OutputFile& output_file);
      void                RealOpen();

     public:
      std::string         filename;
      unsigned int        flags;
      std::ofstream       stream;
                          OutputFile();
                          OutputFile(const OutputFile& output_file);
                          ~OutputFile();
      OutputFile&         operator=(const OutputFile& output_file);
      void                Close();
      bool                Open(const std::string& filename,
                               unsigned int flags = DEBUG | ERROR | INFO);
    };

    Concurrency::Mutex    mutex_;
    std::list<OutputFile> outputs_;
    int                   stderr_flags_;
    int                   stdout_flags_;
    int                   syslog_flags_;
                          Logging(const Logging& logging);
    Logging&              operator=(const Logging& logging);
    void                  LogBase(const char* str, MsgType msg_type);

   public:
                          Logging();
                          ~Logging();
# ifndef NDEBUG
    void                  LogDebug(const char* str);
# endif /* !NDEBUG */
    void                  LogError(const char* str);
    void                  LogInFile(const char* filename, int log_flags);
    void                  LogInfo(const char* str);
    void                  LogInSyslog(int log_flags);
    void                  LogToStderr(int log_flags);
    void                  LogToStdout(int log_flags);
  };

  extern Logging          logging;
}

# ifndef NDEBUG
#  define LOGDEBUG(msg) (CentreonBroker::logging.LogDebug(msg))
# else
#  define LOGDEBUG(msg) ((void)msg)
# endif /* !NDEBUG */
# define LOGERROR(msg) (CentreonBroker::logging.LogError(msg))
# define LOGINFO(msg) (CentreonBroker::logging.LogInfo(msg))

#endif /* !LOGGING_H_ */
