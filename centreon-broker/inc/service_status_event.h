/*
** service_status_event.h for CentreonBroker in ./inc
** 
** Made by Matthieu Kermagoret <mkermagoret@merethis.com>
** 
** Copyright Merethis
** See LICENSE file for details.
** 
** Started on  05/11/09 Matthieu Kermagoret
** Last update 05/18/09 Matthieu Kermagoret
*/

#ifndef SERVICE_STATUS_EVENT_H_
# define SERVICE_STATUS_EVENT_H_

# include <string>
# include <sys/types.h>
# include "host_service_status_event.h"

namespace               CentreonBroker
{
  class                 EventSubscriber;

  /**
   *  The ServiceStatusEvent represents the corresponding event generated by
   *  Nagios. It has all fields specified in the NDO database schema.
   */
  class                 ServiceStatusEvent : public HostServiceStatusEvent
  {
   private:
    enum                String
    {
      HOST = 0,
      SERVICE,
      STRING_NB
    };
    enum                TimeT
    {
      LAST_TIME_CRITICAL = 0,
      LAST_TIME_OK,
      LAST_TIME_UNKNOWN,
      LAST_TIME_WARNING,
      TIMET_NB
    };
    std::string         strings_[STRING_NB];
    time_t              timets_[TIMET_NB];
    void                InternalCopy(const ServiceStatusEvent& sse);

   public:
                        ServiceStatusEvent();
                        ServiceStatusEvent(const ServiceStatusEvent& sse);
                        ~ServiceStatusEvent();
    ServiceStatusEvent& operator=(const ServiceStatusEvent& sse);
    int                 GetType() const throw ();
    // Getters
    const std::string&  GetHost() const throw ();
    time_t              GetLastTimeCritical() const throw ();
    time_t              GetLastTimeOk() const throw ();
    time_t              GetLastTimeUnknown() const throw ();
    time_t              GetLastTimeWarning() const throw ();
    const std::string&  GetService() const throw ();
    // Setters
    void                SetHost(const std::string& h);
    void                SetLastTimeCritical(time_t ltc) throw ();
    void                SetLastTimeOk(time_t lto) throw ();
    void                SetLastTimeUnknown(time_t ltu) throw ();
    void                SetLastTimeWarning(time_t ltw) throw ();
    void                SetService(const std::string& s);
  };
}

#endif /* !SERVICE_STATUS_EVENT_H_ */
