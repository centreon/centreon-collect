/*
**  Copyright 2009 MERETHIS
**  This file is part of CentreonBroker.
**
**  CentreonBroker is free software: you can redistribute it and/or modify it
**  under the terms of the GNU General Public License as published by the Free
**  Software Foundation, either version 2 of the License, or (at your option)
**  any later version.
**
**  CentreonBroker is distributed in the hope that it will be useful, but
**  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
**  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
**  for more details.
**
**  You should have received a copy of the GNU General Public License along
**  with CentreonBroker.  If not, see <http://www.gnu.org/licenses/>.
**
**  For more information : contact@centreon.com
*/

#ifndef HOST_STATUS_H_
# define HOST_STATUS_H_

# include "host_service_status.h"

namespace              CentreonBroker
{
  class                EventSubscriber;

  /**
   *  The HostStatusEvent represents the corresponding event generated by
   *  Nagios. It has all fields specified in the NDO database schema.
   */
  class                HostStatus : public HostServiceStatus
  {
   private:
    enum               TimeT
    {
      LAST_TIME_DOWN = 0,
      LAST_TIME_UNREACHABLE,
      LAST_TIME_UP,
      TIMET_NB
    };
    time_t             timets_[TIMET_NB];
    void               InternalCopy(const HostStatus& hse);

   public:
                       HostStatus();
                       HostStatus(const HostStatus& hse);
                       ~HostStatus();
    HostStatus&        operator=(const HostStatus& hse);
    // Getters
    time_t             GetLastTimeUp() const throw ();
    time_t             GetLastTimeDown() const throw ();
    time_t             GetLastTimeUnreachable() const throw ();
    int                GetType() const throw ();
    // Setters
    void               SetLastTimeUp(time_t ltu) throw ();
    void               SetLastTimeDown(time_t ltd) throw ();
    void               SetLastTimeUnreachable(time_t ltu) throw ();
  };
}

#endif /* !HOST_STATUS_H_ */
