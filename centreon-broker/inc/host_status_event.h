/*
** host_status_event.h for CentreonBroker in ./inc
** 
** Made by Matthieu Kermagoret <mkermagoret@merethis.com>
** 
** Copyright Merethis
** See LICENSE file for details.
** 
** Started on  05/07/09 Matthieu Kermagoret
** Last update 05/15/09 Matthieu Kermagoret
*/

#ifndef HOST_STATUS_EVENT_H_
# define HOST_STATUS_EVENT_H_

# include <string>
# include "status_event.h"

namespace              CentreonBroker
{
  class                EventSubscriber;

  /**
   *  The HostStatusEvent represents the corresponding event generated by
   *  Nagios. It has all fields specified in the NDO database schema.
   */
  class                HostStatusEvent : public StatusEvent
  {
   private:
    std::string        host;
    time_t             status_update_time;
    std::string        output;
    std::string        perfdata;
    short              current_state;
    short              has_been_checked;
    short              should_be_scheduled;
    short              current_check_attempt;
    short              max_check_attempts;
    time_t             last_check;
    time_t             next_check;
    short              check_type;
    time_t             last_state_change;
    time_t             last_hard_state_change;
    short              last_hard_state;
    time_t             last_time_up;
    time_t             last_time_down;
    time_t             last_time_unreachable;
    short              state_type;
    time_t             last_notification;
    time_t             next_notification;
    short              no_more_notifications;
    short              problem_has_been_acknowledged;
    short              acknowledgement_type;
    short              current_notification_number;
    short              passive_checks_enabled;
    short              active_checks_enabled;
    short              is_flapping;
    double             percent_state_change;
    double             latency;
    double             execution_time;
    short              scheduled_downtime_depth;
    short              obsess_over_host;
    int                modified_host_attributes;
    std::string        event_handler;
    std::string        check_command;
    double             normal_check_interval;
    double             retry_check_interval;
    int                check_timeperiod_object_id;

   public:
                       HostStatusEvent();
                       HostStatusEvent(const HostStatusEvent& hse);
                       ~HostStatusEvent();
    HostStatusEvent&   operator=(const HostStatusEvent& hse);
    // Getters
    int                GetType() const throw ();
    const std::string& GetHost() const throw ();
    time_t             GetStatusUpdateTime() const throw ();
    const std::string& GetOutput() const throw ();
    const std::string& GetPerfdata() const throw ();
    short              GetCurrentState() const throw ();
    short              GetHasBeenChecked() const throw ();
    short              GetShouldBeScheduled() const throw ();
    short              GetCurrentCheckAttempt() const throw ();
    short              GetMaxCheckAttempts() const throw ();
    time_t             GetLastCheck() const throw ();
    time_t             GetNextCheck() const throw ();
    short              GetCheckType() const throw ();
    time_t             GetLastStateChange() const throw ();
    time_t             GetLastHardStateChange() const throw ();
    short              GetLastHardState() const throw ();
    time_t             GetLastTimeUp() const throw ();
    time_t             GetLastTimeDown() const throw ();
    time_t             GetLastTimeUnreachable() const throw ();
    short              GetStateType() const throw ();
    time_t             GetLastNotification() const throw ();
    time_t             GetNextNotification() const throw ();
    short              GetNoMoreNotifications() const throw ();
    short              GetProblemHasBeenAcknowledged() const throw ();
    short              GetAcknowledgementType() const throw ();
    short              GetCurrentNotificationNumber() const throw ();
    short              GetPassiveChecksEnabled() const throw ();
    short              GetActiveChecksEnabled() const throw ();
    short              GetIsFlapping() const throw ();
    double             GetPercentStateChange() const throw ();
    double             GetLatency() const throw ();
    double             GetExecutionTime() const throw ();
    short              GetScheduledDowntimeDepth() const throw ();
    short              GetObsessOverHost() const throw ();
    int                GetModifiedHostAttributes() const throw ();
    const std::string& GetEventHandler() const throw ();
    const std::string& GetCheckCommand() const throw ();
    double             GetNormalCheckInterval() const throw ();
    double             GetRetryCheckInterval() const throw ();
    int                GetCheckTimeperiodObjectId() const throw ();
    // Setters
    void               SetHost(const std::string& host);
    void               SetStatusUpdateTime(time_t sut);
    void               SetOutput(const std::string& o);
    void               SetPerfdata(const std::string& p);
    void               SetCurrentState(short cs);
    void               SetHasBeenChecked(short hbc);
    void               SetShouldBeScheduled(short sbs);
    void               SetCurrentCheckAttempt(short cca);
    void               SetMaxCheckAttempts(short mca);
    void               SetLastCheck(time_t lc);
    void               SetNextCheck(time_t nc);
    void               SetCheckType(short ct);
    void               SetLastStateChange(time_t lsc);
    void               SetLastHardStateChange(time_t lhsc);
    void               SetLastHardState(short lhs);
    void               SetLastTimeUp(time_t ltu);
    void               SetLastTimeDown(time_t ltd);
    void               SetLastTimeUnreachable(time_t ltu);
    void               SetStateType(short st);
    void               SetLastNotification(time_t ln);
    void               SetNextNotification(time_t nn);
    void               SetNoMoreNotifications(short nmn);
    void               SetProblemHasBeenAcknowledged(short phba);
    void               SetAcknowledgementType(short at);
    void               SetCurrentNotificationNumber(short cnn);
    void               SetPassiveChecksEnabled(short pce);
    void               SetActiveChecksEnabled(short ace);
    void               SetIsFlapping(short i_f);
    void               SetPercentStateChange(double psc);
    void               SetLatency(double l);
    void               SetExecutionTime(double et);
    void               SetScheduledDowntimeDepth(short sdd);
    void               SetObsessOverHost(short ooh);
    void               SetModifiedHostAttributes(int mha);
    void               SetEventHandler(const std::string& eh);
    void               SetCheckCommand(const std::string& cc);
    void               SetNormalCheckInterval(double nci);
    void               SetRetryCheckInterval(double rci);
    void               SetCheckTimeperiodObjectId(int ctoi);
  };
}

#endif /* !HOST_STATUS_EVENT_H_ */
