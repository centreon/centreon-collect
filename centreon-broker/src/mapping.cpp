/*
** mapping.cpp for CentreonBroker in ./src
** 
** Made by Matthieu Kermagoret <mkermagoret@merethis.com>
** 
** Copyright Merethis
** See LICENSE file for details.
** 
** Started on  06/01/09 Matthieu Kermagoret
** Last update 06/04/09 Matthieu Kermagoret
*/

#include "host.h"
#include "host_status.h"
#include "mapping.h"

using namespace CentreonBroker;

const char* CentreonBroker::host_fields[] =
  {
    "acknowledgement_type",
    "action_url",
    "active_checks_enabled",
    "address",
    "alias",
    "check_command",
    "check_interval",
    "check_type",
    "current_check_attempt",
    "current_notification_number",
    "current_state",
    "display_name",
    "event_handler",
    "event_handler_enabled",
    "execution_time",
    "failure_prediction_enabled",
    "first_notification_delay",
    "flap_detection_enabled",
    "flap_detection_on_down",
    "flap_detection_on_unreachable",
    "flap_detection_on_up",
    "freshness_threshold",
    "has_been_checked",
    "have_2d_coords",
    "high_flap_threshold",
    "host_name",
    "icon_image",
    "icon_image_alt",
    "is_flapping",
    "last_check",
    "last_hard_state",
    "last_hard_state_change",
    "last_notification",
    "last_state_change",
    "last_time_down",
    "last_time_unreachable",
    "last_time_up",
    "latency",
    "low_flap_threshold",
    "max_check_attempts",
    "modified_host_attributes",
    "next_check",
    "next_notification",
    "no_more_notifications",
    "notes",
    "notes_url",
    "notification_interval",
    "notifications_enabled",
    "notify_on_down",
    "notify_on_downtime",
    "notify_on_flapping",
    "notify_on_recovery",
    "notify_on_unreachable",
    "obsess_over_host",
    "output",
    "passive_checks_enabled",
    "percent_state_change",
    "perfdata",
    "problem_has_been_acknowledged",
    "process_performance_data",
    "retain_nonstatus_information",
    "retain_status_information",
    "retry_interval",
    "scheduled_downtime_depth",
    "should_be_scheduled",
    "stalk_on_down",
    "stalk_on_unreachable",
    "stalk_on_up",
    "state_type",
    "status_update_time",
    "statusmap_image",
    "vrml_image",
    "x_2d",
    "y_2d",
    NULL
  };

FieldGetter<Host> CentreonBroker::host_getters[] =
  {
    &Host::GetAcknowledgementType,
    &Host::GetActionUrl,
    &Host::GetActiveChecksEnabled,
    &Host::GetAddress,
    &Host::GetAlias,
    &Host::GetCheckCommand,
    &Host::GetCheckInterval,
    &Host::GetCheckType,
    &Host::GetCurrentCheckAttempt,
    &Host::GetCurrentNotificationNumber,
    &Host::GetCurrentState,
    &Host::GetDisplayName,
    &Host::GetEventHandler,
    &Host::GetEventHandlerEnabled,
    &Host::GetExecutionTime,
    &Host::GetFailurePredictionEnabled,
    &Host::GetFirstNotificationDelay,
    &Host::GetFlapDetectionEnabled,
    &Host::GetFlapDetectionOnDown,
    &Host::GetFlapDetectionOnUnreachable,
    &Host::GetFlapDetectionOnUp,
    &Host::GetFreshnessThreshold,
    &Host::GetHasBeenChecked,
    &Host::GetHave2DCoords,
    &Host::GetHighFlapThreshold,
    &Host::GetHostName,
    &Host::GetIconImage,
    &Host::GetIconImageAlt,
    &Host::GetIsFlapping,
    &Host::GetLastCheck,
    &Host::GetLastHardState,
    &Host::GetLastHardStateChange,
    &Host::GetLastNotification,
    &Host::GetLastStateChange,
    &Host::GetLastTimeDown,
    &Host::GetLastTimeUnreachable,
    &Host::GetLastTimeUp,
    &Host::GetLatency,
    &Host::GetLowFlapThreshold,
    &Host::GetMaxCheckAttempts,
    &Host::GetModifiedAttributes,
    &Host::GetNextCheck,
    &Host::GetNextNotification,
    &Host::GetNoMoreNotifications,
    &Host::GetNotes,
    &Host::GetNotesUrl,
    &Host::GetNotificationInterval,
    &Host::GetNotificationsEnabled,
    &Host::GetNotifyOnDown,
    &Host::GetNotifyOnDowntime,
    &Host::GetNotifyOnFlapping,
    &Host::GetNotifyOnRecovery,
    &Host::GetNotifyOnUnreachable,
    &Host::GetObsessOver,
    &Host::GetOutput,
    &Host::GetPassiveChecksEnabled,
    &Host::GetPercentStateChange,
    &Host::GetPerfdata,
    &Host::GetProblemHasBeenAcknowledged,
    &Host::GetProcessPerformanceData,
    &Host::GetRetainNonstatusInformation,
    &Host::GetRetainStatusInformation,
    &Host::GetRetryInterval,
    &Host::GetScheduledDowntimeDepth,
    &Host::GetShouldBeScheduled,
    &Host::GetStalkOnDown,
    &Host::GetStalkOnUnreachable,
    &Host::GetStalkOnUp,
    &Host::GetStateType,
    &Host::GetStatusUpdateTime,
    &Host::GetStatusmapImage,
    &Host::GetVrmlImage,
    &Host::GetX2D,
    &Host::GetY2D,
    0
  };

static_assert(sizeof(host_fields) / sizeof(*host_fields)
              == sizeof(host_getters) / sizeof(*host_getters),
              "Invalid Host object-relational mapping");

const char* CentreonBroker::host_status_fields[] =
  {
    "acknowledgement_type",
    "active_checks_enabled",
    "check_command",
    "check_interval",
    "check_type",
    "current_check_attempt",
    "current_notification_number",
    "current_state",
    "event_handler",
    "event_handler_enabled",
    "execution_time",
    "failure_prediction_enabled",
    "flap_detection_enabled",
    "has_been_checked",
    "is_flapping",
    "last_check",
    "last_hard_state",
    "last_hard_state_change",
    "last_notification",
    "last_state_change",
    "last_time_down",
    "last_time_unreachable",
    "last_time_up",
    "latency",
    "max_check_attempts",
    "modified_host_attributes",
    "next_check",
    "next_notification",
    "no_more_notifications",
    "notifications_enabled",
    "obsess_over_host",
    "output",
    "passive_checks_enabled",
    "percent_state_change",
    "perfdata",
    "problem_has_been_acknowledged",
    "process_performance_data",
    "retry_interval",
    "scheduled_downtime_depth",
    "should_be_scheduled",
    "state_type",
    "status_update_time",
    NULL
  };

FieldGetter<HostStatus> CentreonBroker::host_status_getters[] =
  {
    &HostStatus::GetAcknowledgementType,
    &HostStatus::GetActiveChecksEnabled,
    &HostStatus::GetCheckCommand,
    &HostStatus::GetCheckInterval,
    &HostStatus::GetCheckType,
    &HostStatus::GetCurrentCheckAttempt,
    &HostStatus::GetCurrentNotificationNumber,
    &HostStatus::GetCurrentState,
    &HostStatus::GetEventHandler,
    &HostStatus::GetEventHandlerEnabled,
    &HostStatus::GetExecutionTime,
    &HostStatus::GetFailurePredictionEnabled,
    &HostStatus::GetFlapDetectionEnabled,
    &HostStatus::GetHasBeenChecked,
    &HostStatus::GetIsFlapping,
    &HostStatus::GetLastCheck,
    &HostStatus::GetLastHardState,
    &HostStatus::GetLastHardStateChange,
    &HostStatus::GetLastNotification,
    &HostStatus::GetLastStateChange,
    &HostStatus::GetLastTimeDown,
    &HostStatus::GetLastTimeUnreachable,
    &HostStatus::GetLastTimeUp,
    &HostStatus::GetLatency,
    &HostStatus::GetMaxCheckAttempts,
    &HostStatus::GetModifiedAttributes,
    &HostStatus::GetNextCheck,
    &HostStatus::GetNextNotification,
    &HostStatus::GetNoMoreNotifications,
    &HostStatus::GetNotificationsEnabled,
    &HostStatus::GetObsessOver,
    &HostStatus::GetOutput,
    &HostStatus::GetPassiveChecksEnabled,
    &HostStatus::GetPercentStateChange,
    &HostStatus::GetPerfdata,
    &HostStatus::GetProblemHasBeenAcknowledged,
    &HostStatus::GetProcessPerformanceData,
    &HostStatus::GetRetryInterval,
    &HostStatus::GetScheduledDowntimeDepth,
    &HostStatus::GetShouldBeScheduled,
    &HostStatus::GetStateType,
    &HostStatus::GetStatusUpdateTime,
    0
  };

static_assert(sizeof(host_status_fields) / sizeof(*host_status_fields)
              == sizeof(host_status_getters) / sizeof(*host_status_getters),
              "Invalid HostStatus object-relational mapping");

const char* CentreonBroker::host_status_uniques[] =
  {
    "host_name",
    NULL
  };

const char* CentreonBroker::program_status_fields[] =
  {
    "active_host_checks_enabled",
    "active_service_checks_enabled",
    "daemon_mode",
    "event_handler_enabled",
    "failure_prediction_enabled",
    "flap_detection_enabled",
    "global_host_event_handler",
    "global_service_event_handler",
    "is_currently_running",
    "last_command_check",
    "last_log_rotation",
    "modified_host_attributes",
    "modified_service_attributes",
    "notifications_enabled",
    "obsess_over_hosts",
    "obsess_over_services",
    "passive_host_checks_enabled",
    "passive_service_checks_enabled",
    "process_id",
    "process_performance_data",
    "program_end_time",
    "program_start_time",
    "status_update_time",
    NULL
  };

FieldGetter<ProgramStatus> CentreonBroker::program_status_getters[] =
  {
    &ProgramStatus::GetActiveHostChecksEnabled,
    &ProgramStatus::GetActiveServiceChecksEnabled,
    &ProgramStatus::GetDaemonMode,
    &ProgramStatus::GetEventHandlerEnabled,
    &ProgramStatus::GetFailurePredictionEnabled,
    &ProgramStatus::GetFlapDetectionEnabled,
    &ProgramStatus::GetGlobalHostEventHandler,
    &ProgramStatus::GetGlobalServiceEventHandler,
    &ProgramStatus::GetIsCurrentlyRunning,
    &ProgramStatus::GetLastCommandCheck,
    &ProgramStatus::GetLastLogRotation,
    &ProgramStatus::GetModifiedHostAttributes,
    &ProgramStatus::GetModifiedServiceAttributes,
    &ProgramStatus::GetNotificationsEnabled,
    &ProgramStatus::GetObsessOverHosts,
    &ProgramStatus::GetObsessOverServices,
    &ProgramStatus::GetPassiveHostChecksEnabled,
    &ProgramStatus::GetPassiveServiceChecksEnabled,
    &ProgramStatus::GetProcessId,
    &ProgramStatus::GetProcessPerformanceData,
    &ProgramStatus::GetProgramEndTime,
    &ProgramStatus::GetProgramStartTime,
    &ProgramStatus::GetStatusUpdateTime,
    NULL
  };

static_assert(sizeof(program_status_fields) / sizeof(*program_status_fields) ==
              sizeof(program_status_getters) / sizeof(*program_status_getters),
              "Invalid ProgramStatus object-relational mapping");

const char* CentreonBroker::program_status_uniques[] =
  {
    NULL
  };

const char* CentreonBroker::service_fields[] =
  {
    "acknowledgement_type",
    "action_url",
    "active_checks_enabled",
    "check_command",
    "check_interval",
    "check_type",
    "current_check_attempt",
    "current_notification_number",
    "current_state",
    "default_active_checks_enabled",
    "default_event_handler_enabled",
    "default_failure_prediction_enabled",
    "default_flap_detection_enabled",
    "default_notifications_enabled",
    "default_passive_checks_enabled",
    "default_process_performance_data",
    "display_name",
    "event_handler",
    "event_handler_enabled",
    "execution_time",
    "failure_prediction_enabled",
    "failure_prediction_options",
    "first_notification_delay",
    "flap_detection_enabled",
    "flap_detection_on_critical",
    "flap_detection_on_ok",
    "flap_detection_on_unknown",
    "flap_detection_on_warning",
    "freshness_checks_enabled",
    "freshness_threshold",
    "has_been_checked",
    "high_flap_threshold",
    "host_name",
    "icon_image",
    "icon_image_alt",
    "is_flapping",
    "is_volatile",
    "last_check",
    "last_hard_state",
    "last_hard_state_change",
    "last_notification",
    "last_state_change",
    "last_time_critical",
    "last_time_ok",
    "last_time_unknown",
    "last_time_warning",
    "latency",
    "low_flap_threshold",
    "max_check_attempts",
    "modified_service_attributes",
    "next_check",
    "next_notification",
    "no_more_notifications",
    "notes",
    "notes_url",
    "notification_interval",
    "notifications_enabled",
    "notify_on_critical",
    "notify_on_downtime",
    "notify_on_flapping",
    "notify_on_recovery",
    "notify_on_unknown",
    "notify_on_warning",
    "obsess_over_service",
    "output",
    "passive_checks_enabled",
    "percent_state_change",
    "perfdata",
    "problem_has_been_acknowledged",
    "process_performance_data",
    "retain_nonstatus_information",
    "retain_status_information",
    "retry_interval",
    "scheduled_downtime_depth",
    "service_description",
    "should_be_scheduled",
    "state_type",
    "status_update_time",
    NULL
  };

FieldGetter<Service> CentreonBroker::service_getters[] =
  {
    &Service::GetAcknowledgementType,
    &Service::GetActionUrl,
    &Service::GetActiveChecksEnabled,
    &Service::GetCheckCommand,
    &Service::GetCheckInterval,
    &Service::GetCheckType,
    &Service::GetCurrentCheckAttempt,
    &Service::GetCurrentNotificationNumber,
    &Service::GetCurrentState,
    &Service::GetDefaultActiveChecksEnabled,
    &Service::GetDefaultEventHandlerEnabled,
    &Service::GetDefaultFailurePredictionEnabled,
    &Service::GetDefaultFlapDetectionEnabled,
    &Service::GetDefaultNotificationsEnabled,
    &Service::GetDefaultPassiveChecksEnabled,
    &Service::GetDefaultProcessPerformanceData,
    &Service::GetDisplayName,
    &Service::GetEventHandler,
    &Service::GetEventHandlerEnabled,
    &Service::GetExecutionTime,
    &Service::GetFailurePredictionEnabled,
    &Service::GetFailurePredictionOptions,
    &Service::GetFirstNotificationDelay,
    &Service::GetFlapDetectionEnabled,
    &Service::GetFlapDetectionOnCritical,
    &Service::GetFlapDetectionOnOk,
    &Service::GetFlapDetectionOnUnknown,
    &Service::GetFlapDetectionOnWarning,
    &Service::GetFreshnessChecksEnabled,
    &Service::GetFreshnessThreshold,
    &Service::GetHasBeenChecked,
    &Service::GetHighFlapThreshold,
    &Service::GetHostName,
    &Service::GetIconImage,
    &Service::GetIconImageAlt,
    &Service::GetIsFlapping,
    &Service::GetIsVolatile,
    &Service::GetLastCheck,
    &Service::GetLastHardState,
    &Service::GetLastHardStateChange,
    &Service::GetLastNotification,
    &Service::GetLastStateChange,
    &Service::GetLastTimeCritical,
    &Service::GetLastTimeOk,
    &Service::GetLastTimeUnknown,
    &Service::GetLastTimeWarning,
    &Service::GetLatency,
    &Service::GetLowFlapThreshold,
    &Service::GetMaxCheckAttempts,
    &Service::GetModifiedAttributes,
    &Service::GetNextCheck,
    &Service::GetNextNotification,
    &Service::GetNoMoreNotifications,
    &Service::GetNotes,
    &Service::GetNotesUrl,
    &Service::GetNotificationInterval,
    &Service::GetNotificationsEnabled,
    &Service::GetNotifyOnCritical,
    &Service::GetNotifyOnDowntime,
    &Service::GetNotifyOnFlapping,
    &Service::GetNotifyOnRecovery,
    &Service::GetNotifyOnUnknown,
    &Service::GetNotifyOnWarning,
    &Service::GetObsessOver,
    &Service::GetOutput,
    &Service::GetPassiveChecksEnabled,
    &Service::GetPercentStateChange,
    &Service::GetPerfdata,
    &Service::GetProblemHasBeenAcknowledged,
    &Service::GetProcessPerformanceData,
    &Service::GetRetainNonstatusInformation,
    &Service::GetRetainStatusInformation,
    &Service::GetRetryInterval,
    &Service::GetScheduledDowntimeDepth,
    &Service::GetServiceDescription,
    &Service::GetShouldBeScheduled,
    &Service::GetStateType,
    &Service::GetStatusUpdateTime,
    NULL
  };

static_assert(sizeof(service_fields) / sizeof(*service_fields)
              == sizeof(service_getters) / sizeof(*service_getters),
              "Invalid Service object-relational mapping");

const char* CentreonBroker::service_status_fields[] =
  {
    "acknowledgement_type",
    "active_checks_enabled",
    "check_command",
    "check_interval",
    "check_type",
    "current_check_attempt",
    "current_notification_number",
    "current_state",
    "event_handler",
    "event_handler_enabled",
    "execution_time",
    "failure_prediction_enabled",
    "flap_detection_enabled",
    "has_been_checked",
    "is_flapping",
    "last_check",
    "last_hard_state",
    "last_hard_state_change",
    "last_notification",
    "last_state_change",
    "last_time_critical",
    "last_time_ok",
    "last_time_unknown",
    "last_time_warning",
    "latency",
    "max_check_attempts",
    "modified_service_attributes",
    "next_check",
    "next_notification",
    "no_more_notifications",
    "notifications_enabled",
    "obsess_over_service",
    "output",
    "passive_checks_enabled",
    "percent_state_change",
    "perfdata",
    "problem_has_been_acknowledged",
    "process_performance_data",
    "retry_interval",
    "scheduled_downtime_depth",
    "should_be_scheduled",
    "state_type",
    "status_update_time",
    NULL
  };

FieldGetter<ServiceStatus> CentreonBroker::service_status_getters[] =
  {
    &ServiceStatus::GetAcknowledgementType,
    &ServiceStatus::GetActiveChecksEnabled,
    &ServiceStatus::GetCheckCommand,
    &ServiceStatus::GetCheckInterval,
    &ServiceStatus::GetCheckType,
    &ServiceStatus::GetCurrentCheckAttempt,
    &ServiceStatus::GetCurrentNotificationNumber,
    &ServiceStatus::GetCurrentState,
    &ServiceStatus::GetEventHandler,
    &ServiceStatus::GetEventHandlerEnabled,
    &ServiceStatus::GetExecutionTime,
    &ServiceStatus::GetFailurePredictionEnabled,
    &ServiceStatus::GetFlapDetectionEnabled,
    &ServiceStatus::GetHasBeenChecked,
    &ServiceStatus::GetIsFlapping,
    &ServiceStatus::GetLastCheck,
    &ServiceStatus::GetLastHardState,
    &ServiceStatus::GetLastHardStateChange,
    &ServiceStatus::GetLastNotification,
    &ServiceStatus::GetLastStateChange,
    &ServiceStatus::GetLastTimeCritical,
    &ServiceStatus::GetLastTimeOk,
    &ServiceStatus::GetLastTimeUnknown,
    &ServiceStatus::GetLastTimeWarning,
    &ServiceStatus::GetLatency,
    &ServiceStatus::GetMaxCheckAttempts,
    &ServiceStatus::GetModifiedAttributes,
    &ServiceStatus::GetNextCheck,
    &ServiceStatus::GetNextNotification,
    &ServiceStatus::GetNoMoreNotifications,
    &ServiceStatus::GetNotificationsEnabled,
    &ServiceStatus::GetObsessOver,
    &ServiceStatus::GetOutput,
    &ServiceStatus::GetPassiveChecksEnabled,
    &ServiceStatus::GetPercentStateChange,
    &ServiceStatus::GetPerfdata,
    &ServiceStatus::GetProblemHasBeenAcknowledged,
    &ServiceStatus::GetProcessPerformanceData,
    &ServiceStatus::GetRetryInterval,
    &ServiceStatus::GetScheduledDowntimeDepth,
    &ServiceStatus::GetShouldBeScheduled,
    &ServiceStatus::GetStateType,
    &ServiceStatus::GetStatusUpdateTime,
    NULL
  };

static_assert(sizeof(service_status_fields) / sizeof(*service_status_fields) ==
              sizeof(service_status_getters) / sizeof(*service_status_getters),
              "Invalid ServiceStatus object-relational mapping");

const char* CentreonBroker::service_status_uniques[] =
  {
    "host_name",
    "service_description",
    NULL
  };
