/*
** mapping.cpp for CentreonBroker in ./src
** 
** Made by Matthieu Kermagoret <mkermagoret@merethis.com>
** 
** Copyright Merethis
** See LICENSE file for details.
** 
** Started on  06/01/09 Matthieu Kermagoret
** Last update 06/11/09 Matthieu Kermagoret
*/

#include "host.h"
#include "host_status.h"
#include "mapping.h"

using namespace CentreonBroker;

/**
 *  Host mapping.
 */
DB::Mapping<Host> CentreonBroker::host_mapping;

static void InitHostMapping()
{
  host_mapping.SetTable("hosts");
  host_mapping.AddShortField("acknowledgement_type",
			     &Host::GetAcknowledgementType);
  host_mapping.AddStringField("action_url",
			      &Host::GetActionUrl);
  host_mapping.AddShortField("active_checks_enabled",
			     &Host::GetActiveChecksEnabled);
  host_mapping.AddStringField("address",
			      &Host::GetAddress);
  host_mapping.AddStringField("alias",
			      &Host::GetAlias);
  host_mapping.AddStringField("check_command",
			      &Host::GetCheckCommand);
  host_mapping.AddDoubleField("check_interval",
			      &Host::GetCheckInterval);
  host_mapping.AddShortField("check_type",
			     &Host::GetCheckType);
  host_mapping.AddShortField("current_check_attempt",
			     &Host::GetCurrentCheckAttempt);
  host_mapping.AddShortField("current_notification_number",
			     &Host::GetCurrentNotificationNumber);
  host_mapping.AddShortField("current_state",
			     &Host::GetCurrentState);
  host_mapping.AddStringField("display_name",
			      &Host::GetDisplayName);
  host_mapping.AddStringField("event_handler",
			      &Host::GetEventHandler);
  host_mapping.AddShortField("event_handler_enabled",
			     &Host::GetEventHandlerEnabled);
  host_mapping.AddDoubleField("execution_time",
			      &Host::GetExecutionTime);
  host_mapping.AddShortField("failure_prediction_enabled",
			     &Host::GetFailurePredictionEnabled);
  host_mapping.AddDoubleField("first_notification_delay",
			      &Host::GetFirstNotificationDelay);
  host_mapping.AddShortField("flap_detection_enabled",
			     &Host::GetFlapDetectionEnabled);
  host_mapping.AddShortField("flap_detection_on_down",
			     &Host::GetFlapDetectionOnDown);
  host_mapping.AddShortField("flap_detection_on_unreachable",
			     &Host::GetFlapDetectionOnUnreachable);
  host_mapping.AddShortField("flap_detection_on_up",
			     &Host::GetFlapDetectionOnUp);
  host_mapping.AddShortField("freshness_threshold",
			     &Host::GetFreshnessThreshold);
  host_mapping.AddShortField("has_been_checked",
			      &Host::GetHasBeenChecked);
  host_mapping.AddShortField("have_2d_coords",
			     &Host::GetHave2DCoords);
  host_mapping.AddDoubleField("high_flap_threshold",
			      &Host::GetHighFlapThreshold);
  host_mapping.AddStringField("host_name",
			      &Host::GetHostName);
  host_mapping.AddStringField("icon_image",
			      &Host::GetIconImage);
  host_mapping.AddStringField("icon_image_alt",
			      &Host::GetIconImageAlt);
  host_mapping.AddShortField("is_flapping",
			     &Host::GetIsFlapping);
  host_mapping.AddTimeField("last_check",
			    &Host::GetLastCheck);
  host_mapping.AddShortField("last_hard_state",
			     &Host::GetLastHardState);
  host_mapping.AddTimeField("last_hard_state_change",
			    &Host::GetLastHardStateChange);
  host_mapping.AddTimeField("last_notification",
			    &Host::GetLastNotification);
  host_mapping.AddTimeField("last_state_change",
			    &Host::GetLastStateChange);
  host_mapping.AddTimeField("last_time_down",
			    &Host::GetLastTimeDown);
  host_mapping.AddTimeField("last_time_unreachable",
			    &Host::GetLastTimeUnreachable);
  host_mapping.AddTimeField("last_time_up",
			     &Host::GetLastTimeUp);
  host_mapping.AddDoubleField("latency",
			      &Host::GetLatency);
  host_mapping.AddDoubleField("low_flap_threshold",
			      &Host::GetLowFlapThreshold);
  host_mapping.AddShortField("max_check_attempts",
			     &Host::GetMaxCheckAttempts);
  host_mapping.AddIntField("modified_host_attributes",
			   &Host::GetModifiedAttributes);
  host_mapping.AddTimeField("next_check",
			    &Host::GetNextCheck);
  host_mapping.AddTimeField("next_notification",
			    &Host::GetNextNotification);
  host_mapping.AddShortField("no_more_notifications",
			     &Host::GetNoMoreNotifications);
  host_mapping.AddStringField("notes",
			      &Host::GetNotes);
  host_mapping.AddStringField("notes_url",
			      &Host::GetNotesUrl);
  host_mapping.AddDoubleField("notification_interval",
			      &Host::GetNotificationInterval);
  host_mapping.AddShortField("notifications_enabled",
			     &Host::GetNotificationsEnabled);
  host_mapping.AddShortField("notify_on_down",
			     &Host::GetNotifyOnDown);
  host_mapping.AddShortField("notify_on_downtime",
			     &Host::GetNotifyOnDowntime);
  host_mapping.AddShortField("notify_on_flapping",
			     &Host::GetNotifyOnFlapping);
  host_mapping.AddShortField("notify_on_recovery",
			     &Host::GetNotifyOnRecovery);
  host_mapping.AddShortField("notify_on_unreachable",
			     &Host::GetNotifyOnUnreachable);
  host_mapping.AddShortField("obsess_over_host",
			     &Host::GetObsessOver);
  host_mapping.AddStringField("output",
			      &Host::GetOutput);
  host_mapping.AddShortField("passive_checks_enabled",
			     &Host::GetPassiveChecksEnabled);
  host_mapping.AddDoubleField("percent_state_change",
			      &Host::GetPercentStateChange);
  host_mapping.AddStringField("perfdata",
			      &Host::GetPerfdata);
  host_mapping.AddShortField("problem_has_been_acknowledged",
			     &Host::GetProblemHasBeenAcknowledged);
  host_mapping.AddShortField("process_performance_data",
			     &Host::GetProcessPerformanceData);
  host_mapping.AddShortField("retain_nonstatus_information",
			     &Host::GetRetainNonstatusInformation);
  host_mapping.AddShortField("retain_status_information",
			     &Host::GetRetainStatusInformation);
  host_mapping.AddDoubleField("retry_interval",
			      &Host::GetRetryInterval);
  host_mapping.AddShortField("scheduled_downtime_depth",
			     &Host::GetScheduledDowntimeDepth);
  host_mapping.AddShortField("should_be_scheduled",
			     &Host::GetShouldBeScheduled);
  host_mapping.AddShortField("stalk_on_down",
			     &Host::GetStalkOnDown);
  host_mapping.AddShortField("stalk_on_unreachable",
			     &Host::GetStalkOnUnreachable);
  host_mapping.AddShortField("stalk_on_up",
			     &Host::GetStalkOnUp);
  host_mapping.AddShortField("state_type",
			     &Host::GetStateType);
  host_mapping.AddTimeField("status_update_time",
			    &Host::GetStatusUpdateTime);
  host_mapping.AddStringField("statusmap_image",
			      &Host::GetStatusmapImage);
  host_mapping.AddStringField("vrml_image",
			      &Host::GetVrmlImage);
  host_mapping.AddShortField("x_2d",
			     &Host::GetX2D);
  host_mapping.AddShortField("y_2d",
			     &Host::GetY2D);
  return ;
}

DB::Mapping<HostStatus> CentreonBroker::host_status_mapping;

static void InitHostStatusMapping()
{
  host_status_mapping.SetTable("hosts");
  host_status_mapping.AddShortField("acknowledgement_type",
                                    &HostStatus::GetAcknowledgementType);
  host_status_mapping.AddShortField("active_checks_enabled",
				    &HostStatus::GetActiveChecksEnabled);
  host_status_mapping.AddStringField("check_command",
				     &HostStatus::GetCheckCommand);
  host_status_mapping.AddDoubleField("check_interval",
				     &HostStatus::GetCheckInterval);
  host_status_mapping.AddShortField("check_type",
				    &HostStatus::GetCheckType);
  host_status_mapping.AddShortField("current_check_attempt",
				    &HostStatus::GetCurrentCheckAttempt);
  host_status_mapping.AddShortField("current_notification_number",
				    &HostStatus::GetCurrentNotificationNumber);
  host_status_mapping.AddShortField("current_state",
				    &HostStatus::GetCurrentState);
  host_status_mapping.AddStringField("event_handler",
				     &HostStatus::GetEventHandler);
  host_status_mapping.AddShortField("event_handler_enabled",
				    &HostStatus::GetEventHandlerEnabled);
  host_status_mapping.AddDoubleField("execution_time",
				     &HostStatus::GetExecutionTime);
  host_status_mapping.AddShortField("failure_prediction_enabled",
    &HostStatus::GetFailurePredictionEnabled);
  host_status_mapping.AddShortField("flap_detection_enabled",
				    &HostStatus::GetFlapDetectionEnabled);
  host_status_mapping.AddShortField("has_been_checked",
				    &HostStatus::GetHasBeenChecked);
  host_status_mapping.AddShortField("is_flapping",
				    &HostStatus::GetIsFlapping);
  host_status_mapping.AddTimeField("last_check",
				   &HostStatus::GetLastCheck);
  host_status_mapping.AddShortField("last_hard_state",
				    &HostStatus::GetLastHardState);
  host_status_mapping.AddTimeField("last_hard_state_change",
				   &HostStatus::GetLastHardStateChange);
  host_status_mapping.AddTimeField("last_notification",
				   &HostStatus::GetLastNotification);
  host_status_mapping.AddTimeField("last_state_change",
				   &HostStatus::GetLastStateChange);
  host_status_mapping.AddTimeField("last_time_down",
				   &HostStatus::GetLastTimeDown);
  host_status_mapping.AddTimeField("last_time_unreachable",
				   &HostStatus::GetLastTimeUnreachable);
  host_status_mapping.AddTimeField("last_time_up",
				   &HostStatus::GetLastTimeUp);
  host_status_mapping.AddDoubleField("latency",
				     &HostStatus::GetLatency);
  host_status_mapping.AddShortField("max_check_attempts",
				    &HostStatus::GetMaxCheckAttempts);
  host_status_mapping.AddIntField("modified_host_attributes",
				  &HostStatus::GetModifiedAttributes);
  host_status_mapping.AddTimeField("next_check",
				   &HostStatus::GetNextCheck);
  host_status_mapping.AddTimeField("next_notification",
				   &HostStatus::GetNextNotification);
  host_status_mapping.AddShortField("no_more_notifications",
				    &HostStatus::GetNoMoreNotifications);
  host_status_mapping.AddShortField("notifications_enabled",
				    &HostStatus::GetNotificationsEnabled);
  host_status_mapping.AddShortField("obsess_over_host",
				    &HostStatus::GetObsessOver);
  host_status_mapping.AddStringField("output",
				     &HostStatus::GetOutput);
  host_status_mapping.AddShortField("passive_checks_enabled",
				    &HostStatus::GetPassiveChecksEnabled);
  host_status_mapping.AddDoubleField("percent_state_change",
				     &HostStatus::GetPercentStateChange);
  host_status_mapping.AddStringField("perfdata",
				     &HostStatus::GetPerfdata);
  host_status_mapping.AddShortField("problem_has_been_acknowledged",
    &HostStatus::GetProblemHasBeenAcknowledged);
  host_status_mapping.AddShortField("process_performance_data",
				    &HostStatus::GetProcessPerformanceData);
  host_status_mapping.AddDoubleField("retry_interval",
				     &HostStatus::GetRetryInterval);
  host_status_mapping.AddShortField("scheduled_downtime_depth",
				    &HostStatus::GetScheduledDowntimeDepth);
  host_status_mapping.AddShortField("should_be_scheduled",
				    &HostStatus::GetShouldBeScheduled);
  host_status_mapping.AddShortField("state_type",
				    &HostStatus::GetStateType);
  host_status_mapping.AddTimeField("status_update_time",
				   &HostStatus::GetStatusUpdateTime);
  return ;
}

DB::Mapping<ProgramStatus> CentreonBroker::program_status_mapping;

static void InitProgramStatusMapping()
{
  program_status_mapping.AddShortField("active_host_checks_enabled",
    &ProgramStatus::GetActiveHostChecksEnabled);
  program_status_mapping.AddShortField("active_service_checks_enabled",
    &ProgramStatus::GetActiveServiceChecksEnabled);
  program_status_mapping.AddShortField("daemon_mode",
				       &ProgramStatus::GetDaemonMode);
  program_status_mapping.AddShortField("event_handler_enabled",
				       &ProgramStatus::GetEventHandlerEnabled);
  program_status_mapping.AddShortField("failure_prediction_enabled",
    &ProgramStatus::GetFailurePredictionEnabled);
  program_status_mapping.AddShortField("flap_detection_enabled",
    &ProgramStatus::GetFlapDetectionEnabled);
  program_status_mapping.AddStringField("global_host_event_handler",
    &ProgramStatus::GetGlobalHostEventHandler);
  program_status_mapping.AddStringField("global_service_event_handler",
    &ProgramStatus::GetGlobalServiceEventHandler);
  program_status_mapping.AddShortField("is_currently_running",
				       &ProgramStatus::GetIsCurrentlyRunning);
  program_status_mapping.AddTimeField("last_command_check",
				      &ProgramStatus::GetLastCommandCheck);
  program_status_mapping.AddTimeField("last_log_rotation",
				      &ProgramStatus::GetLastLogRotation);
  program_status_mapping.AddIntField("modified_host_attributes",
    &ProgramStatus::GetModifiedHostAttributes);
  program_status_mapping.AddIntField("modified_service_attributes",
    &ProgramStatus::GetModifiedServiceAttributes);
  program_status_mapping.AddShortField("notifications_enabled",
    &ProgramStatus::GetNotificationsEnabled);
  program_status_mapping.AddShortField("obsess_over_hosts",
				       &ProgramStatus::GetObsessOverHosts);
  program_status_mapping.AddShortField("obsess_over_services",
				       &ProgramStatus::GetObsessOverServices);
  program_status_mapping.AddShortField("passive_host_checks_enabled",
    &ProgramStatus::GetPassiveHostChecksEnabled);
  program_status_mapping.AddShortField("passive_service_checks_enabled",
    &ProgramStatus::GetPassiveServiceChecksEnabled);
  program_status_mapping.AddIntField("process_id",
				     &ProgramStatus::GetProcessId);
  program_status_mapping.AddShortField("process_performance_data",
    &ProgramStatus::GetProcessPerformanceData);
  program_status_mapping.AddTimeField("program_end_time",
				      &ProgramStatus::GetProgramEndTime);
  program_status_mapping.AddTimeField("program_start_time",
				      &ProgramStatus::GetProgramStartTime);
  program_status_mapping.AddTimeField("status_update_time",
				      &ProgramStatus::GetStatusUpdateTime);
  return ;
}

/*const char* CentreonBroker::service_fields[] =
  {
    "acknowledgement_type",
    "action_url",
    "active_checks_enabled",
    "check_command",
    "check_interval",
    "check_type",
    "current_check_attempt",
    "current_notification_number",
    "current_state",
    "default_active_checks_enabled",
    "default_event_handler_enabled",
    "default_failure_prediction_enabled",
    "default_flap_detection_enabled",
    "default_notifications_enabled",
    "default_passive_checks_enabled",
    "default_process_performance_data",
    "display_name",
    "event_handler",
    "event_handler_enabled",
    "execution_time",
    "failure_prediction_enabled",
    "failure_prediction_options",
    "first_notification_delay",
    "flap_detection_enabled",
    "flap_detection_on_critical",
    "flap_detection_on_ok",
    "flap_detection_on_unknown",
    "flap_detection_on_warning",
    "freshness_checks_enabled",
    "freshness_threshold",
    "has_been_checked",
    "high_flap_threshold",
    "host_name",
    "icon_image",
    "icon_image_alt",
    "is_flapping",
    "is_volatile",
    "last_check",
    "last_hard_state",
    "last_hard_state_change",
    "last_notification",
    "last_state_change",
    "last_time_critical",
    "last_time_ok",
    "last_time_unknown",
    "last_time_warning",
    "latency",
    "low_flap_threshold",
    "max_check_attempts",
    "modified_service_attributes",
    "next_check",
    "next_notification",
    "no_more_notifications",
    "notes",
    "notes_url",
    "notification_interval",
    "notifications_enabled",
    "notify_on_critical",
    "notify_on_downtime",
    "notify_on_flapping",
    "notify_on_recovery",
    "notify_on_unknown",
    "notify_on_warning",
    "obsess_over_service",
    "output",
    "passive_checks_enabled",
    "percent_state_change",
    "perfdata",
    "problem_has_been_acknowledged",
    "process_performance_data",
    "retain_nonstatus_information",
    "retain_status_information",
    "retry_interval",
    "scheduled_downtime_depth",
    "service_description",
    "should_be_scheduled",
    "state_type",
    "status_update_time",
    NULL
  };

FieldGetter<Service> CentreonBroker::service_getters[] =
  {
    &Service::GetAcknowledgementType,
    &Service::GetActionUrl,
    &Service::GetActiveChecksEnabled,
    &Service::GetCheckCommand,
    &Service::GetCheckInterval,
    &Service::GetCheckType,
    &Service::GetCurrentCheckAttempt,
    &Service::GetCurrentNotificationNumber,
    &Service::GetCurrentState,
    &Service::GetDefaultActiveChecksEnabled,
    &Service::GetDefaultEventHandlerEnabled,
    &Service::GetDefaultFailurePredictionEnabled,
    &Service::GetDefaultFlapDetectionEnabled,
    &Service::GetDefaultNotificationsEnabled,
    &Service::GetDefaultPassiveChecksEnabled,
    &Service::GetDefaultProcessPerformanceData,
    &Service::GetDisplayName,
    &Service::GetEventHandler,
    &Service::GetEventHandlerEnabled,
    &Service::GetExecutionTime,
    &Service::GetFailurePredictionEnabled,
    &Service::GetFailurePredictionOptions,
    &Service::GetFirstNotificationDelay,
    &Service::GetFlapDetectionEnabled,
    &Service::GetFlapDetectionOnCritical,
    &Service::GetFlapDetectionOnOk,
    &Service::GetFlapDetectionOnUnknown,
    &Service::GetFlapDetectionOnWarning,
    &Service::GetFreshnessChecksEnabled,
    &Service::GetFreshnessThreshold,
    &Service::GetHasBeenChecked,
    &Service::GetHighFlapThreshold,
    &Service::GetHostName,
    &Service::GetIconImage,
    &Service::GetIconImageAlt,
    &Service::GetIsFlapping,
    &Service::GetIsVolatile,
    &Service::GetLastCheck,
    &Service::GetLastHardState,
    &Service::GetLastHardStateChange,
    &Service::GetLastNotification,
    &Service::GetLastStateChange,
    &Service::GetLastTimeCritical,
    &Service::GetLastTimeOk,
    &Service::GetLastTimeUnknown,
    &Service::GetLastTimeWarning,
    &Service::GetLatency,
    &Service::GetLowFlapThreshold,
    &Service::GetMaxCheckAttempts,
    &Service::GetModifiedAttributes,
    &Service::GetNextCheck,
    &Service::GetNextNotification,
    &Service::GetNoMoreNotifications,
    &Service::GetNotes,
    &Service::GetNotesUrl,
    &Service::GetNotificationInterval,
    &Service::GetNotificationsEnabled,
    &Service::GetNotifyOnCritical,
    &Service::GetNotifyOnDowntime,
    &Service::GetNotifyOnFlapping,
    &Service::GetNotifyOnRecovery,
    &Service::GetNotifyOnUnknown,
    &Service::GetNotifyOnWarning,
    &Service::GetObsessOver,
    &Service::GetOutput,
    &Service::GetPassiveChecksEnabled,
    &Service::GetPercentStateChange,
    &Service::GetPerfdata,
    &Service::GetProblemHasBeenAcknowledged,
    &Service::GetProcessPerformanceData,
    &Service::GetRetainNonstatusInformation,
    &Service::GetRetainStatusInformation,
    &Service::GetRetryInterval,
    &Service::GetScheduledDowntimeDepth,
    &Service::GetServiceDescription,
    &Service::GetShouldBeScheduled,
    &Service::GetStateType,
    &Service::GetStatusUpdateTime,
    NULL
  };

static_assert(sizeof(service_fields) / sizeof(*service_fields)
              == sizeof(service_getters) / sizeof(*service_getters),
              "Invalid Service object-relational mapping");

const char* CentreonBroker::service_status_fields[] =
  {
    "acknowledgement_type",
    "active_checks_enabled",
    "check_command",
    "check_interval",
    "check_type",
    "current_check_attempt",
    "current_notification_number",
    "current_state",
    "event_handler",
    "event_handler_enabled",
    "execution_time",
    "failure_prediction_enabled",
    "flap_detection_enabled",
    "has_been_checked",
    "is_flapping",
    "last_check",
    "last_hard_state",
    "last_hard_state_change",
    "last_notification",
    "last_state_change",
    "last_time_critical",
    "last_time_ok",
    "last_time_unknown",
    "last_time_warning",
    "latency",
    "max_check_attempts",
    "modified_service_attributes",
    "next_check",
    "next_notification",
    "no_more_notifications",
    "notifications_enabled",
    "obsess_over_service",
    "output",
    "passive_checks_enabled",
    "percent_state_change",
    "perfdata",
    "problem_has_been_acknowledged",
    "process_performance_data",
    "retry_interval",
    "scheduled_downtime_depth",
    "should_be_scheduled",
    "state_type",
    "status_update_time",
    NULL
  };

FieldGetter<ServiceStatus> CentreonBroker::service_status_getters[] =
  {
    &ServiceStatus::GetAcknowledgementType,
    &ServiceStatus::GetActiveChecksEnabled,
    &ServiceStatus::GetCheckCommand,
    &ServiceStatus::GetCheckInterval,
    &ServiceStatus::GetCheckType,
    &ServiceStatus::GetCurrentCheckAttempt,
    &ServiceStatus::GetCurrentNotificationNumber,
    &ServiceStatus::GetCurrentState,
    &ServiceStatus::GetEventHandler,
    &ServiceStatus::GetEventHandlerEnabled,
    &ServiceStatus::GetExecutionTime,
    &ServiceStatus::GetFailurePredictionEnabled,
    &ServiceStatus::GetFlapDetectionEnabled,
    &ServiceStatus::GetHasBeenChecked,
    &ServiceStatus::GetIsFlapping,
    &ServiceStatus::GetLastCheck,
    &ServiceStatus::GetLastHardState,
    &ServiceStatus::GetLastHardStateChange,
    &ServiceStatus::GetLastNotification,
    &ServiceStatus::GetLastStateChange,
    &ServiceStatus::GetLastTimeCritical,
    &ServiceStatus::GetLastTimeOk,
    &ServiceStatus::GetLastTimeUnknown,
    &ServiceStatus::GetLastTimeWarning,
    &ServiceStatus::GetLatency,
    &ServiceStatus::GetMaxCheckAttempts,
    &ServiceStatus::GetModifiedAttributes,
    &ServiceStatus::GetNextCheck,
    &ServiceStatus::GetNextNotification,
    &ServiceStatus::GetNoMoreNotifications,
    &ServiceStatus::GetNotificationsEnabled,
    &ServiceStatus::GetObsessOver,
    &ServiceStatus::GetOutput,
    &ServiceStatus::GetPassiveChecksEnabled,
    &ServiceStatus::GetPercentStateChange,
    &ServiceStatus::GetPerfdata,
    &ServiceStatus::GetProblemHasBeenAcknowledged,
    &ServiceStatus::GetProcessPerformanceData,
    &ServiceStatus::GetRetryInterval,
    &ServiceStatus::GetScheduledDowntimeDepth,
    &ServiceStatus::GetShouldBeScheduled,
    &ServiceStatus::GetStateType,
    &ServiceStatus::GetStatusUpdateTime,
    NULL
  };

static_assert(sizeof(service_status_fields) / sizeof(*service_status_fields) ==
              sizeof(service_status_getters) / sizeof(*service_status_getters),
              "Invalid ServiceStatus object-relational mapping");

const char* CentreonBroker::service_status_uniques[] =
  {
    "host_name",
    "service_description",
    NULL
  };
*/

void CentreonBroker::InitMappings()
{
  InitHostMapping();
  InitHostStatusMapping();
  return ;
}
