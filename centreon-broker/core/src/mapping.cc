/*
** Copyright 2009-2013 Merethis
**
** This file is part of Centreon Broker.
**
** Centreon Broker is free software: you can redistribute it and/or
** modify it under the terms of the GNU General Public License version 2
** as published by the Free Software Foundation.
**
** Centreon Broker is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
** General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with Centreon Broker. If not, see
** <http://www.gnu.org/licenses/>.
*/

#include "com/centreon/broker/correlation/events.hh"
#include "com/centreon/broker/dumper/dump.hh"
#include "com/centreon/broker/neb/events.hh"
#include "com/centreon/engine/protoapi.h"
#include "mapping.hh"

using namespace com::centreon::broker;
using namespace com::centreon::broker::correlation;
using namespace com::centreon::broker::dumper;
using namespace com::centreon::broker::neb;

// dump members mapping.
static mapped_data<dump> const dumper_dump_mapping[] = {
  mapped_data<dump>(
    &dump::content,
    1,
    "content"),
  mapped_data<dump>(
    &dump::instance_id,
    2,
    "instance_id"),
  mapped_data<dump>(
    &dump::tag,
    3,
    "tag"),
  mapped_data<dump>()
};

// engine_state members mapping.
static mapped_data<engine_state> const engine_state_mapping[] = {
  mapped_data<engine_state>(
    &engine_state::started,
    1,
    "started"),
  mapped_data<engine_state>(
    &engine_state::instance_id,
    2,
    NULL),
  mapped_data<engine_state>()
};

// host_parent members mapping.
static mapped_data<host_parent> const host_parent_mapping[] = {
};

// host_state members mapping.
static mapped_data<host_state> const host_state_mapping[] = {
  mapped_data<host_state>(
    &host_state::ack_time,
    1,
    "ack_time",
    NULL_ON_MINUS_ONE),
  mapped_data<host_state>(
    &host_state::current_state,
    2,
    "state"),
  mapped_data<host_state>(
    &host_state::end_time,
    3,
    "end_time",
    NULL_ON_ZERO),
  mapped_data<host_state>(
    &host_state::host_id,
    4,
    "host_id"),
  mapped_data<host_state>(
    &host_state::in_downtime,
    5,
    "in_downtime"),
  mapped_data<host_state>(
    &host_state::start_time,
    6,
    "start_time"),
  mapped_data<host_state>(
    &host_state::instance_id,
    7,
    NULL),
  mapped_data<host_state>()
};

// issue members mapping.
static mapped_data<issue> const issue_mapping[] = {
  mapped_data<issue>(
    &issue::ack_time,
    NDO_DATA_ACKDATA,
    "ack_time"),
  mapped_data<issue>(
    &issue::end_time,
    NDO_DATA_ENDTIME,
    "end_time",
    NULL_ON_ZERO),
  mapped_data<issue>(
    &issue::host_id,
    NDO_DATA_HOST,
    "host_id",
    NULL_ON_ZERO),
  mapped_data<issue>(
    &issue::service_id,
    NDO_DATA_SERVICE,
    "service_id",
    NULL_ON_ZERO),
  mapped_data<issue>(
    &issue::start_time,
    NDO_DATA_STARTTIME,
    "start_time"),
  mapped_data<issue>(
    &issue::instance_id,
    NDO_DATA_INSTANCE,
    NULL),
  mapped_data<issue>()
};

// issue_parent members mapping.
static mapped_data<issue_parent> const issue_parent_mapping[] = {
  mapped_data<issue_parent>(
    &issue_parent::child_host_id,
    1,
    "child_host_id",
    NULL_ON_ZERO),
  mapped_data<issue_parent>(
    &issue_parent::child_service_id,
    2,
    "child_service_id",
    NULL_ON_ZERO),
  mapped_data<issue_parent>(
    &issue_parent::child_start_time,
    3,
    "child_start_time"),
  mapped_data<issue_parent>(
    &issue_parent::end_time,
    4,
    "end_time"),
  mapped_data<issue_parent>(
    &issue_parent::parent_host_id,
    5,
    "parent_host_id",
    NULL_ON_ZERO),
  mapped_data<issue_parent>(
    &issue_parent::parent_service_id,
    6,
    "parent_service_id",
    NULL_ON_ZERO),
  mapped_data<issue_parent>(
    &issue_parent::parent_start_time,
    7,
    "parent_start_time"),
  mapped_data<issue_parent>(
    &issue_parent::start_time,
    8,
    "start_time"),
  mapped_data<issue_parent>(
    &issue_parent::child_instance_id,
    9,
    NULL),
  mapped_data<issue_parent>(
    &issue_parent::parent_instance_id,
    10,
    NULL),
  mapped_data<issue_parent>()
};

// Log members mapping.
static mapped_data<log_entry> log_mapping[] = {
  mapped_data<log_entry>(
    &log_entry::c_time,
    NDO_DATA_LOGENTRYTIME,
    "ctime"),
  mapped_data<log_entry>(
    &log_entry::host_id,
    NDO_DATA_HOSTID,
    "host_id",
    NULL_ON_ZERO),
  mapped_data<log_entry>(
    &log_entry::host_name,
    NDO_DATA_HOST,
    "host_name"),
  mapped_data<log_entry>(
    &log_entry::instance_name,
    NDO_DATA_PROGRAMNAME,
    "instance_name"),
  mapped_data<log_entry>(
    &log_entry::issue_start_time,
    NDO_DATA_DURATION,
    NULL),
  mapped_data<log_entry>(
    &log_entry::log_type,
    NDO_DATA_TYPE,
    "type"),
  mapped_data<log_entry>(
    &log_entry::msg_type,
    NDO_DATA_ENTRYTYPE,
    "msg_type"),
  mapped_data<log_entry>(
    &log_entry::notification_cmd,
    NDO_DATA_HOSTNOTIFICATIONCOMMAND,
    "notification_cmd"),
  mapped_data<log_entry>(
    &log_entry::notification_contact,
    NDO_DATA_CONTACT,
    "notification_contact"),
  mapped_data<log_entry>(
    &log_entry::retry,
    NDO_DATA_HOSTRETRYINTERVAL,
    "retry"),
  mapped_data<log_entry>(
    &log_entry::service_description,
    NDO_DATA_SERVICEDESCRIPTION,
    "service_description",
    NULL_ON_ZERO),
  mapped_data<log_entry>(
    &log_entry::service_id,
    NDO_DATA_SERVICEID,
    "service_id",
    NULL_ON_ZERO),
  mapped_data<log_entry>(
    &log_entry::status,
    NDO_DATA_CURRENTSTATE,
    "status"),
  mapped_data<log_entry>(
    &log_entry::output,
    NDO_DATA_OUTPUT,
    "output"),
  mapped_data<log_entry>(
    &log_entry::instance_id,
    NDO_DATA_INSTANCE,
    NULL),
  mapped_data<log_entry>()
};

// Module members mapping.
static mapped_data<module> const module_mapping[] = {
  mapped_data<module>(
    &module::args,
    1,
    "args"),
  mapped_data<module>(
    &module::enabled,
    6,
    NULL),
  mapped_data<module>(
    &module::filename,
    2,
    "filename"),
  mapped_data<module>(
    &module::instance_id,
    3,
    "instance_id",
    NULL_ON_ZERO),
  mapped_data<module>(
    &module::loaded,
    4,
    "loaded"),
  mapped_data<module>(
    &module::should_be_loaded,
    5,
    "should_be_loaded"),
  mapped_data<module>()
};

// Notification members mapping.
static mapped_data<notification> const notification_mapping[] = {
  mapped_data<notification>(
    &notification::contacts_notified,
    NDO_DATA_CONTACTSNOTIFIED,
    "contacts_notified"),
  mapped_data<notification>(
    &notification::end_time,
    NDO_DATA_ENDTIME,
    "end_time"),
  mapped_data<notification>(
    &notification::escalated,
    NDO_DATA_ESCALATED,
    "escalated"),
  mapped_data<notification>(
    &notification::host_id,
    NDO_DATA_HOST,
    "host_id",
    NULL_ON_ZERO),
  mapped_data<notification>(
    &notification::notification_type,
    NDO_DATA_NOTIFICATIONTYPE,
    "type"),
  mapped_data<notification>(
    &notification::reason_type,
    NDO_DATA_NOTIFICATIONREASON,
    "reason_type"),
  mapped_data<notification>(
    &notification::service_id,
    NDO_DATA_SERVICE,
    "service_id",
    NULL_ON_ZERO),
  mapped_data<notification>(
    &notification::start_time,
    NDO_DATA_STARTTIME,
    "start_time"),
  mapped_data<notification>(
    &notification::state,
    NDO_DATA_STATE,
    "state"),
  mapped_data<notification>(
    &notification::ack_author,
    NDO_DATA_ACKAUTHOR,
    "ack_author"),
  mapped_data<notification>(
    &notification::ack_data,
    NDO_DATA_ACKDATA,
    "ack_data"),
  mapped_data<notification>(
    &notification::command_name,
    NDO_DATA_COMMANDNAME,
    "command_name"),
  mapped_data<notification>(
    &notification::contact_name,
    NDO_DATA_CONTACTNAME,
    "contact_name"),
  mapped_data<notification>(
    &notification::output,
    NDO_DATA_OUTPUT,
    "output"),
  mapped_data<notification>(
    &notification::instance_id,
    NDO_DATA_INSTANCE,
    NULL),
  mapped_data<notification>()
};

// service members mapping.
static mapped_data<service> const service_mapping[] = {
  mapped_data<service>(
    &service::acknowledgement_type,
    NDO_DATA_ACKNOWLEDGEMENTTYPE,
    "acknowledgement_type"),
  mapped_data<service>(
    &service::action_url,
    NDO_DATA_ACTIONURL,
    "action_url"),
  mapped_data<service>(
    &service::active_checks_enabled,
    NDO_DATA_ACTIVESERVICECHECKSENABLED,
    "active_checks"),
  mapped_data<service>(
    &service::check_freshness,
    NDO_DATA_SERVICEFRESHNESSCHECKSENABLED,
    "check_freshness"),
  mapped_data<service>(
    &service::check_interval,
    NDO_DATA_NORMALCHECKINTERVAL,
    "check_interval"),
  mapped_data<service>(
    &service::check_period,
    NDO_DATA_SERVICECHECKPERIOD,
    "check_period"),
  mapped_data<service>(
    &service::check_type,
    NDO_DATA_CHECKTYPE,
    "check_type"),
  mapped_data<service>(
    &service::current_check_attempt,
    NDO_DATA_CURRENTCHECKATTEMPT,
    "check_attempt"),
  mapped_data<service>(
    &service::current_notification_number,
    NDO_DATA_CURRENTNOTIFICATIONNUMBER,
    "notification_number"),
  mapped_data<service>(
    &service::current_state,
    NDO_DATA_CURRENTSTATE,
    "state"),
  mapped_data<service>(
    &service::default_active_checks_enabled,
    0,
    "default_active_checks"),
  mapped_data<service>(
    &service::default_event_handler_enabled,
    0,
    "default_event_handler_enabled"),
  mapped_data<service>(
    &service::default_failure_prediction,
    0,
    "default_failure_prediction"),
  mapped_data<service>(
    &service::default_flap_detection_enabled,
    0,
    "default_flap_detection"),
  mapped_data<service>(
    &service::default_notifications_enabled,
    0,
    "default_notify"),
  mapped_data<service>(
    &service::default_passive_checks_enabled,
    0,
    "default_passive_checks"),
  mapped_data<service>(
    &service::default_process_perf_data,
    0,
    "default_process_perfdata"),
  mapped_data<service>(
    &service::display_name,
    NDO_DATA_DISPLAYNAME,
    "display_name"),
  mapped_data<service>(
    &service::enabled,
    NDO_DATA_X3D,
    "enabled"),
  mapped_data<service>(
    &service::event_handler,
    NDO_DATA_EVENTHANDLER,
    "event_handler"),
  mapped_data<service>(
    &service::event_handler_enabled,
    NDO_DATA_EVENTHANDLERENABLED,
    "event_handler_enabled"),
  mapped_data<service>(
    &service::execution_time,
    NDO_DATA_EXECUTIONTIME,
    "execution_time"),
  mapped_data<service>(
    &service::failure_prediction_enabled,
    NDO_DATA_FAILUREPREDICTIONENABLED,
    "failure_prediction"),
  mapped_data<service>(
    &service::failure_prediction_options,
    NDO_DATA_SERVICEFAILUREPREDICTIONOPTIONS,
    "failure_prediction_options"),
  mapped_data<service>(
    &service::first_notification_delay,
    NDO_DATA_FIRSTNOTIFICATIONDELAY,
    "first_notification_delay"),
  mapped_data<service>(
    &service::flap_detection_enabled,
    NDO_DATA_FLAPDETECTIONENABLED,
    "flap_detection"),
  mapped_data<service>(
    &service::flap_detection_on_critical,
    NDO_DATA_FLAPDETECTIONONCRITICAL,
    "flap_detection_on_critical"),
  mapped_data<service>(
    &service::flap_detection_on_ok,
    NDO_DATA_FLAPDETECTIONONOK,
    "flap_detection_on_ok"),
  mapped_data<service>(
    &service::flap_detection_on_unknown,
    NDO_DATA_FLAPDETECTIONONUNKNOWN,
    "flap_detection_on_unknown"),
  mapped_data<service>(
    &service::flap_detection_on_warning,
    NDO_DATA_FLAPDETECTIONONWARNING,
    "flap_detection_on_warning"),
  mapped_data<service>(
    &service::freshness_threshold,
    NDO_DATA_SERVICEFRESHNESSTHRESHOLD,
    "freshness_threshold"),
  mapped_data<service>(
    &service::has_been_checked,
    NDO_DATA_HASBEENCHECKED,
    "checked"),
  mapped_data<service>(
    &service::high_flap_threshold,
    NDO_DATA_HIGHSERVICEFLAPTHRESHOLD,
    "high_flap_threshold"),
  mapped_data<service>(
    &service::host_id,
    NDO_DATA_HOST,
    "host_id",
    NULL_ON_ZERO),
  mapped_data<service>(
    &service::host_name,
    NDO_DATA_HOSTID,
    NULL),
  mapped_data<service>(
    &service::icon_image,
    NDO_DATA_ICONIMAGE,
    "icon_image"),
  mapped_data<service>(
    &service::icon_image_alt,
    NDO_DATA_ICONIMAGEALT,
    "icon_image_alt"),
  mapped_data<service>(
    &service::service_id,
    NDO_DATA_SERVICE,
    "service_id",
    NULL_ON_ZERO),
  mapped_data<service>(
    &service::is_flapping,
    NDO_DATA_ISFLAPPING,
    "flapping"),
  mapped_data<service>(
    &service::is_volatile,
    NDO_DATA_SERVICEISVOLATILE,
    "volatile"),
  mapped_data<service>(
    &service::last_check,
    NDO_DATA_LASTSERVICECHECK,
    "last_check"),
  mapped_data<service>(
    &service::last_hard_state,
    NDO_DATA_LASTHARDSTATE,
    "last_hard_state"),
  mapped_data<service>(
    &service::last_hard_state_change,
    NDO_DATA_LASTHARDSTATECHANGE,
    "last_hard_state_change"),
  mapped_data<service>(
    &service::last_notification,
    NDO_DATA_LASTSERVICENOTIFICATION,
    "last_notification"),
  mapped_data<service>(
    &service::last_state_change,
    NDO_DATA_LASTSTATECHANGE,
    "last_state_change"),
  mapped_data<service>(
    &service::last_time_critical,
    NDO_DATA_LASTTIMECRITICAL,
    "last_time_critical"),
  mapped_data<service>(
    &service::last_time_ok,
    NDO_DATA_LASTTIMEOK,
    "last_time_ok"),
  mapped_data<service>(
    &service::last_time_unknown,
    NDO_DATA_LASTTIMEUNKNOWN,
    "last_time_unknown"),
  mapped_data<service>(
    &service::last_time_warning,
    NDO_DATA_LASTTIMEWARNING,
    "last_time_warning"),
  mapped_data<service>(
    &service::last_update,
    NDO_DATA_LASTUPDATE,
    "last_update"),
  mapped_data<service>(
    &service::latency,
    NDO_DATA_LATENCY,
    "latency"),
  mapped_data<service>(
    &service::low_flap_threshold,
    NDO_DATA_LOWSERVICEFLAPTHRESHOLD,
    "low_flap_threshold"),
  mapped_data<service>(
    &service::max_check_attempts,
    NDO_DATA_MAXCHECKATTEMPTS,
    "max_check_attempts"),
  mapped_data<service>(
    &service::modified_attributes,
    NDO_DATA_MODIFIEDSERVICEATTRIBUTES,
    "modified_attributes"),
  mapped_data<service>(
    &service::next_check,
    NDO_DATA_NEXTSERVICECHECK,
    "next_check"),
  mapped_data<service>(
    &service::next_notification,
    NDO_DATA_NEXTSERVICENOTIFICATION,
    "next_notification"),
  mapped_data<service>(
    &service::no_more_notifications,
    NDO_DATA_NOMORENOTIFICATIONS,
    "no_more_notifications"),
  mapped_data<service>(
    &service::notes,
    NDO_DATA_NOTES,
    "notes"),
  mapped_data<service>(
    &service::notes_url,
    NDO_DATA_NOTESURL,
    "notes_url"),
  mapped_data<service>(
    &service::notification_interval,
    NDO_DATA_SERVICENOTIFICATIONINTERVAL,
    "notification_interval"),
  mapped_data<service>(
    &service::notification_period,
    NDO_DATA_SERVICENOTIFICATIONPERIOD,
    "notification_period"),
  mapped_data<service>(
    &service::notifications_enabled,
    NDO_DATA_NOTIFICATIONSENABLED,
    "notify"),
  mapped_data<service>(
    &service::notify_on_critical,
    NDO_DATA_NOTIFYSERVICECRITICAL,
    "notify_on_critical"),
  mapped_data<service>(
    &service::notify_on_downtime,
    NDO_DATA_NOTIFYSERVICEDOWNTIME,
    "notify_on_downtime"),
  mapped_data<service>(
    &service::notify_on_flapping,
    NDO_DATA_NOTIFYSERVICEFLAPPING,
    "notify_on_flapping"),
  mapped_data<service>(
    &service::notify_on_recovery,
    NDO_DATA_NOTIFYSERVICERECOVERY,
    "notify_on_recovery"),
  mapped_data<service>(
    &service::notify_on_unknown,
    NDO_DATA_NOTIFYSERVICEUNKNOWN,
    "notify_on_unknown"),
  mapped_data<service>(
    &service::notify_on_warning,
    NDO_DATA_NOTIFYSERVICEWARNING,
    "notify_on_warning"),
  mapped_data<service>(
    &service::obsess_over,
    NDO_DATA_OBSESSOVERSERVICE,
    "obsess_over_service"),
  mapped_data<service>(
    &service::passive_checks_enabled,
    NDO_DATA_PASSIVESERVICECHECKSENABLED,
    "passive_checks"),
  mapped_data<service>(
    &service::percent_state_change,
    NDO_DATA_PERCENTSTATECHANGE,
    "percent_state_change"),
  mapped_data<service>(
    &service::problem_has_been_acknowledged,
    NDO_DATA_PROBLEMHASBEENACKNOWLEDGED,
    "acknowledged"),
  mapped_data<service>(
    &service::process_performance_data,
    NDO_DATA_PROCESSPERFORMANCEDATA,
    "process_perfdata"),
  mapped_data<service>(
    &service::retain_nonstatus_information,
    NDO_DATA_RETAINSERVICENONSTATUSINFORMATION,
    "retain_nonstatus_information"),
  mapped_data<service>(
    &service::retain_status_information,
    NDO_DATA_RETAINSERVICESTATUSINFORMATION,
    "retain_status_information"),
  mapped_data<service>(
    &service::retry_interval,
    NDO_DATA_RETRYCHECKINTERVAL,
    "retry_interval"),
  mapped_data<service>(
    &service::scheduled_downtime_depth,
    NDO_DATA_SCHEDULEDDOWNTIMEDEPTH,
    "scheduled_downtime_depth"),
  mapped_data<service>(
    &service::service_description,
    NDO_DATA_SERVICEDESCRIPTION,
    "description"),
  mapped_data<service>(
    &service::should_be_scheduled,
    NDO_DATA_SHOULDBESCHEDULED,
    "should_be_scheduled"),
  mapped_data<service>(
    &service::stalk_on_critical,
    NDO_DATA_STALKSERVICEONCRITICAL,
    "stalk_on_critical"),
  mapped_data<service>(
    &service::stalk_on_ok,
    NDO_DATA_STALKSERVICEONOK,
    "stalk_on_ok"),
  mapped_data<service>(
    &service::stalk_on_unknown,
    NDO_DATA_STALKSERVICEONUNKNOWN,
    "stalk_on_unknown"),
  mapped_data<service>(
    &service::stalk_on_warning,
    NDO_DATA_STALKSERVICEONWARNING,
    "stalk_on_warning"),
  mapped_data<service>(
    &service::state_type,
    NDO_DATA_STATETYPE,
    "state_type"),
  mapped_data<service>(
    &service::check_command,
    NDO_DATA_CHECKCOMMAND,
    "check_command"),
  mapped_data<service>(
    &service::output,
    NDO_DATA_OUTPUT,
    "output"),
  mapped_data<service>(
    &service::perf_data,
    NDO_DATA_PERFDATA,
    "perfdata"),
  mapped_data<service>(
    &service::instance_id,
    NDO_DATA_INSTANCE,
    NULL),
  mapped_data<service>()
};

// service_check members mapping.
static mapped_data<service_check> const service_check_mapping[] = {
  mapped_data<service_check>(
    &service_check::active_checks_enabled,
    NDO_DATA_ACTIVESERVICECHECKSENABLED,
    NULL),
  mapped_data<service_check>(
    &service_check::check_type,
    NDO_DATA_CHECKTYPE,
    NULL),
  mapped_data<service_check>(
    &service_check::host_id,
    NDO_DATA_HOST,
    "host_id",
    NULL_ON_ZERO),
  mapped_data<service_check>(
    &service_check::next_check,
    NDO_DATA_NEXTSERVICECHECK,
    NULL),
  mapped_data<service_check>(
    &service_check::service_id,
    NDO_DATA_SERVICE,
    "service_id",
    NULL_ON_ZERO),
  mapped_data<service_check>(
    &service_check::command_line,
    NDO_DATA_COMMANDLINE,
    "command_line"),
  mapped_data<service_check>(
    &service_check::instance_id,
    NDO_DATA_INSTANCE,
    NULL),
  mapped_data<service_check>()
};

// service_dependency members mapping.
static mapped_data<service_dependency> const service_dependency_mapping[] = {
  mapped_data<service_dependency>(
    &service_dependency::dependency_period,
    NDO_DATA_DEPENDENCYPERIOD,
    "dependency_period"),
  mapped_data<service_dependency>(
    &service_dependency::dependent_host_id,
    NDO_DATA_DEPENDENTHOSTNAME,
    "dependent_host_id",
    NULL_ON_ZERO),
  mapped_data<service_dependency>(
    &service_dependency::dependent_service_id,
    NDO_DATA_DEPENDENTSERVICEDESCRIPTION,
    "dependent_service_id",
    NULL_ON_ZERO),
  mapped_data<service_dependency>(
    &service_dependency::enabled,
    NDO_DATA_FIXED,
    NULL),
  mapped_data<service_dependency>(
    &service_dependency::execution_failure_options,
    NDO_DATA_SERVICEFAILUREPREDICTIONOPTIONS,
    "execution_failure_options"),
  mapped_data<service_dependency>(
    &service_dependency::host_id,
    NDO_DATA_HOST,
    "host_id",
    NULL_ON_ZERO),
  mapped_data<service_dependency>(
    &service_dependency::inherits_parent,
    NDO_DATA_INHERITSPARENT,
    "inherits_parent"),
  mapped_data<service_dependency>(
    &service_dependency::notification_failure_options,
    NDO_DATA_SERVICENOTIFICATIONCOMMAND,
    "notification_failure_options"),
  mapped_data<service_dependency>(
    &service_dependency::service_id,
    NDO_DATA_SERVICE,
    "service_id",
    NULL_ON_ZERO),
  mapped_data<service_dependency>(
    &service_dependency::instance_id,
    NDO_DATA_INSTANCE,
    NULL),
  mapped_data<service_dependency>()
};

// service_group members mapping.
static mapped_data<service_group> const service_group_mapping[] = {
  mapped_data<service_group>(
    &service_group::action_url,
    NDO_DATA_ACTIONURL,
    "action_url"),
  mapped_data<service_group>(
    &service_group::alias,
    NDO_DATA_SERVICEGROUPALIAS,
    "alias"),
  mapped_data<service_group>(
    &service_group::enabled,
    NDO_DATA_FIXED,
    "enabled"),
  mapped_data<service_group>(
    &service_group::instance_id,
    NDO_DATA_INSTANCE,
    "instance_id",
    NULL_ON_ZERO),
  mapped_data<service_group>(
    &service_group::name,
    NDO_DATA_SERVICEGROUPNAME,
    "name"),
  mapped_data<service_group>(
    &service_group::notes,
    NDO_DATA_NOTES,
    "notes"),
  mapped_data<service_group>(
    &service_group::notes_url,
    NDO_DATA_NOTESURL,
    "notes_url"),
  mapped_data<service_group>()
};

// service_group_member members mapping.
static mapped_data<service_group_member> const service_group_member_mapping[] = {
  mapped_data<service_group_member>(
    &service_group_member::enabled,
    NDO_DATA_FIXED,
    NULL),
  mapped_data<service_group_member>(
    &service_group_member::group, // XXX : should be replaced by servicegroup_id
    NDO_DATA_SERVICEGROUPNAME,
    "group"),
  mapped_data<service_group_member>(
    &service_group_member::host_id,
    NDO_DATA_HOST,
    "host_id",
    NULL_ON_ZERO),
  mapped_data<service_group_member>(
    &service_group_member::instance_id,
    NDO_DATA_INSTANCE,
    "instance_id"),
  mapped_data<service_group_member>(
    &service_group_member::service_id,
    NDO_DATA_SERVICEGROUPMEMBER,
    "service_id",
    NULL_ON_ZERO),
  mapped_data<service_group_member>()
};

// service_state members mapping.
static mapped_data<service_state> const service_state_mapping [] = {
  mapped_data<service_state>(
    &service_state::ack_time,
    1,
    "ack_time",
    NULL_ON_MINUS_ONE),
  mapped_data<service_state>(
    &service_state::current_state,
    2,
    "state"),
  mapped_data<service_state>(
    &service_state::end_time,
    3,
    "end_time",
    NULL_ON_ZERO),
  mapped_data<service_state>(
    &service_state::host_id,
    4,
    "host_id"),
  mapped_data<service_state>(
    &service_state::in_downtime,
    5,
    "in_downtime"),
  mapped_data<service_state>(
    &service_state::service_id,
    6,
    "service_id"),
  mapped_data<service_state>(
    &service_state::start_time,
    7,
    "start_time"),
  mapped_data<service_state>(
    &service_state::instance_id,
    8,
    NULL),
  mapped_data<service_state>()
};

// service_status members mapping.
static mapped_data<service_status> const service_status_mapping[] = {
  mapped_data<service_status>(
    &service_status::acknowledgement_type,
    NDO_DATA_ACKNOWLEDGEMENTTYPE,
    "acknowledgement_type"),
  mapped_data<service_status>(
    &service_status::active_checks_enabled,
    NDO_DATA_ACTIVESERVICECHECKSENABLED,
    "active_checks"),
  mapped_data<service_status>(
    &service_status::check_interval,
    NDO_DATA_NORMALCHECKINTERVAL,
    "check_interval"),
  mapped_data<service_status>(
    &service_status::check_period,
    NDO_DATA_SERVICECHECKPERIOD,
    "check_period"),
  mapped_data<service_status>(
    &service_status::check_type,
    NDO_DATA_CHECKTYPE,
    "check_type"),
  mapped_data<service_status>(
    &service_status::current_check_attempt,
    NDO_DATA_CURRENTCHECKATTEMPT,
    "check_attempt"),
  mapped_data<service_status>(
    &service_status::current_notification_number,
    NDO_DATA_CURRENTNOTIFICATIONNUMBER,
    "notification_number"),
  mapped_data<service_status>(
    &service_status::current_state,
    NDO_DATA_CURRENTSTATE,
    "state"),
  mapped_data<service_status>(
    &service_status::enabled,
    NDO_DATA_X3D,
    "enabled"),
  mapped_data<service_status>(
    &service_status::event_handler,
    NDO_DATA_EVENTHANDLER,
    "event_handler"),
  mapped_data<service_status>(
    &service_status::event_handler_enabled,
    NDO_DATA_EVENTHANDLERENABLED,
    "event_handler_enabled"),
  mapped_data<service_status>(
    &service_status::execution_time,
    NDO_DATA_EXECUTIONTIME,
    "execution_time"),
  mapped_data<service_status>(
    &service_status::failure_prediction_enabled,
    NDO_DATA_FAILUREPREDICTIONENABLED,
    "failure_prediction"),
  mapped_data<service_status>(
    &service_status::flap_detection_enabled,
    NDO_DATA_FLAPDETECTIONENABLED,
    "flap_detection"),
  mapped_data<service_status>(
    &service_status::has_been_checked,
    NDO_DATA_HASBEENCHECKED,
    "checked"),
  mapped_data<service_status>(
    &service_status::host_id,
    NDO_DATA_HOST,
    "host_id",
    NULL_ON_ZERO),
  mapped_data<service_status>(
    &service_status::host_name,
    NDO_DATA_HOSTID,
    NULL),
  mapped_data<service_status>(
    &service_status::is_flapping,
    NDO_DATA_ISFLAPPING,
    "flapping"),
  mapped_data<service_status>(
    &service_status::last_check,
    NDO_DATA_LASTSERVICECHECK,
    "last_check"),
  mapped_data<service_status>(
    &service_status::last_hard_state,
    NDO_DATA_LASTHARDSTATE,
    "last_hard_state"),
  mapped_data<service_status>(
    &service_status::last_hard_state_change,
    NDO_DATA_LASTHARDSTATECHANGE,
    "last_hard_state_change"),
  mapped_data<service_status>(
    &service_status::last_notification,
    NDO_DATA_LASTSERVICENOTIFICATION,
    "last_notification"),
  mapped_data<service_status>(
    &service_status::last_state_change,
    NDO_DATA_LASTSTATECHANGE,
    "last_state_change"),
  mapped_data<service_status>(
    &service_status::last_time_critical,
    NDO_DATA_LASTTIMECRITICAL,
    "last_time_critical"),
  mapped_data<service_status>(
    &service_status::last_time_ok,
    NDO_DATA_LASTTIMEOK,
    "last_time_ok"),
  mapped_data<service_status>(
    &service_status::last_time_unknown,
    NDO_DATA_LASTTIMEUNKNOWN,
    "last_time_unknown"),
  mapped_data<service_status>(
    &service_status::last_time_warning,
    NDO_DATA_LASTTIMEWARNING,
    "last_time_warning"),
  mapped_data<service_status>(
    &service_status::last_update,
    NDO_DATA_LASTUPDATE,
    "last_update"),
  mapped_data<service_status>(
    &service_status::latency,
    NDO_DATA_LATENCY,
    "latency"),
  mapped_data<service_status>(
    &service_status::max_check_attempts,
    NDO_DATA_MAXCHECKATTEMPTS,
    "max_check_attempts"),
  mapped_data<service_status>(
    &service_status::modified_attributes,
    NDO_DATA_MODIFIEDSERVICEATTRIBUTES,
    "modified_attributes"),
  mapped_data<service_status>(
    &service_status::next_check,
    NDO_DATA_NEXTSERVICECHECK,
    "next_check"),
  mapped_data<service_status>(
    &service_status::next_notification,
    NDO_DATA_NEXTSERVICENOTIFICATION,
    "next_notification"),
  mapped_data<service_status>(
    &service_status::no_more_notifications,
    NDO_DATA_NOMORENOTIFICATIONS,
    "no_more_notifications"),
  mapped_data<service_status>(
    &service_status::notifications_enabled,
    NDO_DATA_NOTIFICATIONSENABLED,
    "notify"),
  mapped_data<service_status>(
    &service_status::obsess_over,
    NDO_DATA_OBSESSOVERSERVICE,
    "obsess_over_service"),
  mapped_data<service_status>(
    &service_status::passive_checks_enabled,
    NDO_DATA_PASSIVESERVICECHECKSENABLED,
    "passive_checks"),
  mapped_data<service_status>(
    &service_status::percent_state_change,
    NDO_DATA_PERCENTSTATECHANGE,
    "percent_state_change"),
  mapped_data<service_status>(
    &service_status::problem_has_been_acknowledged,
    NDO_DATA_PROBLEMHASBEENACKNOWLEDGED,
    "acknowledged"),
  mapped_data<service_status>(
    &service_status::process_performance_data,
    NDO_DATA_PROCESSPERFORMANCEDATA,
    "process_perfdata"),
  mapped_data<service_status>(
    &service_status::retry_interval,
    NDO_DATA_RETRYCHECKINTERVAL,
    "retry_interval"),
  mapped_data<service_status>(
    &service_status::scheduled_downtime_depth,
    NDO_DATA_SCHEDULEDDOWNTIMEDEPTH,
    "scheduled_downtime_depth"),
  mapped_data<service_status>(
    &service_status::service_description,
    NDO_DATA_SERVICEDESCRIPTION,
    NULL),
  mapped_data<service_status>(
    &service_status::service_id,
    NDO_DATA_SERVICE,
    "service_id",
    NULL_ON_ZERO),
  mapped_data<service_status>(
    &service_status::should_be_scheduled,
    NDO_DATA_SHOULDBESCHEDULED,
    "should_be_scheduled"),
  mapped_data<service_status>(
    &service_status::state_type,
    NDO_DATA_STATETYPE,
    "state_type"),
  mapped_data<service_status>(
    &service_status::check_command,
    NDO_DATA_CHECKCOMMAND,
    "check_command"),
  mapped_data<service_status>(
    &service_status::output,
    NDO_DATA_OUTPUT,
    "output"),
  mapped_data<service_status>(
    &service_status::perf_data,
    NDO_DATA_PERFDATA,
    "perfdata"),
  mapped_data<service_status>(
    &service_status::instance_id,
    NDO_DATA_INSTANCE,
    NULL),
  mapped_data<service_status>()
};
