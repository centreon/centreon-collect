##
## Copyright 2011-2015,2017-2019 Centreon
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
## For more information : contact@centreon.com
##

# Global options.
include(${CMAKE_SOURCE_DIR}/cmake/Findclib.cmake)
include(${CMAKE_SOURCE_DIR}/cmake/Findperl.cmake)

include_directories("${PROJECT_SOURCE_DIR}/inc" "/usr/lib64/perl5/CORE")

# Project version.
set(CONNECTOR_PERL_MAJOR 20)
set(CONNECTOR_PERL_MINOR 04)
set(CONNECTOR_PERL_PATCH 0)
set(CONNECTOR_PERL_VERSION "${CONNECTOR_PERL_MAJOR}.${CONNECTOR_PERL_MINOR}.${CONNECTOR_PERL_PATCH}")
add_definitions(-DCENTREON_CONNECTOR_PERL_VERSION=\"${CONNECTOR_PERL_VERSION}\")


# Generate code to dynamically load modules.
add_custom_command(OUTPUT "${CMAKE_SOURCE_DIR}/perl/src/xs_init.cc"
  COMMAND "${PERL_EXECUTABLE}" "-MExtUtils::Embed" "-e" "xsinit" "--" "-o" "${CMAKE_SOURCE_DIR}/perl/src/xs_init.cc")

# Disable some warnings generated by Embedded Perl.
get_property(EMBEDDED_PERL_CXXFLAGS SOURCE ${SRC_DIR}/embedded_perl.cc
  PROPERTY COMPILE_FLAGS)
if (EMBEDDED_PERL_CXXFLAGS)
  string(REGEX REPLACE "-pedantic *"
    EMBEDDED_PERL_CXXFLAGS "${EMBEDDED_PERL_CXXFLAGS}")
  set_property(SOURCE "${SRC_DIR}/embedded_perl.cc"
    PROPERTY COMPILE_FLAGS "${EMBEDDED_PERL_CXXFLAGS}")
endif ()

include_directories(${CMAKE_SOURCE_DIR}/perl/inc/)
# Perl connector.
add_executable(centreon_connector_perl
  # Sources.
  ${CMAKE_SOURCE_DIR}/perl/src/main.cc
  # Sources.
  ${CMAKE_SOURCE_DIR}/perl/src/checks/check.cc
  ${CMAKE_SOURCE_DIR}/perl/src/checks/result.cc
  ${CMAKE_SOURCE_DIR}/perl/src/checks/timeout.cc
  ${CMAKE_SOURCE_DIR}/perl/src/embedded_perl.cc
  ${CMAKE_SOURCE_DIR}/perl/src/multiplexer.cc
  ${CMAKE_SOURCE_DIR}/perl/src/options.cc
  ${CMAKE_SOURCE_DIR}/perl/src/orders/parser.cc
  ${CMAKE_SOURCE_DIR}/perl/src/pipe_handle.cc
  ${CMAKE_SOURCE_DIR}/perl/src/policy.cc
  ${CMAKE_SOURCE_DIR}/perl/src/reporter.cc
  ${CMAKE_SOURCE_DIR}/perl/src/script.cc
  ${CMAKE_SOURCE_DIR}/perl/src/xs_init.cc
  # Headers.
  ${CMAKE_SOURCE_DIR}/perl/inc/com/centreon/connector/perl/checks/check.hh
  ${CMAKE_SOURCE_DIR}/perl/inc/com/centreon/connector/perl/checks/listener.hh
  ${CMAKE_SOURCE_DIR}/perl/inc/com/centreon/connector/perl/checks/result.hh
  ${CMAKE_SOURCE_DIR}/perl/inc/com/centreon/connector/perl/checks/timeout.hh
  ${CMAKE_SOURCE_DIR}/perl/inc/com/centreon/connector/perl/embedded_perl.hh
  ${CMAKE_SOURCE_DIR}/perl/inc/com/centreon/connector/perl/multiplexer.hh
  ${CMAKE_SOURCE_DIR}/perl/inc/com/centreon/connector/perl/namespace.hh
  ${CMAKE_SOURCE_DIR}/perl/inc/com/centreon/connector/perl/options.hh
  ${CMAKE_SOURCE_DIR}/perl/inc/com/centreon/connector/perl/orders/listener.hh
  ${CMAKE_SOURCE_DIR}/perl/inc/com/centreon/connector/perl/orders/parser.hh
  ${CMAKE_SOURCE_DIR}/perl/inc/com/centreon/connector/perl/pipe_handle.hh
  ${CMAKE_SOURCE_DIR}/perl/inc/com/centreon/connector/perl/policy.hh
  ${CMAKE_SOURCE_DIR}/perl/inc/com/centreon/connector/perl/reporter.hh
  )

target_link_libraries(centreon_connector_perl ${CLIB_LIBRARIES} ${PERL_LIBRARIES} pthread)

# Installation path.
if (WITH_PREFIX)
  set(CMAKE_INSTALL_PREFIX "${WITH_PREFIX}")
endif ()
if (WITH_PREFIX_BINARY)
  set(PREFIX_BINARY "${WITH_PREFIX_BINARY}")
else ()
  set(PREFIX_BINARY "${CMAKE_INSTALL_PREFIX}/bin")
endif ()

# Install rules.
install(TARGETS centreon_connector_perl RUNTIME DESTINATION ${PREFIX_BINARY})

# Code coverage on unit tests
option(WITH_COVERAGE "Add code coverage on unit tests." OFF)
if (WITH_COVERAGE)
  set(WITH_TESTING ON)
  set(CMAKE_BUILD_TYPE "Debug")
  include(CodeCoverage.cmake)
  APPEND_COVERAGE_COMPILER_FLAGS()
endif ()

# Testing.
option(WITH_TESTING "Build unit tests." OFF)
if (WITH_TESTING)
  # Enable testing.
  enable_testing()
  include_directories("${PROJECT_SOURCE_DIR}")
  set(CONNECTOR_TEST_DIR "${PROJECT_SOURCE_DIR}/test/connector")
  get_property(CONNECTOR_PERL_BINARY
    TARGET "${CONNECTOR}"
    PROPERTY LOCATION)
  configure_file(
    "${TEST_DIR}/connector/paths.hh.in"
    "${TEST_DIR}/connector/paths.hh")

  set(CONNECTOR_TEST_LIST
    ${TEST_DIR}/embedded_perl/run_simple_1.cc
    ${TEST_DIR}/embedded_perl/run_simple_2.cc
    )

  foreach (name ${CONNECTOR_TEST_LIST})
    # name cc file => bin_name binary name
    string(REGEX REPLACE "^${TEST_DIR}/" "" bin_name ${name})
    string(REGEX REPLACE "/" "_" bin_name ${bin_name})
    string(REGEX REPLACE ".cc$" "" bin_name ${bin_name})

    add_executable("${bin_name}" "${name}")
    target_link_libraries("${bin_name}" "${CONNECTORLIB}")
    add_test("${bin_name}" "${bin_name}")
    list(APPEND TEST_BIN_LIST ${bin_name})
  endforeach ()

  #
  # Process tests.
  #
  # Help.
  add_test("connector_help" "${CONNECTOR}" "--help")
  list(APPEND TEST_BIN_TEST "connector_help")

  # Version.
  add_test("connector_version" "${CONNECTOR}" "--version")
  list(APPEND TEST_BIN_TEST "connector_version")
  # Invalid flag.
  add_test("connector_invalid_flag" "${CONNECTOR}" "--merethis")
  list(APPEND TEST_BIN_LIST "connector_invalid_flag")

  set_tests_properties("connector_invalid_flag"
    PROPERTIES WILL_FAIL TRUE)
  # Execution library.
  add_library("test_execute" STATIC
    "${TEST_DIR}/connector/misc.cc"
    "${TEST_DIR}/connector/misc.hh")
  set(TEST_LIBRARIES ${CLIB_LIBRARIES} "test_execute")

  # EOF on stdin.
  set(TEST_NAME "connector_eof_on_stdin")
  add_executable("${TEST_NAME}"
    "${TEST_DIR}/connector/eof_on_stdin.cc")
  target_link_libraries("${TEST_NAME}" ${CLIB_LIBRARIES})
  add_test("${TEST_NAME}" "${TEST_NAME}")
  list(APPEND TEST_BIN_LIST "connector_eof_on_stdin")

  set(TEST_LIST
    ${TEST_DIR}/connector/non_existent_script.cc
    ${TEST_DIR}/connector/timeout_term.cc
    ${TEST_DIR}/connector/timeout_kill.cc
    ${TEST_DIR}/connector/execute_single_script.cc
    ${TEST_DIR}/connector/execute_single_script_log_file.cc
    ${TEST_DIR}/connector/execute_multiple_scripts.cc
    ${TEST_DIR}/connector/execute_with_additional_code.cc
    ${TEST_DIR}/connector/execute_module_loading.cc
  )

  foreach (name ${TEST_LIST})
    # name cc file => bin_name binary name
    string(REGEX REPLACE "^${TEST_DIR}/" "" bin_name ${name})
    string(REGEX REPLACE "/" "_" bin_name ${bin_name})
    string(REGEX REPLACE ".cc$" "" bin_name ${bin_name})

    add_executable("${bin_name}" "${name}")
    target_link_libraries("${bin_name}" "${TEST_LIBRARIES}")
    add_test("${bin_name}" "${bin_name}")
    list(APPEND TEST_BIN_LIST ${bin_name})
  endforeach ()

  if (WITH_COVERAGE)
    set(COVERAGE_EXCLUDES '${PROJECT_BINARY_DIR}/*' '${PROJECT_SOURCE_DIR}/test/*' '/usr/include/*')
    SETUP_TARGET_FOR_COVERAGE(
      NAME test-coverage
      EXECUTABLE ctest
      DEPENDENCIES
      ${TEST_BIN_LIST}
      )
  endif ()

endif ()
