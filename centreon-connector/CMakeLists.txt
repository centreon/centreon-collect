#
# Copyright 2021-2022 Centreon
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY # KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
#
# For more information : contact@centreon.com
#

# Global options.
cmake_minimum_required(VERSION 3.16)
project(connectors CXX)
add_definitions("-D_GLIBCXX_USE_CXX11_ABI=1")
set(CMAKE_CXX_STANDARD 14)

set(VERSION "$ENV{VERSION}")

if("${VERSION}" STREQUAL "")
  set(CONNECTOR_MAJOR ${COLLECT_MAJOR})
  set(CONNECTOR_MINOR ${COLLECT_MINOR})
  set(CONNECTOR_PATCH ${COLLECT_PATCH})
else()
  string(REGEX MATCHALL "([0-9]*)\\.([0-9]*)\\.([0-9]*)" _ "${VERSION}")

  # Version.
  set(CONNECTOR_MAJOR ${CMAKE_MATCH_1})
  set(CONNECTOR_MINOR ${CMAKE_MATCH_2})
  set(CONNECTOR_PATCH ${CMAKE_MATCH_3})
endif()

set(CONNECTOR_VERSION
    "${CONNECTOR_MAJOR}.${CONNECTOR_MINOR}.${CONNECTOR_PATCH}")
add_definitions(-DCENTREON_CONNECTOR_VERSION=\"${CONNECTOR_VERSION}\")

include(${PROJECT_SOURCE_DIR}/cmake/Findperl.cmake)

# Generate code to dynamically load modules.

# Disable some warnings generated by Embedded Perl.
get_property(
  EMBEDDED_PERL_CXXFLAGS
  SOURCE ${PROJECT_SOURCE_DIR}/perl/src/embedded_perl.cc
  PROPERTY COMPILE_FLAGS)

if(EMBEDDED_PERL_CXXFLAGS)
  string(REGEX REPLACE "-pedantic *" EMBEDDED_PERL_CXXFLAGS
                       "${EMBEDDED_PERL_CXXFLAGS}")
  set_property(SOURCE "${PROJECT_SOURCE_DIR}/perl/src/embedded_perl.cc"
               PROPERTY COMPILE_FLAGS "${EMBEDDED_PERL_CXXFLAGS}")
endif()

# We will use pkg-config if available.
include_directories(${PROJECT_SOURCE_DIR}/common/inc)

# Installation path.
set(PREFIX_CONNECTORS "${CMAKE_INSTALL_PREFIX}/lib64/centreon-connector/")

add_subdirectory(perl)
add_subdirectory(ssh)

# Testing.
option(WITH_TESTING "Build unit tests." OFF)

if(WITH_TESTING)
  find_package(GTest REQUIRED)

  set_source_files_properties(${PROJECT_SOURCE_DIR}/perl/src/xs_init.cc
                              PROPERTIES GENERATED TRUE)
  include_directories(${GTest_INCLUDE_DIRS})
  include_directories(/usr/lib64/perl5/CORE)

  link_directories(${GTest_LIB_DIRS})

  include_directories(${PROJECT_SOURCE_DIR}/perl/inc)
  include_directories(${PROJECT_SOURCE_DIR}/ssh/inc)
  include_directories(${Libssh2_INCLUDE_DIR})

  add_definitions(-DBUILD_PATH="${CMAKE_BINARY_DIR}")

  add_executable(
    ut_connector
    # Core sources
    ${PROJECT_SOURCE_DIR}/perl/src/embedded_perl.cc
    ${PROJECT_SOURCE_DIR}/common/src/log.cc
    ${PROJECT_SOURCE_DIR}/common/src/result.cc
    ${PROJECT_SOURCE_DIR}/common/src/reporter.cc
    ${PROJECT_SOURCE_DIR}/common/src/parser.cc
    ${PROJECT_SOURCE_DIR}/perl/src/checks/check.cc
    ${PROJECT_SOURCE_DIR}/perl/src/script.cc
    ${PROJECT_SOURCE_DIR}/perl/src/xs_init.cc
    ${PROJECT_SOURCE_DIR}/ssh/src/checks/check.cc
    ${PROJECT_SOURCE_DIR}/ssh/src/orders/options.cc
    ${PROJECT_SOURCE_DIR}/ssh/src/orders/parser.cc
    ${PROJECT_SOURCE_DIR}/ssh/src/sessions/credentials.cc
    ${PROJECT_SOURCE_DIR}/ssh/src/sessions/session.cc
    # Test sources.
    ${PROJECT_SOURCE_DIR}/perl/test/main.cc
    ${PROJECT_SOURCE_DIR}/perl/test/connector.cc
    ${PROJECT_SOURCE_DIR}/perl/test/embedded_perl.cc
    ${PROJECT_SOURCE_DIR}/ssh/test/buffer_handle.cc
    ${PROJECT_SOURCE_DIR}/ssh/test/checks.cc
    ${PROJECT_SOURCE_DIR}/ssh/test/connector.cc
    ${PROJECT_SOURCE_DIR}/ssh/test/fake_listener.cc
    ${PROJECT_SOURCE_DIR}/ssh/test/orders.cc
    ${PROJECT_SOURCE_DIR}/ssh/test/reporter.cc
    ${PROJECT_SOURCE_DIR}/ssh/test/sessions.cc)
  add_dependencies(ut_connector centreon_connector_perl)
  add_dependencies(ut_connector centreon_clib)
  target_link_libraries(
    ut_connector
    CONAN_PKG::gtest
    centreon_clib
    ${PERL_LIBRARIES}
    CONAN_PKG::spdlog
    CONAN_PKG::libssh2
    CONAN_PKG::abseil)
  target_precompile_headers(ut_connector PRIVATE ssh/precomp_inc/precomp.hh)
  set_target_properties(
    ut_connector
    PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/tests
               RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}/tests
               RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/tests
               RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${CMAKE_BINARY_DIR}/tests
               RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${CMAKE_BINARY_DIR}/tests)
endif(WITH_TESTING)
