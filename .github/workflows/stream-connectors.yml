name: stream-connectors

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  pull_request:
    paths:
      - stream-connectors/**
  push:
    branches:
      - develop
      - dev-[2-9][0-9].[0-9][0-9].x
      - master
      - "[2-9][0-9].[0-9][0-9].x"
    paths:
      - stream-connectors/**

env:
  REGISTRY: centreon.jfrog.io/docker

jobs:
  get-version:
    uses: ./.github/workflows/get-version.yml

  package-rpm:
    needs: [get-version]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - image: packaging-alma8
            distrib: el8
          - image: packaging-alma9
            distrib: el9
    name: package ${{ matrix.distrib }}
    container:
      image: centreon.jfrog.io/docker/${{ matrix.image }}:${{ needs.get-version.outputs.version }}
      credentials:
        username: ${{ secrets.AUTOMATION_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - run: |
          mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}

          tar czf ~/rpmbuild/SOURCES/centreon-stream-connectors-lib.tar.gz centreon-stream-connectors-lib

          rpmbuild -ba packaging/rpm/centreon-stream-connectors-lib.spec

          cp -r ~/rpmbuild/RPMS/**/*.rpm ../../
        working-directory: stream-connectors/modules
        shell: bash

      - uses: actions/cache@v3
        with:
          path: ./*.rpm
          key: unsigned-${{ github.sha }}-${{ github.run_id }}-rpm-${{ matrix.distrib }}

  sign-rpm:
    needs: [package-rpm]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - image: packaging-alma8
            distrib: el8
          - image: packaging-alma9
            distrib: el9
    name: sign rpm ${{ matrix.distrib }}
    container:
      image: centreon.jfrog.io/docker/rpm-signing:ubuntu
      options: -t
      credentials:
        username: ${{ secrets.AUTOMATION_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}

    steps:
      - run: apt-get install -y zstd
        shell: bash

      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: ./*.rpm
          key: unsigned-${{ github.sha }}-${{ github.run_id }}-rpm-${{ matrix.distrib }}

      - run: echo "HOME=/root" >> $GITHUB_ENV
        shell: bash

      - run: rpmsign --addsign ./*.rpm
        shell: bash

      - uses: actions/cache@v3
        with:
          path: ./*.rpm
          key: ${{ github.sha }}-${{ github.run_id }}-rpm-${{ matrix.distrib }}

  package-deb:
    needs: [get-version]
    runs-on: [self-hosted, common]
    strategy:
      matrix:
        include:
          - image: packaging-bullseye
            distrib: bullseye
    name: package ${{ matrix.distrib }}
    container:
      image: centreon.jfrog.io/docker/${{ matrix.image }}:${{ needs.get-version.outputs.version }}
      credentials:
        username: ${{ secrets.AUTOMATION_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - run: |
          mkdir -p centreon-stream-connectors-lib-${{ needs.get-version.outputs.version }}/debian

          cp -rp centreon-stream-connectors-lib/* centreon-stream-connectors-lib-${{ needs.get-version.outputs.version }}/
          cp -rp packaging/deb/* centreon-stream-connectors-lib-${{ needs.get-version.outputs.version }}/debian/

          tar czf centreon-stream-connectors-lib-${{ needs.get-version.outputs.version }}.tar.gz centreon-stream-connectors-lib-${{ needs.get-version.outputs.version }}

          cd centreon-stream-connectors-lib-${{ needs.get-version.outputs.version }}

          debmake -f "centreon" -e "contact@centreon.com" -y -r ${{ matrix.distrib }}
          debuild-pbuilder --no-lintian
        working-directory: stream-connectors/modules
        shell: bash

      - uses: actions/cache@v3
        with:
          path: ./*.deb
          key: ${{ github.sha }}-${{ github.run_id }}-deb-${{ matrix.distrib }}

  deliver-rpm:
    if: ${{ contains(fromJson('["unstable", "testing", "stable"]'), needs.get-version.outputs.stability) }}
    needs: [get-version, sign-rpm]
    runs-on: [self-hosted, common]
    strategy:
      matrix:
        distrib: [el8, el9]
    name: deliver ${{ matrix.distrib }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Publish RPM packages
        uses: ./.github/actions/delivery
        with:
          distrib: ${{ matrix.distrib }}
          version: ${{ needs.get-version.outputs.version }}
          minor_version: ${{ needs.get-version.outputs.patch }}
          release: ${{ needs.get-version.outputs.release }}
          module_name: stream-connectors
          nexus_username: ${{ secrets.NEXUS_USERNAME }}
          nexus_password: ${{ secrets.NEXUS_PASSWORD }}
          artifactory_token: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
          cache_key: ${{ github.sha }}-${{ github.run_id }}-rpm-${{ matrix.distrib }}
          update_repo_path: ${{ secrets.UPDATE_REPO_PATH }}
          cloudfront_id: ${{ secrets.CLOUDFRONT_ID }}
          yum_repo_address: ${{ secrets.YUM_REPO_ADDRESS }}
          yum_repo_key: ${{ secrets.YUM_REPO_KEY }}
          yum_repo_url: ${{ secrets.YUM_REPO_URL }}

  deliver-deb:
    if: ${{ contains(fromJson('["unstable", "testing", "stable"]'), needs.get-version.outputs.stability) }}
    needs: [get-version, package-deb]
    runs-on: [self-hosted, common]
    strategy:
      matrix:
        distrib: [bullseye]
    name: deliver ${{ matrix.distrib }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Publish DEB packages
        uses: ./.github/actions/delivery
        with:
          distrib: ${{ matrix.distrib }}
          repository_name: standard
          version: ${{ needs.get-version.outputs.version }}
          repos_username: ${{ secrets.NEXUS_USERNAME }}
          repos_password: ${{ secrets.NEXUS_PASSWORD }}
          artifactory_token: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
          cache_key: ${{ github.sha }}-${{ github.run_id }}-deb-${{ matrix.distrib }}
