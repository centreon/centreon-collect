name: stream-connectors

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  pull_request:
    paths:
      - stream-connectors/**
  push:
    branches:
      - develop
      - master
    paths:
      - stream-connectors/**

env:
  REGISTRY: centreon.jfrog.io/docker

jobs:
  get-version:
    uses: ./.github/workflows/get-version.yml

  detect-changes:
    runs-on: ubuntu-22.04
    outputs:
      connectors: ${{ steps.list-connectors.outputs.connectors }}
    steps:
      - uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.ref }}
          list-files: shell
          filters: |
            connectors:
              - stream-connectors/centreon-certified/**

      - name: transform to directories
        id: list-connectors
        run: |
          folders=()
          for f in ${{ steps.filter.outputs.connectors_files }}; do
            echo "Adding $(dirname $f) to folders"
            folders+=($(dirname $f))
          done
          unique_folders=($(printf "%s\n" "${folders[@]}" | sort -u | tr '\n' ' '))
          echo "connectors=$(jq --compact-output --null-input '$ARGS.positional' --args -- ${unique_folders[@]})" >> $GITHUB_OUTPUT
        shell: bash

  package-connectors:
    if: ${{ needs.detect-changes.outputs.connectors != '' }}
    needs: [get-version, detect-changes]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        distrib: [el8, el9, bullseye]
        connector_path: ${{ fromJson(needs.detect-changes.outputs.connectors) }}
          # - bsm
          # - capensis
          # - datadog
          # - elasticsearch
          # - google
          # - influxdb
          # - kafka
          # - logstash
          # - ndo
          # - omi
          # - opsgenie
          # - pagerduty
          # - prometheus
          # - servicenow
          # - signl4
          # - splunk
          # - warp10
        include:
          - min_lib_version: '3.0.0'
          - dependencies: ''
          - distrib: el8
            image: packaging-alma8
            package_extension: rpm
          - distrib: el9
            image: packaging-alma9
            package_extension: rpm
          - distrib: bullseye
            image: packaging-bullseye
            package_extension: deb
          - connector_path: kafka
            dependencies: librdkafka,lua-ffi
          - connector_path: pagerduty
            dependencies: lua-tz
          - connector_path: splunk
            dependencies: lua-curl

    name: package ${{ matrix.distrib }} ${{ matrix.connector_path }}
    container:
      image: centreon.jfrog.io/docker/${{ matrix.image }}:${{ needs.get-version.outputs.version }}
      credentials:
        username: ${{ secrets.AUTOMATION_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - if: ${{ matrix.package_extension == 'rpm' }}
        run: |
          mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}

          PACKAGE_NAME="centreon-stream-connector-`basename ${{ matrix.connector_path }}`"
          PACKAGE_VERSION=`date '+%Y%m%d'`

          mkdir $PACKAGE_NAME
          cp centreon-certified/${{ matrix.connector_path }}/*.lua $PACKAGE_NAME/

          tar czf ~/rpmbuild/SOURCES/$PACKAGE_NAME.tar.gz $PACKAGE_NAME

          touch dependencies.txt
          if [ ! -z "${{ matrix.dependencies }}" ]; then
            for dependency in "${{ matrix.dependencies }}"; do
              echo "Requires: $dependency" >> dependencies.txt
            done
          fi
          sed -i '/Requires:/r dependencies.txt' packaging/connectors/rpm/connector.spec

          touch files.txt
          for file in $PACKAGE_NAME/*.lua; do
            echo "%{_datadir}/centreon-broker/lua/`basename $file`" >> files.txt
          done
          sed -i '/%files/r files.txt' packaging/connectors/rpm/connector.spec

          rpmbuild -ba packaging/connectors/rpm/connector.spec -D "PACKAGE_NAME $PACKAGE_NAME" -D "VERSION $PACKAGE_VERSION" -D "MIN_LIB_VERSION ${{ matrix.min_lib_version }}"

          mv ~/rpmbuild/RPMS/**/*.rpm ../
        working-directory: stream-connectors
        shell: bash

      - if: ${{ matrix.package_extension == 'deb' }}
        run: |
          PACKAGE_NAME="centreon-stream-connector-`basename ${{ matrix.connector_path }}`"
          PACKAGE_VERSION=`date '+%Y%m%d'`

          mkdir -p $PACKAGE_NAME-$PACKAGE_VERSION/debian

          cp centreon-certified/${{ matrix.connector_path }}/*.lua $PACKAGE_NAME-$PACKAGE_VERSION/

          sed -i "s#@PACKAGE_NAME@#$PACKAGE_NAME#g" packaging/connectors/deb/control
          sed -i "s#@MIN_LIB_VERSION@#${{ matrix.min_lib_version }}#g" packaging/connectors/deb/control

          touch dependencies.txt
          if [ ! -z "${{ matrix.dependencies }}" ]; then
            for dependency in "${{ matrix.dependencies }}"; do
              echo "  $dependency," >> dependencies.txt
            done
          fi
          sed -i '/^Depends:/r dependencies.txt' packaging/connectors/deb/control

          for file in $PACKAGE_NAME-$PACKAGE_VERSION/*.lua; do
            echo "`basename $file`    /usr/share/centreon-broker/lua/`basename $file`" >> packaging/connectors/deb/install
          done

          cp -rp packaging/connectors/deb/* $PACKAGE_NAME-$PACKAGE_VERSION/debian/

          tar czf $PACKAGE_NAME-$PACKAGE_VERSION.tar.gz $PACKAGE_NAME-$PACKAGE_VERSION

          cd $PACKAGE_NAME-$PACKAGE_VERSION

          debmake -f "centreon" -e "contact@centreon.com" -y -r ${{ matrix.distrib }}
          debuild-pbuilder --no-lintian

          mv ../*.deb ../../../
        working-directory: stream-connectors
        shell: bash

      - uses: actions/cache@v3
        with:
          path: ./*.${{ matrix.package_extension }}
          key: unsigned-${{ github.sha }}-${{ github.run_id }}-${{ matrix.package_extension }}-${{ hashFiles('**/${{ matrix.connector_script }}') }}-${{ matrix.distrib }}

  package-connectors-lib:
    needs: [get-version]
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        distrib: [el8, el9, bullseye]
        include:
          - distrib: el8
            image: packaging-alma8
            package_extension: rpm
          - distrib: el9
            image: packaging-alma9
            package_extension: rpm
          - distrib: bullseye
            image: packaging-bullseye
            package_extension: deb
    name: package ${{ matrix.distrib }}
    container:
      image: centreon.jfrog.io/docker/${{ matrix.image }}:${{ needs.get-version.outputs.version }}
      credentials:
        username: ${{ secrets.AUTOMATION_USERNAME }}
        password: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}

    steps:
      - uses: actions/checkout@v3

      - if: ${{ matrix.package_extension == 'rpm' }}
        run: |
          yum install -y yum-utils
          yum config-manager --set-enabled crb || true # alma 9
          yum config-manager --set-enabled powertools || true # alma 8
          yum install -y lua lua-devel
          mkdir -p ~/rpmbuild/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}

          cd modules
          tar czf ~/rpmbuild/SOURCES/centreon-stream-connectors-lib.tar.gz centreon-stream-connectors-lib
          cd ..

          rpmbuild -ba packaging/connectors-lib/rpm/centreon-stream-connectors-lib.spec

          mv ~/rpmbuild/RPMS/**/*.rpm ../
        working-directory: stream-connectors
        shell: bash

      - if: ${{ matrix.package_extension == 'deb' }}
        run: |
          mkdir -p centreon-stream-connectors-lib-${{ needs.get-version.outputs.version }}/debian

          cp -rp modules/centreon-stream-connectors-lib/* centreon-stream-connectors-lib-${{ needs.get-version.outputs.version }}/
          cp -rp packaging/connectors-lib/deb/* centreon-stream-connectors-lib-${{ needs.get-version.outputs.version }}/debian/

          tar czf centreon-stream-connectors-lib-${{ needs.get-version.outputs.version }}.tar.gz centreon-stream-connectors-lib-${{ needs.get-version.outputs.version }}

          cd centreon-stream-connectors-lib-${{ needs.get-version.outputs.version }}

          debmake -f "centreon" -e "contact@centreon.com" -y -r ${{ matrix.distrib }}
          debuild-pbuilder --no-lintian

          mv ../*.deb ../../../
        working-directory: stream-connectors
        shell: bash

      - uses: actions/cache@v3
        with:
          path: ./*.${{ matrix.package_extension }}
          key: unsigned-${{ github.sha }}-${{ github.run_id }}-${{ matrix.package_extension }}-${{ matrix.distrib }}

  # sign-rpm:
  #   needs: [package-rpm]
  #   runs-on: ubuntu-22.04
  #   strategy:
  #     matrix:
  #       include:
  #         - image: packaging-alma8
  #           distrib: el8
  #         - image: packaging-alma9
  #           distrib: el9
  #   name: sign rpm ${{ matrix.distrib }}
  #   container:
  #     image: centreon.jfrog.io/docker/rpm-signing:ubuntu
  #     options: -t
  #     credentials:
  #       username: ${{ secrets.AUTOMATION_USERNAME }}
  #       password: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}

  #   steps:
  #     - run: apt-get install -y zstd
  #       shell: bash

  #     - uses: actions/checkout@v3

  #     - uses: actions/cache@v3
  #       with:
  #         path: ./*.rpm
  #         key: unsigned-${{ github.sha }}-${{ github.run_id }}-rpm-${{ matrix.distrib }}

  #     - run: echo "HOME=/root" >> $GITHUB_ENV
  #       shell: bash

  #     - run: rpmsign --addsign ./*.rpm
  #       shell: bash

  #     - uses: actions/cache@v3
  #       with:
  #         path: ./*.rpm
  #         key: ${{ github.sha }}-${{ github.run_id }}-rpm-${{ matrix.distrib }}

  # deliver-rpm:
  #   if: ${{ contains(fromJson('["unstable", "testing", "stable"]'), needs.get-version.outputs.stability) }}
  #   needs: [get-version, sign-rpm]
  #   runs-on: [self-hosted, common]
  #   strategy:
  #     matrix:
  #       distrib: [el8, el9]
  #   name: deliver ${{ matrix.distrib }}

  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v3

  #     - name: Publish RPM packages
  #       uses: ./.github/actions/delivery
  #       with:
  #         distrib: ${{ matrix.distrib }}
  #         version: ${{ needs.get-version.outputs.version }}
  #         minor_version: ${{ needs.get-version.outputs.patch }}
  #         release: ${{ needs.get-version.outputs.release }}
  #         module_name: stream-connectors
  #         nexus_username: ${{ secrets.NEXUS_USERNAME }}
  #         nexus_password: ${{ secrets.NEXUS_PASSWORD }}
  #         artifactory_token: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
  #         cache_key: ${{ github.sha }}-${{ github.run_id }}-rpm-${{ matrix.distrib }}
  #         update_repo_path: ${{ secrets.UPDATE_REPO_PATH }}
  #         cloudfront_id: ${{ secrets.CLOUDFRONT_ID }}
  #         yum_repo_address: ${{ secrets.YUM_REPO_ADDRESS }}
  #         yum_repo_key: ${{ secrets.YUM_REPO_KEY }}
  #         yum_repo_url: ${{ secrets.YUM_REPO_URL }}

  # deliver-deb:
  #   if: ${{ contains(fromJson('["unstable", "testing", "stable"]'), needs.get-version.outputs.stability) }}
  #   needs: [get-version, package-deb]
  #   runs-on: [self-hosted, common]
  #   strategy:
  #     matrix:
  #       distrib: [bullseye]
  #   name: deliver ${{ matrix.distrib }}

  #   steps:
  #     - name: Checkout sources
  #       uses: actions/checkout@v3

  #     - name: Publish DEB packages
  #       uses: ./.github/actions/delivery
  #       with:
  #         distrib: ${{ matrix.distrib }}
  #         repository_name: standard
  #         version: ${{ needs.get-version.outputs.version }}
  #         repos_username: ${{ secrets.NEXUS_USERNAME }}
  #         repos_password: ${{ secrets.NEXUS_PASSWORD }}
  #         artifactory_token: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
  #         cache_key: ${{ github.sha }}-${{ github.run_id }}-deb-${{ matrix.distrib }}
