on:
  workflow_call:
    inputs:
      distrib:
        required: true
        type: string
      arch:
        required: true
        type: string
      image:
        required: true
        type: string
      image_test:
        required: true
        type: string
      package_cache_key:
        required: true
        type: string
      package_cache_path:
        required: true
        type: string
      database_type:
        required: true
        type: string
      tests_params:
        required: true
        type: string
      test_group_name:
        required: true
        type: string
      is_nightly:
        required: false
        type: string
      features_pattern:
        required: false
        type: string
        default: .robot
    secrets:
      registry_username:
        required: true
      registry_password:
        required: true
      collect_s3_access_key:
        required: true
      collect_s3_secret_key:
        required: true
      xray_client_id:
        required: true
      xray_client_secret:
        required: true
      jira_base_url:
        required: true
      jira_user_email:
        required: true
      jira_api_token:
        required: true
jobs:
  test-image-to-cache:
    runs-on: ${{ contains(inputs.image, 'arm') && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - name: Login to Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}
          username: ${{ secrets.registry_username }}
          password: ${{ secrets.registry_password }}

      - name: Login to Proxy Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ vars.DOCKER_PROXY_REGISTRY_URL }}
          username: ${{ secrets.registry_username }}
          password: ${{ secrets.registry_password }}

      - name: load image
        run: |
          docker pull ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${{inputs.image_test}}
        shell: bash

      - name: image to disk
        run: |
          docker save -o ./${{inputs.image}} ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${{inputs.image_test}}
        shell: bash

      - name: image to cache
        uses: actions/cache/save@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ./${{ inputs.image }}
          key: ${{ inputs.image_test }}

  robot-test-list:
    needs: [test-image-to-cache]
    runs-on: ubuntu-24.04
    outputs:
      features: ${{ steps.list-features.outputs.features }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - name: List features
        id: list-features
        run: |
          cd tests
          #when tests are executed by github cron, inputs are empty as centreon-collect.yml input default value is not used
          FEATURES_PATTERN="${{ inputs.features_pattern }}"
          if [ "0" = "0${FEATURES_PATTERN}" ]; then
             FEATURES_PATTERN="^((?!cma).)*$"
          fi
          echo "features=$(grep -Rl '*** Test Cases ***' . | grep '.robot' | grep -P "${FEATURES_PATTERN}" | sed -e "s#^./##" | sort | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  robot-test:
    needs: [robot-test-list]
    runs-on: ${{ contains(inputs.image, 'arm') && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}

    strategy:
      fail-fast: false
      matrix:
        feature: ${{ fromJson(needs.robot-test-list.outputs.features) }}

    name: ${{ matrix.feature }} ${{inputs.test_group_name}}

    steps:
      - name: Checkout sources
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
        with:
          fetch-depth: 0

      - name: Restore image
        uses: actions/cache/restore@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ./${{ inputs.image }}
          key: ${{ inputs.image_test }}
          fail-on-cache-miss: true

      - name: Restore packages
        uses: actions/cache/restore@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ${{ inputs.package_cache_path }}
          key: ${{ inputs.package_cache_key }}
          fail-on-cache-miss: true

      - name: load image
        run: |
          docker load --input ./${{ inputs.image }}

      #  pam sshd authentication doesn't work with privileged containers
      - name: ${{ matrix.feature == 'connector_ssh/connector_ssh.robot' && format('Test {0} (without privileges)', matrix.feature) || format('Test {0}', matrix.feature) }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.collect_s3_access_key }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.collect_s3_secret_key }}
        run: |
          privilege_status=""
          if [[ ${{ matrix.feature }} != 'connector_ssh/connector_ssh.robot' ]]; then
            privilege_status="--privileged"
          fi
          docker run --rm $privilege_status --ulimit core=-1 --security-opt seccomp=unconfined \
            -v $(pwd):/test_collect  \
            --env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            --env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            --env AWS_BUCKET=centreon-collect-robot-report \
            --workdir /test_collect \
            ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${{ inputs.image_test }} \
            ./.github/scripts/collect-test-robot.sh \
            ${{ matrix.feature }} ${{ inputs.database_type }} ${{ inputs.tests_params }}

      # - name: Generate Xray Token
      #   id: generate-xray-token
      #   run: |
      #     token_response=$(curl -H "Content-Type: application/json" -X POST --data "{\"client_id\": \"${{ secrets.XRAY_CLIENT_ID }}\", \"client_secret\": \"${{ secrets.XRAY_CLIENT_SECRET }}\"}" "https://xray.cloud.getxray.app/api/v1/authenticate")
      #     xray_token=$(echo "$token_response" | sed -n 's/.*"\(.*\)".*/\1/p')
      #     echo "xray_token=$xray_token" >> $GITHUB_OUTPUT
      #   shell: bash

      # - name: Send report to xrays
      #   run: |
      #     curl -H "Content-Type: multipart/form-data" -X POST -F info=@tests/issueFields.json -F results=@tests/output.xml -F testInfo=@tests/testIssueFields.json -H "Authorization: Bearer ${{ steps.generate-xray-token.outputs.xray_token }}" https://xray.cloud.getxray.app/api/v2/import/execution/robot/multipart

      - name: Move reports
        if: ${{ failure() }}
        run: |
          mkdir reports
          FILE_PREFIX=`echo "${{ matrix.feature }}" | sed -e "s#/#__#g"`-${{inputs.test_group_name}}
          if [ -d tests/failed ] ; then
            cp -rp tests/failed reports/$FILE_PREFIX-failed
            cp tests/log.html reports/$FILE_PREFIX-log.html
            cp tests/output.xml reports/$FILE_PREFIX-output.xml
          fi

      - name: Replace / with - in the feature path
        id: feature-path
        if: always()
        run: |
          feature_name="${{ matrix.feature }}"
          feature_name_with_dash="${feature_name//\//-}"
          echo "Modified Feature Name: $feature_name_with_dash"
          echo "feature_name_with_dash=$feature_name_with_dash" >> $GITHUB_OUTPUT

      - name: Upload Test Results
        if: ${{ failure() }}
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: reports-${{inputs.test_group_name}}-${{ steps.feature-path.outputs.feature_name_with_dash }}
          path: reports
          retention-days: 1

  robot-test-report:
    needs: [robot-test]
    if: ${{ failure() }}
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - name: Download Artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: reports-${{inputs.test_group_name}}-*
          path: reports
          merge-multiple: true

      - name: Upload the regrouped artifact
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: reports-${{inputs.test_group_name}}
          path: reports/
          retention-days: 1

      - name: Delete separated artifacts
        run: |
          artifact_pattern="reports-${{inputs.test_group_name}}-"
          TOKEN=${{ secrets.GITHUB_TOKEN }}
          artifact_exist=true
          while [ "$artifact_exist" = true ] ;do
            artifact_exist=false
            artifacts_response=$(curl -L \
                          -H "Accept: application/vnd.github+json" \
                          -H "Authorization: Bearer $TOKEN" \
                          -H "X-GitHub-Api-Version: 2022-11-28" \
                          "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?per_page=100")
            artifacts=$(echo $artifacts_response | jq -c '.artifacts[]')
            echo "Those are the artifacts : $artifacts"
            while read row; do
              artifact_name=$(echo "$row" | jq -r '.name')
              if [[ "$artifact_name" =~ ^.*"$artifact_pattern".* ]]; then
                artifact_exist=true
                echo "Deleting : $artifact_name"
                artifact_id=$(echo "$row" | jq -r '.id')
                curl -L \
                  -X DELETE \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer $TOKEN" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/${artifact_id}"
              fi
            done <<< "$artifacts"
          done
          echo "End of Deleting"
        shell: bash

      - uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: "3.10"

      - run: |
          pip3 install -U robotframework robotframework-databaselibrary==2.0.4 pymysql python-dateutil
          cd reports
          rebot -o output.xml ./*-output.xml || true
        shell: bash

      - name: Send report to commit
        uses: joonvena/robotframework-reporter-action@229b6d4248b20be6e54f4fc32c7414130d1bf200 # v2.5
        with:
          gh_access_token: ${{ secrets.GITHUB_TOKEN }}
          report_path: reports
          show_passed_tests: false

  create-jira-nightly-ticket:
    needs: [robot-test-list, robot-test, robot-test-report]
    runs-on: ubuntu-24.04
    if: |
      inputs.is_nightly == 'true' && github.run_attempt == 1 &&
      (failure() || cancelled()) &&
      startsWith(github.ref_name, 'dev') &&
      github.repository == 'centreon/centreon-collect'
    steps:
      - name: Checkout sources
        uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0

      - name: Create Jira ticket on nightly build failure
        uses: ./.github/actions/create-jira-ticket
        with:
          jira_base_url: ${{ secrets.jira_base_url }}
          jira_user_email: ${{ secrets.jira_user_email }}
          jira_api_token: ${{ secrets.jira_api_token }}
          module_name: "centreon-collect"
          ticket_labels: '["Nightly", "Pipeline", "nightly-${{ github.ref_name }}", "robot-test-${{ inputs.distrib }}-${{ inputs.database_type }}"]'
          ticket_squad: "Collect"
