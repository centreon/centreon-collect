name: gorgone

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      unit_tests:
        description: 'Execute the unit tests'
        required: true
        default: true
        type: boolean
  pull_request:
    paths:
      - ".version"
      - ".version.centreon-gorgone"
      - "gorgone/**"
      - "perl-libs/**"
  push:
    branches:
      - develop
      - dev-[2-9][0-9].[0-9][0-9].x
      - master
      - "[2-9][0-9].[0-9][0-9].x"
    paths:
      - ".version"
      - ".version.centreon-gorgone"
      - "gorgone/**"
      - "perl-libs/**"

env:
  base_directory: gorgone

jobs:
  get-environment:
    uses: ./.github/workflows/get-environment.yml
    with:
      version_file: .version.centreon-gorgone

  changes:
    needs: [get-environment]
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      needs.get-environment.outputs.stability != 'stable'
    runs-on: ubuntu-24.04
    outputs:
      trigger_delivery: ${{ steps.filter.outputs.trigger_delivery || 'true' }}
      trigger_unit_tests: ${{ steps.filter.outputs.trigger_unit_tests || 'true' }}
      trigger_robot_tests: ${{ steps.filter.outputs.trigger_robot_tests || 'true' }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        if: |
          github.event_name == 'pull_request' &&
          needs.get-environment.outputs.stability != 'testing'
        with:
          base: ${{ github.head_ref || github.ref_name }}
          filters: |
            trigger_unit_tests:
              - 'gorgone/**'
              - 'perl-libs/**'
            trigger_robot_tests:
              - 'gorgone/!(tests)/**'
              - 'gorgone/tests/robot/**'
              - 'perl-libs/**'
            trigger_delivery:
              - 'gorgone/!(tests)/**'
              - 'perl-libs/!(lib)/**'
              - 'perl-libs/lib/!(t)/**'
              - 'perl-libs/*'
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  unit-test-perl:
    needs: [get-environment, changes]
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      needs.get-environment.outputs.stability != 'stable' &&
      (github.event.inputs.unit_tests == 'true' || needs.changes.outputs.trigger_unit_tests == 'true')
    strategy:
      fail-fast: false
      matrix:
        image: [unit-tests-alma8, unit-tests-alma9, unit-tests-bullseye-arm64, unit-tests-bookworm]
        include:
          - runner_name: ubuntu-24.04
          - package_extension: rpm
            image: unit-tests-alma8
            distrib: el8
          - package_extension: rpm
            image: unit-tests-alma9
            distrib: el9
          - package_extension: deb
            image: unit-tests-bullseye-arm64
            distrib: bullseye-arm64
            runner_name: ubuntu-24.04-arm
          - package_extension: deb
            image: unit-tests-bookworm
            distrib: bookworm
    runs-on: ${{ matrix.runner_name }}
    container:
      image: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${{ matrix.image }}
      credentials:
        username: ${{ secrets.HARBOR_CENTREON_PULL_USERNAME }}
        password: ${{ secrets.HARBOR_CENTREON_PULL_TOKEN }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Run unit tests
        run: yath -L test ./perl-libs/lib/ ./gorgone/tests/unit/

      - name: Upload logs as artifacts if tests failed
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: centreon-collect-perl-unit-tests-${{ matrix.distrib }}
          path: ./lastlog.jsonl
          retention-days: 1

  package:
    needs: [get-environment]
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      needs.get-environment.outputs.stability != 'stable'

    strategy:
      fail-fast: false
      matrix:
        distrib: [el8, el9, bookworm]  # No ubuntu in 24.10, 24.11 or later for now
        include:
          - package_extension: rpm
            image: packaging-centreon-collect-alma8
            distrib: el8
          - package_extension: rpm
            image: packaging-centreon-collect-alma9
            distrib: el9
          - package_extension: deb
            image: packaging-centreon-collect-bookworm
            distrib: bookworm

    runs-on: ubuntu-24.04

    container:
      image: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${{ matrix.image }}:${{ needs.get-environment.outputs.packaging_img_version }}
      credentials:
        username: ${{ secrets.HARBOR_CENTREON_PULL_USERNAME }}
        password: ${{ secrets.HARBOR_CENTREON_PULL_TOKEN }}

    name: package ${{ matrix.distrib }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set package version and paths according to distrib
        run: |
          if [[ "${{ matrix.package_extension }}" == "deb" ]]; then
            PERL_VENDORLIB="/usr/share/perl5"
          else
            PERL_VENDORLIB="/usr/share/perl5/vendor_perl"
          fi
          echo "PERL_VENDORLIB=$PERL_VENDORLIB" >> $GITHUB_ENV
        shell: bash

      - name: Generate selinux binaries
        if: ${{ matrix.package_extension == 'rpm' }}
        run: |
          cd gorgone/selinux
          sed -i "s/@VERSION@/${{ needs.get-environment.outputs.major_version }}.${{ needs.get-environment.outputs.minor_version }}/g" centreon-gorgoned.te
          make -f /usr/share/selinux/devel/Makefile
        shell: bash

      - name: Remove selinux packaging files on debian
        if: ${{ matrix.package_extension == 'deb' }}
        run: rm -f gorgone/packaging/*-selinux.yaml
        shell: bash

      - name: Package
        uses: ./.github/actions/package
        with:
          nfpm_file_pattern: "gorgone/packaging/*.yaml perl-libs/packaging/*.yaml"
          module_name: "centreon-gorgone"
          distrib: ${{ matrix.distrib }}
          package_extension: ${{ matrix.package_extension }}
          major_version: ${{ needs.get-environment.outputs.major_version }}
          minor_version: ${{ needs.get-environment.outputs.minor_version }}
          release: ${{ needs.get-environment.outputs.release }}
          arch: all
          commit_hash: ${{ github.sha }}
          cache_key: ${{ github.sha }}-${{ github.run_id }}-${{ matrix.package_extension }}-${{ matrix.distrib }}
          rpm_gpg_key: ${{ secrets.RPM_GPG_SIGNING_KEY }}
          rpm_gpg_signing_key_id: ${{ secrets.RPM_GPG_SIGNING_KEY_ID }}
          rpm_gpg_signing_passphrase: ${{ secrets.RPM_GPG_SIGNING_PASSPHRASE }}
          stability: ${{ needs.get-environment.outputs.stability }}

  robot-test-gorgone:
    needs: [get-environment, package, changes]
    if: |
      github.repository == 'centreon/centreon-collect' &&
      needs.get-environment.outputs.skip_workflow == 'false' &&
      needs.get-environment.outputs.stability != 'stable' &&
      needs.changes.outputs.trigger_robot_tests == 'true'

    strategy:
      fail-fast: false
      matrix:
        distrib: [el8, el9, bookworm]  # No ubuntu in 24.10, 24.11 or later for now
        include:
          - package_extension: rpm
            image: gorgone-testing-alma8
            distrib: el8
          - package_extension: rpm
            image: gorgone-testing-alma9
            distrib: el9
          - package_extension: deb
            image: gorgone-testing-bookworm
            distrib: bookworm

    runs-on: ubuntu-24.04
    container:
      image: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${{ matrix.image }}:${{ needs.get-environment.outputs.major_version }}
      credentials:
        username: ${{ secrets.HARBOR_CENTREON_PULL_USERNAME }}
        password: ${{ secrets.HARBOR_CENTREON_PULL_TOKEN }}

    services:
      mariadb:
        image: mariadb:latest
        ports:
          - 3306
        env:
          MYSQL_USER: centreon
          MYSQL_PASSWORD: password
          MYSQL_ROOT_PASSWORD: password

    steps:
      - name: Get linked branch of centreon repository
        id: centreon_repo_linked_branch
        run: |
          CENTREON_REPO_LINKED_BRANCH=$(git ls-remote -h https://github.com/centreon/centreon.git | grep -E "refs/heads/dev-${{ needs.get-environment.outputs.major_version }}\.x$" >/dev/null 2>&1 && echo "dev-${{ needs.get-environment.outputs.major_version }}.x" || echo develop)

          GIT_BRANCH_EXISTS=$(git ls-remote -h https://github.com/centreon/centreon.git | grep -E "refs/heads/${{ github.head_ref || github.ref_name }}$" >/dev/null 2>&1 && echo yes || echo no)
          if [[ "$GIT_BRANCH_EXISTS" == "yes" ]]; then
            CENTREON_REPO_LINKED_BRANCH="${{ github.head_ref || github.ref_name }}"
          fi

          echo "linked_branch=$CENTREON_REPO_LINKED_BRANCH" >> $GITHUB_OUTPUT
        shell: bash

      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          repository: centreon/centreon
          path: centreon
          ref: ${{ steps.centreon_repo_linked_branch.outputs.linked_branch }}
          sparse-checkout: |
            centreon/www/install/createTables.sql
            centreon/www/install/createTablesCentstorage.sql

      - name: get cached gorgone and perl-libs package
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ./*.${{ matrix.package_extension }}
          key: ${{ github.sha }}-${{ github.run_id }}-${{ matrix.package_extension }}-${{ matrix.distrib }}
          fail-on-cache-miss: true

      - name: Parse distrib name
        id: parse-distrib
        uses: ./.github/actions/parse-distrib
        with:
          distrib: ${{ matrix.distrib }}

      - name: Install gorgone from just built package
        shell: bash
        run: |
          if [[ "${{ matrix.package_extension }}" == "deb" ]]; then
            apt update
            apt install -y ./centreon-gorgone*${{ steps.parse-distrib.outputs.package_distrib_name }}* ./centreon-perl-libs-common*${{ steps.parse-distrib.outputs.package_distrib_name }}*
          else
            dnf install -y ./centreon-gorgone*${{ steps.parse-distrib.outputs.package_distrib_name }}* ./centreon-perl-libs-common*${{ steps.parse-distrib.outputs.package_distrib_name }}*
            # in el8 at least, there is a package for the configuration and a package for the actual code.
            # this is not the case for debian, and for now I don't know why it was made any different between the 2 Os.
          fi

      - name: Create databases
        run: |
          mysql -h mariadb -u root -ppassword -e "CREATE DATABASE \`centreon\`"
          mysql -h mariadb -u root -ppassword -e "CREATE DATABASE \`centreon-storage\`"
          mysql -h mariadb -u root -ppassword -e "GRANT ALL PRIVILEGES ON centreon.* TO 'centreon'@'%'"
          mysql -h mariadb -u root -ppassword -e "GRANT ALL PRIVILEGES ON  \`centreon-storage\`.* TO 'centreon'@'%'"
          mysql -h mariadb -u root -ppassword 'centreon' < centreon/centreon/www/install/createTables.sql
          mysql -h mariadb -u root -ppassword 'centreon-storage' < centreon/centreon/www/install/createTablesCentstorage.sql

      - name: Run tests
        run: robot -v 'DBHOST:mariadb' -v 'DBNAME:centreon' -v 'DBNAME_STORAGE:centreon-storage' -v 'DBUSER:centreon' gorgone/tests

      - name: Upload gorgone and robot debug artifacts
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: gorgone-debug-${{ matrix.distrib }}
          path: |
            log.html
            /var/log/centreon-gorgone
            /etc/centreon-gorgone
          retention-days: 1

  deliver-sources:
    runs-on: centreon-common
    needs: [get-environment, package]
    if: |
      github.event_name != 'workflow_dispatch' &&
      needs.get-environment.outputs.stability == 'stable' &&
      ! cancelled() &&
      ! contains(needs.*.result, 'failure') &&
      ! contains(needs.*.result, 'cancelled')

    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Deliver sources
        uses: ./.github/actions/release-sources
        with:
          bucket_directory: centreon-gorgone
          module_directory: gorgone
          module_name: centreon-gorgone
          major_version: ${{ needs.get-environment.outputs.major_version }}
          minor_version: ${{ needs.get-environment.outputs.minor_version }}
          token_download_centreon_com: ${{ secrets.TOKEN_DOWNLOAD_CENTREON_COM }}

  deliver-rpm:
    runs-on: centreon-common
    needs: [get-environment, unit-test-perl, robot-test-gorgone, changes]
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      needs.changes.outputs.trigger_delivery == 'true' &&
      contains(fromJson('["unstable", "testing"]'), needs.get-environment.outputs.stability) &&
      ! cancelled() &&
      ! contains(needs.*.result, 'failure') &&
      ! contains(needs.*.result, 'cancelled')

    strategy:
      matrix:
        distrib: [el8, el9]

    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Delivery
        uses: ./.github/actions/rpm-delivery
        with:
          module_name: gorgone
          distrib: ${{ matrix.distrib }}
          version: ${{ needs.get-environment.outputs.major_version }}
          artifactory_token: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
          cache_key: ${{ github.sha }}-${{ github.run_id }}-rpm-${{ matrix.distrib }}
          stability: ${{ needs.get-environment.outputs.stability }}
          release_type: ${{ needs.get-environment.outputs.release_type }}
          is_cloud: ${{ needs.get-environment.outputs.is_cloud }}

  deliver-deb:
    runs-on: centreon-common
    needs: [get-environment, unit-test-perl, robot-test-gorgone, changes]
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      needs.changes.outputs.trigger_delivery == 'true' &&
      contains(fromJson('["unstable", "testing"]'), needs.get-environment.outputs.stability) &&
      ! cancelled() &&
      ! contains(needs.*.result, 'failure') &&
      ! contains(needs.*.result, 'cancelled') &&
      (needs.get-environment.outputs.is_cloud == 'false' || needs.get-environment.outputs.stability == 'unstable')

    strategy:
      matrix:
        distrib: [bookworm]  # No ubuntu in 24.10, 24.11 or later for now

    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Delivery
        uses: ./.github/actions/deb-delivery
        with:
          module_name: gorgone
          distrib: ${{ matrix.distrib }}
          version: ${{ needs.get-environment.outputs.major_version }}
          artifactory_token: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
          cache_key: ${{ github.sha }}-${{ github.run_id }}-deb-${{ matrix.distrib }}
          stability: ${{ needs.get-environment.outputs.stability }}
          release_type: ${{ needs.get-environment.outputs.release_type }}
          is_cloud: ${{ needs.get-environment.outputs.is_cloud }}

  promote:
    needs: [get-environment, deliver-rpm, deliver-deb]
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      (contains(fromJson('["stable", "testing"]'), needs.get-environment.outputs.stability) && github.event_name != 'workflow_dispatch') &&
      ! cancelled() &&
      ! contains(needs.*.result, 'failure') &&
      ! contains(needs.*.result, 'cancelled') &&
      github.repository == 'centreon/centreon-collect'

    runs-on: centreon-common
    strategy:
      matrix:
        distrib: [el8, el9, bookworm]

    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Promote ${{ matrix.distrib }} to stable
        uses: ./.github/actions/promote-to-stable
        with:
          artifactory_token: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
          module_name: gorgone
          distrib: ${{ matrix.distrib }}
          major_version: ${{ needs.get-environment.outputs.major_version }}
          stability: ${{ needs.get-environment.outputs.stability }}
          github_ref_name: ${{ github.ref_name }}
          release_type: ${{ needs.get-environment.outputs.release_type }}
          is_cloud: ${{ needs.get-environment.outputs.is_cloud }}

  set-skip-label:
    needs: [get-environment, deliver-rpm, deliver-deb, promote]
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      ! cancelled() &&
      ! contains(needs.*.result, 'failure') &&
      ! contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/set-pull-request-skip-label.yml
