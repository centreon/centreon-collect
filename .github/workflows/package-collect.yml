name: Centreon collect packaging

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      img_version:
        required: true
        type: string
      release:
        required: true
        type: string
      commit_hash:
        required: true
        type: string

jobs:
  package:
    strategy:
      fail-fast: false
      matrix:
        include:
          # - image: centreon-collect-alma8
          #   distrib: el8
          #   package_extension: rpm
          #   runner: collect
          #   arch: amd64
          - image: centreon-collect-alma9
            distrib: el9
            package_extension: rpm
            runner: collect
            arch: amd64
          # - image: centreon-collect-debian-bullseye
          #   distrib: bullseye
          #   package_extension: deb
          #   runner: collect
          #   arch: amd64
          # - image: centreon-collect-debian-bullseye-arm64
          #   distrib: bullseye
          #   package_extension: deb
          #   runner: collect-arm64
          #   arch: arm64

    runs-on: ${{ fromJson(format('["self-hosted", "{0}"]', matrix.runner)) }}
    env:
      SCCACHE_PATH: "/usr/bin/sccache"
      SCCACHE_BUCKET: "centreon-collect-robot-report"
      SCCACHE_REGION: "eu-west-1"
      SCCACHE_S3_KEY_PREFIX: "sccache"
      AWS_ACCESS_KEY_ID: ${{ secrets.collect_s3_access_key }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.collect_s3_secret_key }}

    container:
      image: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/${{ matrix.image }}:${{ inputs.img_version }}
      credentials:
        username: ${{ secrets.DOCKER_REGISTRY_ID }}
        password: ${{ secrets.DOCKER_REGISTRY_PASSWD }}

    name: package ${{ matrix.distrib }} ${{ matrix.arch }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install sccache
        run: |
          if [ "${{ matrix.package_extension }}" = "deb" ]; then
            apt install -y wget
          fi
          if [ "${{ matrix.package_extension }}" = "rpm" ]; then
            dnf install -y wget
          fi
          wget https://github.com/mozilla/sccache/releases/download/v0.7.4/sccache-v0.7.4-x86_64-unknown-linux-musl.tar.gz
          tar xzf sccache-v0.7.4-x86_64-unknown-linux-musl.tar.gz
          mv sccache-v0.7.4-x86_64-unknown-linux-musl/sccache /usr/bin/
          ${SCCACHE_PATH} --start-server

      # - name: Restore Cache
      #   id: restore-cache
      #   uses: actions/cache/restore@v3
      #   with:
      #     path: /root/.cache/sccache
      #     key: sccache-${{ matrix.distrib }}-${{ matrix.arch }}
      #     restore-keys: sccache-${{ matrix.distrib }}-${{ matrix.arch }}

      # - name: Generate selinux binaries
      #   if: ${{ matrix.package_extension == 'rpm' }}
      #   run: |
      #     cd selinux
      #     for MODULE in "centreon-engine" "centreon-broker"; do
      #       cd $MODULE
      #       sed -i "s/@VERSION@/${{ inputs.version }}/g" $MODULE.te
      #       make -f /usr/share/selinux/devel/Makefile
      #       cd -
      #     done
      #   shell: bash

      # - name: Remove selinux packaging files on debian
      #   if: ${{ matrix.package_extension == 'deb' }}
      #   run: rm -f packaging/*-selinux.yaml
      #   shell: bash

      - name: Compile sources
        run: |
          sudo pip3 install conan==1.61.0 --prefix=/usr --upgrade

          sudo conan install . -s compiler.cppstd=17 -s compiler.libcxx=libstdc++11 --build=missing

          CMAKE="cmake3"
          if [ "${{ matrix.package_extension }}" = "deb" ]; then
            CMAKE="cmake"
          fi

          sudo $CMAKE \
                  -G "Ninja" \
                  -DDEBUG_ROBOT=OFF \
                  -DWITH_TESTING=OFF \
                  -DWITH_BENCH=ON \
                  -DWITH_MODULE_SIMU=OFF \
                  -DCMAKE_INSTALL_PREFIX=/usr \
                  -DWITH_STARTUP_SCRIPT=systemd \
                  -DWITH_ENGINE_LOGROTATE_SCRIPT=ON \
                  -DWITH_USER_BROKER=centreon-broker \
                  -DWITH_GROUP_BROKER=centreon-broker \
                  -DWITH_USER_ENGINE=centreon-engine \
                  -DWITH_GROUP_ENGINE=centreon-engine \
                  -DWITH_VAR_DIR=/var/log/centreon-engine \
                  -DWITH_DAEMONS=ON \
                  -DWITH_CREATE_FILES=OFF \
                  -DWITH_CONFIG_FILES=ON \
                  -DCMAKE_BUILD_TYPE=RelWithDebInfo \
                  -DNG=ON \
                  -DCMAKE_C_COMPILER_LAUNCHER=${SCCACHE_PATH} \
                  -DCMAKE_CXX_COMPILER_LAUNCHER=${SCCACHE_PATH} \
                  .

          sudo ninja
        shell: bash

      - name: Cache statistics
        run: |
          ${SCCACHE_PATH} --show-stats
      
      # - name: Delete Cache
      #   if: ${{ steps.restore-cache.outputs.cache-hit }}
      #   continue-on-error: true
      #   run: |
      #     if [ "${{ matrix.package_extension }}" = "deb" ]; then
      #       curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
      #       && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
      #       && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
      #       && sudo apt update \
      #       && sudo apt install gh -y
      #     fi
      #     if [ "${{ matrix.package_extension }}" = "rpm" ]; then
      #       sudo dnf install -y 'dnf-command(config-manager)'
      #       sudo dnf config-manager --add-repo https://cli.github.com/packages/rpm/gh-cli.repo
      #       sudo dnf install -y gh
      #     fi

      #     gh extension install actions/gh-actions-cache
      #     git config --global --add safe.directory /__w/centreon-collect/centreon-collect
      #     gh actions-cache delete "sccache-${{ matrix.distrib }}-${{ matrix.arch }}" --confirm
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN}}
      #   shell: bash

      # - name: Save Cache
      #   uses: actions/cache/save@v3
      #   with:
      #     path: /root/.cache/sccache
      #     key: sccache-${{ matrix.distrib }}-${{ matrix.arch }}

      # - name: Generate debug files
      #   run: |
      #     for file in $(find ./{lib/*.so,bin} -type f); do
      #       objcopy --only-keep-debug $file $file.debug
      #       objcopy --strip-debug $file
      #       objcopy --add-gnu-debuglink $file.debug $file
      #     done
      #   shell: bash

      # - uses: ./.github/actions/package
      #   with:
      #     nfpm_file_pattern: "packaging/*.yaml"
      #     distrib: ${{ matrix.distrib }}
      #     package_extension: ${{ matrix.package_extension }}
      #     version: ${{ inputs.version }}
      #     release: ${{ inputs.release }}
      #     arch: ${{ matrix.arch }}
      #     commit_hash: ${{ inputs.commit_hash }}
      #     cache_key: cache-${{ github.sha }}-${{ matrix.package_extension}}-centreon-collect-${{ matrix.distrib }}-${{ matrix.arch }}-${{ github.head_ref || github.ref_name }}
      #     rpm_gpg_key: ${{ secrets.RPM_GPG_SIGNING_KEY }}
      #     rpm_gpg_signing_key_id: ${{ secrets.RPM_GPG_SIGNING_KEY_ID }}
      #     rpm_gpg_signing_passphrase: ${{ secrets.RPM_GPG_SIGNING_PASSPHRASE }}

      # - name: Cleaning not needed packages
      #   shell: bash
      #   run: rm -rf *-debuginfo*.${{ matrix.package_extension }}

      # # set condition to true if artifacts are needed
      # - if: ${{ false }}
      #   name: Upload package artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: packages-${{ matrix.distrib }}-${{ matrix.arch }}
      #     path: ./*.${{ matrix.package_extension}}
      #     retention-days: 1
