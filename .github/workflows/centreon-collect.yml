name: Centreon collect

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - dev-22.04.x

env:
  REGISTRY: registry-docker.centreon.com/docker-global

jobs:
  create-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - id: version
        run: |
          IMG_VERSION=$(md5sum conanfile.txt | awk '{print substr($1, 0, 8)}')
          echo "imgversion=$IMG_VERSION" >> $GITHUB_OUTPUT
          VERSION=$(awk '$1 ~ "COLLECT_MAJOR" {maj=substr($2, 1, length($2)-1)} $1 ~ "COLLECT_MINOR" {min=substr($2, 1, length($2)-1) ; print maj "." min}' CMakeLists.txt)
          PATCH=$(awk '$1 ~ "COLLECT_PATCH" {print substr($2, 1, length($2) - 1)}' CMakeLists.txt)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT

          if [[ -z "$GITHUB_HEAD_REF" ]] ; then
            BRANCHNAME="$GITHUB_REF_NAME"
          else
            BRANCHNAME="$GITHUB_HEAD_REF"
          fi
          case "$BRANCHNAME" in
            master | [2-9][0-9].[0-9][0-9].x | release* | hotfix*)
              echo "release=$GITHUB_RUN_ATTEMPT" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "release=`date +%s`.`echo ${{ github.sha }} | cut -c -7`" >> $GITHUB_OUTPUT
              ;;
          esac
        shell: bash
      - run: |
          echo "ImgVersion is ${{ steps.version.outputs.imgversion }}"
          echo "Version is ${{ steps.version.outputs.version }}.${{ steps.version.outputs.patch }}"
          echo "Release is ${{ steps.version.outputs.release }}"
    outputs:
      imgversion: ${{ steps.version.outputs.imgversion }}
      version: ${{ steps.version.outputs.version }}
      patch: ${{ steps.version.outputs.patch }}
      release: ${{ steps.version.outputs.release }}

  centreon-collect-test:
    needs: create-version
    runs-on: [self-hosted, collect]
    env:
      imgversion: ${{ needs.create-version.outputs.imgversion }}
      version: ${{ needs.create-version.outputs.version }}.${{ needs.create-version.outputs.patch }}
      release: ${{ needs.create-version.outputs.release }}

    strategy:
      matrix:
        include:
          - image: centos7
          - image: alma8
          - image: debian-buster
          - image: debian-bullseye
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REPOS_USERNAME }}
          password: ${{ secrets.REPOS_PASSWORD }}
      - name: Test ${{ matrix.image }}
        uses: ./.github/actions/runner-docker
        with:
          script_name: /src/ci/scripts/collect-unit-tests
          image_name: centreon-collect-${{ matrix.image }}
          image_version: ${{ env.imgversion }}

  rpm-packaging:
    needs: create-version
    runs-on: [self-hosted, collect]
    env:
      version: ${{ needs.create-version.outputs.version }}.${{ needs.create-version.outputs.patch }}
      imgversion: ${{ needs.create-version.outputs.imgversion }}
      release: ${{ needs.create-version.outputs.release }}

    strategy:
      matrix:
        include:
          - image: centos7
            distrib: el7
          - image: alma8
            distrib: el8
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REPOS_USERNAME }}
          password: ${{ secrets.REPOS_PASSWORD }}

      - name: make rpm ${{ matrix.image }}
        uses: ./.github/actions/runner-docker
        with:
          script_name: /src/ci/scripts/collect-rpm-package
          image_name: centreon-collect-${{ matrix.image }}
          image_version: ${{ env.imgversion }}
          env_variable: -e DISTRIB="${{ matrix.distrib }}" -e VERSION="${{ env.version }}" -e RELEASE="${{ env.release }}"

      - name: Use cache RPM files
        uses: actions/cache@v3
        env:
          cache-name-rpmbuild: cache-${{ github.sha }}-${{ github.run_id }}-rpmbuild-centreon-collect-${{ matrix.distrib }}
        with:
          path: ./*.rpm
          key: ${{ env.cache-name-rpmbuild }}

  debian-packaging:
    needs: create-version
    runs-on: [self-hosted, collect]
    env:
      imgversion: ${{ needs.create-version.outputs.imgversion }}
      version: ${{ needs.create-version.outputs.version }}.${{ needs.create-version.outputs.patch }}
      release: ${{ needs.create-version.outputs.release }}

    strategy:
      matrix:
        include:
          - image: debian-buster
            distrib: buster
          - image: debian-bullseye
            distrib: bullseye
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          path: centreon-collect
      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REPOS_USERNAME }}
          password: ${{ secrets.REPOS_PASSWORD }}

      - name: debmake ${{ matrix.image }}
        uses: ./centreon-collect/.github/actions/runner-docker
        with:
          script_name: /src/centreon-collect/ci/scripts/collect-deb-package
          image_name: centreon-collect-${{ matrix.image }}
          image_version: ${{ env.imgversion }}
          env_variable: -e DISTRIB="${{ matrix.distrib }}" -e VERSION="${{ env.version }}" -e RELEASE="${{ env.release }}"

      - name: Use cache DEB files
        uses: actions/cache@v3
        env:
          cache-name-debbuild: cache-${{ github.sha }}-${{ github.run_id }}-debbuild-centreon-collect-${{ matrix.distrib }}
        with:
          path: ./*.deb
          key: ${{ env.cache-name-debbuild }}

  delivery-debian:
    needs: [debian-packaging, create-version]
    env:
      version: ${{ needs.create-version.outputs.version }}
    runs-on: [self-hosted, common]
    name: Delivery
    strategy:
      matrix:
        distrib: [buster, bullseye]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Publish DEB packages
        uses: ./.github/actions/delivery
        with:
          distrib: ${{ matrix.distrib }}
          version: ${{ env.version }}
          repos_username: ${{ secrets.REPOS_USERNAME }}
          repos_password: ${{ secrets.REPOS_PASSWORD }}
          cache_key: cache-${{ github.sha }}-${{ github.run_id }}

  delivery-centos:
    needs: [rpm-packaging, create-version]
    env:
      version: ${{ needs.create-version.outputs.version }}
    runs-on: [self-hosted, common]
    name: Delivery
    strategy:
      matrix:
        distrib: [el7, el8]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Publish RPM packages
        uses: ./.github/actions/delivery
        with:
          distrib: ${{ matrix.distrib }}
          version: ${{ env.version }}
          module_name: centreon-collect
          repos_username: ${{ secrets.REPOS_USERNAME }}
          repos_password: ${{ secrets.REPOS_PASSWORD }}
          cache_key: cache-${{ github.sha }}-${{ github.run_id }}
          update_repo_path: ${{ secrets.UPDATE_REPO_PATH }}
          cloudfront_id: ${{ secrets.CLOUDFRONT_ID }}
          yum_repo_address: ${{ secrets.YUM_REPO_ADDRESS }}
          yum_repo_key: ${{ secrets.YUM_REPO_KEY }}
          yum_repo_url: ${{ secrets.YUM_REPO_URL }}