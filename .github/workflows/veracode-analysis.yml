# Veracode scans
on:
  workflow_call:
    inputs:
      module_name:
        required: true
        type: string
      major_version:
        required: true
        type: string
      minor_version:
        required: true
        type: string
      stability:
        required: true
        type: string
      is_cpp_project:
        required: false
        type: string
      img_version:
        required: true
        type: string
      docker_registry_url:
        required: true
        type: string

    secrets:
      veracode_api_id:
        required: true
      veracode_api_key:
        required: true
      veracode_srcclr_token:
        required: true
      docker_registry_id:
        required: true
      docker_registry_passwd:
        required: true

jobs:
  build:
    name: Binary preparation
    runs-on: [self-hosted, collect]
    outputs:
      fail_build: ${{ steps.routing-mode.outputs.fail_build }}
      development_stage: ${{ steps.routing-mode.outputs.development_stage }}
      display_summary: ${{ steps.routing-mode.outputs.display_summary }}

    container:
      image: ${{ inputs.docker_registry_url }}/centreon-collect-alma8:${{ inputs.img_version }}
      credentials:
        username: ${{ secrets.docker_registry_id }}
        password: ${{ secrets.docker_registry_passwd }}

    steps:
      - uses: actions/checkout@v3

      - name: Generate binary file
        uses: ./.github/actions/veracode-generate-binary
        with:
          cache_key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"
          is_cpp_project: "${{ inputs.is_cpp_project }}"

      - name: Set routing mode
        id: routing-mode
        run: |
          if [[ '${{ github.event_name }}' != 'pull_request' && '${{ inputs.stability }}' == 'stable' ]]; then
            echo "fail_build=false" >> $GITHUB_OUTPUT
            echo "development_stage=Release" >> $GITHUB_OUTPUT
            echo "display_summary=false" >> $GITHUB_OUTPUT
          elif [[ '${{ github.event_name }}' != 'pull_request' && '${{ inputs.stability }}' == 'unstable' ]]; then
            echo "fail_build=false" >> $GITHUB_OUTPUT
            echo "development_stage=Testing" >> $GITHUB_OUTPUT
            echo "display_summary=false" >> $GITHUB_OUTPUT
          else
            echo "[DEBUG] - Grace period enabled"
            echo "fail_build=false" >> $GITHUB_OUTPUT
            echo "development_stage=Development" >> $GITHUB_OUTPUT
            echo "display_summary=true" >> $GITHUB_OUTPUT
          fi

  pipeline-scan:
    needs: [build]
    name: Run a pipeline scan
    runs-on: [self-hosted, veracode]

    steps:
      - uses: actions/checkout@v3

      - name: Get build binary
        uses: actions/cache/restore@v3
        with:
          path: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.tar.gz"
          key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"

      - name: Prepare analysis
        run: |
          ls -la
          tar -xzvf "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.tar.gz"

      - name: Get baseline file
        run: |
          BUCKET="s3://centreon-veracode-reports/${{ inputs.module_name }}"
          aws s3 ls "$BUCKET/${{ github.base_ref || github.ref_name }}/results.json" || RESULT=$( echo $? )
          if [[ $RESULT -eq 0 ]]; then
            aws s3 cp "$BUCKET/${{ github.base_ref || github.ref_name }}/results.json" "/tmp/results.json"
            echo "baseline_file=/tmp/results.json" >> $GITHUB_ENV
            echo "create_baseline_from=standard" >> $GITHUB_ENV
          else
            RESULT=0
            echo "[DEBUG] - Baseline file not found for branch ${{ github.base_ref || github.ref_name }}"
            echo "[DEBUG] - Using develop's Baseline file"
            aws s3 ls "$BUCKET/develop/results.json" || RESULT=$( echo $? )
            if [[ $RESULT -eq 0 ]]; then
              aws s3 cp "$BUCKET/develop/results.json" "/tmp/results.json"
              echo "baseline_file=/tmp/results.json" >> $GITHUB_ENV
              echo "create_baseline_from=standard" >> $GITHUB_ENV
            else
              echo "[DEBUG] - develop's baseline file not found in the bucket"
              echo "baseline_file=" >> $GITHUB_ENV
              echo "create_baseline_from=" >> $GITHUB_ENV
            fi
          fi

      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 8

      - name: Pipeline scan
        uses: veracode/Veracode-pipeline-scan-action@v1.0.8
        continue-on-error: true
        with:
          vid: "vera01ei-${{ secrets.veracode_api_id }}"
          vkey: "vera01es-${{ secrets.veracode_api_key }}"
          file: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.tar.gz"
          baseline_file: "${{ env.baseline_file }}"
          create_baseline_from: "${{ env.create_baseline_from }}"
          fail_build: '${{ needs.build.outputs.fail_build }}'
          fail_on_severity: "'Very High','High'"
          timeout: 60
          development_stage: '${{ needs.build.outputs.development_stage }}'
          summary_display: '${{ needs.build.outputs.display_summary }}'
          issue_details: '${{ needs.build.outputs.display_summary }}'

      - name: Save baseline files
        # only baseline files not generated from a development branch are saved
        ## if: needs.build.outputs.development_stage != 'Development'
        run: |
          #BRANCHES=(develop master dev-${{ inputs.major_version }}.x ${{ inputs.major_version }}.x)
          #for BRANCH in "${BRANCHES[@]}"; do
          #  if [[ "${{ github.ref_name }}" == "$BRANCH" ]]; then
          #    mv *results.json /tmp
          #    BUCKET="s3://centreon-veracode-reports/${{ inputs.module_name }}/${{ github.base_ref || github.ref_name }}"
          #    aws s3 cp "/tmp/filtered_results.json" "$BUCKET/filtered_results.json"
          #    aws s3 cp "/tmp/results.json" "$BUCKET/results.json"
          #  fi
          #done

          mv *results.json /tmp
          BUCKET="s3://centreon-veracode-reports/${{ inputs.module_name }}/develop"
          aws s3 cp "/tmp/filtered_results.json" "$BUCKET/filtered_results.json"
          aws s3 cp "/tmp/results.json" "$BUCKET/results.json"

  policy-scan:
    needs: [build]
    name: Run a sandbox scan
    # only stable and unstable maintenances branches will produce a report
    ## if: needs.build.outputs.development_stage != 'Development'
    runs-on: ubuntu-22.04
    continue-on-error: true

    steps:
      - uses: actions/checkout@v3

      - name: Get build binary
        uses: actions/cache/restore@v3
        with:
          path: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.tar.gz"
          key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"

      - name: Prepare analysis
        run: |
          ls -la
          tar -xzvf "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.tar.gz"

      - name: Sandbox scan
        uses: veracode/veracode-uploadandscan-action@master
        continue-on-error: true
        with:
          appname: "${{ inputs.module_name }}"
          version: "${{ inputs.major_version }}.${{ inputs.minor_version }}_runId-${{ github.run_id }}"
          filepath: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.tar.gz"
          vid: "vera01ei-${{ secrets.veracode_api_id }}"
          vkey: "vera01es-${{ secrets.veracode_api_key }}"
          createprofile: true
          createsandbox: true
          sandboxname: "${{ github.ref_name }}"
          criticality: "Low"
          scantimeout: 120
          includenewmodules: true
          scanallnonfataltoplevelmodules: true
          deleteincompletescan: 1
          scanpollinginterval: 120 # time between two checks in seconds / [30 to 120]

      - name: Promote Scan
        # only develop will be promoted to policy scan
        ## if: github.ref_name == 'develop'
        env:
          VERACODE_API_ID: "${{ secrets.veracode_api_id }}"
          VERACODE_API_SECRET: "${{ secrets.veracode_api_key }}"

        # Action forked as API call hardcode '.com' route
        uses: sc979/veracode-sandboxes-helper@v0.1
        with:
          activity: "promote-latest-scan"
          app-name: "${{ inputs.module_name }}"
          sandbox-name: "${{ github.ref_name }}"
          delete-on-promote: false

  sca-scan:
    needs: [build]
    name: Run a SCA scan
    # only latest unstable maintenance branches will produce a report
    ## if: github.ref_name == 'develop'
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - uses: actions/checkout@v3

      - name: Get build binary
        uses: actions/cache/restore@v3
        with:
          path: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.tar.gz"
          key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"

      - name: Prepare analysis
        run: |
          ls -la
          tar -xzvf "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.tar.gz"

      - name: SCA scan
        env:
          SRCCLR_API_TOKEN: ${{ secrets.veracode_srcclr_token }}
          SRCCLR_REGION: "ER"

        uses: veracode/veracode-sca@v1.09
        # This action is based on the following command:
        # curl -sSL https://download.sourceclear.com/ci.sh | sh -s -- scan "./${{ inputs.module_directory }}" --debug
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          create-issues: false
          fail-on-cvss: 8
          allow-dirty: true
