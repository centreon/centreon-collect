# Veracode scans
on:
  workflow_call:
    inputs:
      module_name:
        required: true
        type: string
      major_version:
        required: true
        type: string
      minor_version:
        required: true
        type: string
      stability:
        required: true
        type: string
      is_cpp_project:
        required: false
        type: string
      img_version:
        required: true
        type: string
      docker_registry_url:
        required: true
        type: string

    secrets:
      veracode_api_id:
        required: true
      veracode_api_key:
        required: true
      veracode_srcclr_token:
        required: true
      docker_registry_id:
        required: true
      docker_registry_passwd:
        required: true

jobs:
  build:
    name: Binary preparation
    runs-on: [self-hosted, collect]

    container:
      image: ${{ inputs.docker_registry_url }}/centreon-collect-alma9:${{ inputs.img_version }}
      credentials:
        username: ${{ secrets.docker_registry_id }}
        password: ${{ secrets.docker_registry_passwd }}

    steps:
      - uses: actions/checkout@v3

      - name: debug before compilation status
        run: |
          gcc --version
          du -sh /src/* | sort -h
          ls -la

      - name: Compile cpp sources
        if: inputs.is_cpp_project == 'yes'
        run: |
          pwd
          ls -la
          rm -rf build
          mkdir build
          cd build

          sudo pip3 install conan==1.57.0 --prefix=/usr --upgrade
          sudo conan install .. -s compiler.cppstd=14 -s compiler.libcxx=libstdc++11 --build=missing

          # If verbosity is required add : -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
          sudo cmake \
            -G "Ninja" \
            -DCMAKE_CXX_FLAGS="-gdwarf-2 -g3 -O0 -fno-builtin" \
            -DWITH_TESTING=OFF \
            -DWITH_BENCH=OFF \
            -DWITH_MODULE_SIMU=OFF \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DWITH_STARTUP_SCRIPT=systemd \
            -DWITH_ENGINE_LOGROTATE_SCRIPT=ON \
            -DWITH_USER_BROKER=centreon-broker \
            -DWITH_GROUP_BROKER=centreon-broker \
            -DWITH_USER_ENGINE=centreon-engine \
            -DWITH_GROUP_ENGINE=centreon-engine \
            -DWITH_VAR_DIR=/var/log/centreon-engine \
            -DWITH_DAEMONS=ON \
            -DWITH_CREATE_FILES=OFF \
            -DWITH_CONFIG_FILES=ON \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            ..

          sudo ninja

      - name: debug after compilation status
        run: |
          echo "[DEBUG] - current location ?"
          pwd
          echo "[DEBUG] - gcc version ?"
          gcc --version
          echo "[DEBUG] - Current folder size ?"
          du -sh ./* | sort -h
          echo "[DEBUG] - Newly created build folder size ?"
          du -sh ./build/* | sort -h
          echo "[DEBUG] - Build / Bin folder size ?"
          du -sh ./build/bin/* | sort -h
          echo "[DEBUG] - Build / Lib folder size ?"
          du -sh ./build/lib/* | sort -h
          echo "[DEBUG] - Build / Broker module folder size ?"
          du -sh ./build/broker/* | sort -h
          echo "[DEBUG] - Current location files ?"
          ls -la

      - name: Create tarball
        run: |
          pwd
          echo "[INFO] - Cleaning useless files"
          echo "[DEBUG] - step skipped"
          #for file in $( find ./ -name "*.o" -o -name "*.a" -o -name "*.h" -o -name "*.sql" -o -name "*.py" ); do
          #  rm -f $file
          #done

          echo "[INFO] - Cleaning scripts used to mock datas"
          for file in $( find ./ -name "*.py" ); do
            rm -f $file
          done

          echo "[INFO] - Keeping only bin and lib"
          echo "[DEBUG] - step skipped"
          #mv build full_build
          #mkdir build
          #mv -f full_build/bin build
          #mv -f full_build/lib build
          #ls -la

          #rm -rf full_build

          echo "[INFO] - Generating tarball"
          cd ..
          ls -la
          #tar -czf "${{ inputs.cache_key }}.tar.gz" centreon-collect

      - uses: actions/cache/save@v3
        with:
          path: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.tar.gz"
          key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"

  policy-scan:
    needs: [build]
    name: Run a sandbox scan
    # only stable and unstable maintenances branches will produce a report
    ## if: needs.build.outputs.development_stage != 'Development'
    runs-on: ubuntu-22.04
    continue-on-error: true

    steps:
      - name: Get build binary
        uses: actions/cache/restore@v3
        with:
          path: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.tar.gz"
          key: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary"

      - name: Prepare analysis
        run: |
          echo "[DEBUG] - Current location ?"
          pwd
          ls -la

          echo "[DEBUG] - Decompressing tarball"
          tar -xzvf "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.tar.gz"

          echo "[DEBUG] - Checking current folder size ?"
          ls -la
          du -sh ./* | sort -h

      - name: Sandbox scan
        uses: veracode/veracode-uploadandscan-action@master
        continue-on-error: true
        with:
          appname: "${{ inputs.module_name }}"
          version: "${{ inputs.major_version }}.${{ inputs.minor_version }}_runId-${{ github.run_id }}"
          #filepath: "${{ inputs.module_name }}-${{ github.sha }}-${{ github.run_id }}-veracode-binary.tar.gz"
          filepath: "./centreon-collect"
          vid: "vera01ei-${{ secrets.veracode_api_id }}"
          vkey: "vera01es-${{ secrets.veracode_api_key }}"
          createprofile: true
          createsandbox: true
          sandboxname: "${{ github.ref_name }}"
          criticality: "Low"
          scantimeout: 120
          includenewmodules: true
          scanallnonfataltoplevelmodules: true
          deleteincompletescan: 1
          scanpollinginterval: 120 # time between two checks in seconds / [30 to 120]

      - name: Promote Scan
        # only develop will be promoted to policy scan
        ## if: github.ref_name == 'develop'
        env:
          VERACODE_API_ID: "${{ secrets.veracode_api_id }}"
          VERACODE_API_SECRET: "${{ secrets.veracode_api_key }}"

        # Action forked as API call hardcode '.com' route
        uses: sc979/veracode-sandboxes-helper@v0.1
        with:
          activity: "promote-latest-scan"
          app-name: "${{ inputs.module_name }}"
          sandbox-name: "${{ github.ref_name }}"
          delete-on-promote: false
