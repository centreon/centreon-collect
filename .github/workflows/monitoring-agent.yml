name: monitoring-agent

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      packages_in_artifact:
        description: 'Save packages in artifacts'
        required: true
        default: false
        type: boolean
      installer_in_artifact:
        description: 'Save installer and binary in artifacts'
        required: true
        default: false
        type: boolean

  pull_request:
    paths:
      - ".version"
      - agent/**
      - common/**
      - custom-triplets/**
      - packaging/centreon-monitoring-agent/**
      - CMakeLists.txt
      - CMakeListsLinux.txt
      - CMakeListsWindows.txt
      - vcpkg.json
  push:
    branches:
      - develop
      - dev-[2-9][0-9].[0-9][0-9].x
      - master
      - "[2-9][0-9].[0-9][0-9].x"
    paths:
      - ".version"
      - agent/**
      - common/**
      - custom-triplets/**
      - packaging/centreon-monitoring-agent/**
      - CMakeLists.txt
      - CMakeListsLinux.txt
      - CMakeListsWindows.txt
      - vcpkg.json

jobs:
  get-environment:
    uses: ./.github/workflows/get-environment.yml
    with:
      version_file: CMakeLists.txt

  build-and-test-agent-windows:
    needs: [get-environment]
    runs-on: windows-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.COLLECT_S3_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.COLLECT_S3_SECRET_KEY }}

    steps:
      # in order to have the same checksum between windows-agent and windows-agent-robot-test
      - name: No crlf conversion
        run: git config --system core.autocrlf false

      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Compile Agent only
        run: .github/scripts/windows-agent-compile.ps1
        shell: powershell

      - name: Common test
        run: |
          cd build_windows
          tests/ut_common

      - name: Agent test
        run: |
          cd build_windows
          tests/ut_agent

      - name: Sign agent
        if: |
          contains(fromJson('["unstable", "testing"]'), needs.get-environment.outputs.stability) &&
          ! cancelled() &&
          ! contains(needs.*.result, 'failure') &&
          ! contains(needs.*.result, 'cancelled')
        uses: azure/trusted-signing-action@0d74250c661747df006298d0fb49944c10f16e03 # v0.5.1
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://weu.codesigning.azure.net/
          trusted-signing-account-name: Centreon-signature-RD
          certificate-profile-name: Cert-Signature-RD
          files-folder: build_windows\agent\Release
          files-folder-filter: centagent.exe
          files-folder-recurse: false
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - name: Build modifier
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release -DWITH_TESTING=On -DWINDOWS=On -DBUILD_FROM_CACHE=On -S. -DVCPKG_CRT_LINKAGE=dynamic -DBUILD_SHARED_LIBS=OFF -DWITH_BUILD_AGENT_MODIFIER=On  -Bbuild_windows
          cmake --build build_windows --config Release

      - name: Sign modifier
        if: |
          contains(fromJson('["unstable", "testing"]'), needs.get-environment.outputs.stability) &&
          ! cancelled() &&
          ! contains(needs.*.result, 'failure') &&
          ! contains(needs.*.result, 'cancelled')
        uses: azure/trusted-signing-action@0d74250c661747df006298d0fb49944c10f16e03 # v0.5.1
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://weu.codesigning.azure.net/
          trusted-signing-account-name: Centreon-signature-RD
          certificate-profile-name: Cert-Signature-RD
          files-folder: agent\installer
          files-folder-filter: centreon-monitoring-agent-modify.exe
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - name: Build installer
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release -DWITH_TESTING=On -DWINDOWS=On -DBUILD_FROM_CACHE=On -S. -DVCPKG_CRT_LINKAGE=dynamic -DBUILD_SHARED_LIBS=OFF -DWITH_BUILD_AGENT_INSTALLER=On  -Bbuild_windows
          cmake --build build_windows --config Release

      - name: Sign installer
        if: |
          contains(fromJson('["unstable", "testing"]'), needs.get-environment.outputs.stability) &&
          ! cancelled() &&
          ! contains(needs.*.result, 'failure') &&
          ! contains(needs.*.result, 'cancelled')
        uses: azure/trusted-signing-action@0d74250c661747df006298d0fb49944c10f16e03 # v0.5.1
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: https://weu.codesigning.azure.net/
          trusted-signing-account-name: Centreon-signature-RD
          certificate-profile-name: Cert-Signature-RD
          files-folder: agent\installer
          files-folder-filter: centreon-monitoring-agent.exe
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - name: Installer test
        run: .github/scripts/agent_installer_test.ps1
        shell: powershell

      - name: Cache monitoring agent
        uses: actions/cache/save@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          path: agent\installer\centreon-monitoring-agent.exe
          key: ${{ github.run_id }}-${{ github.sha }}-exe-centreon-monitoring-agent-${{ github.head_ref || github.ref_name }}

      - name: Upload package artifacts
        if: |
          inputs.installer_in_artifact == true ||
          (github.event_name != 'workflow_dispatch' &&
          contains(fromJson('["stable"]'), needs.get-environment.outputs.stability) &&
          ! cancelled() &&
          ! contains(needs.*.result, 'failure') &&
          ! contains(needs.*.result, 'cancelled'))
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: packages-centreon-monitoring-agent-windows
          path: |
            agent\installer\centreon-monitoring-agent.exe
            build_windows\agent\Release\centagent.exe
            build_windows\agent\Release\centagent.pdb

  unit-test-linux:
    needs: [get-environment]
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      needs.get-environment.outputs.stability != 'stable'
    strategy:
      fail-fast: false
      matrix:
        distrib: [alma8, alma9, bullseye, bookworm, jammy]
    runs-on: centreon-collect
    env:
      SCCACHE_PATH: "/usr/bin/sccache"
      SCCACHE_BUCKET: "centreon-github-sccache"
      SCCACHE_REGION: "eu-west-1"
      AWS_ACCESS_KEY_ID: ${{ secrets.COLLECT_S3_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.COLLECT_S3_SECRET_KEY }}

    container:
      image: ${{ vars.DOCKER_INTERNAL_REGISTRY_URL }}/packaging-centreon-collect-vcpkg-${{ matrix.distrib }}:${{ needs.get-environment.outputs.packaging_img_version }}
      credentials:
        username: ${{ secrets.HARBOR_CENTREON_PULL_USERNAME }}
        password: ${{ secrets.HARBOR_CENTREON_PULL_TOKEN }}

    name: unit test ${{ matrix.distrib }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install sccache
        run: |
          wget https://github.com/mozilla/sccache/releases/download/v0.9.1/sccache-v0.9.1-x86_64-unknown-linux-musl.tar.gz
          tar xzf sccache-v0.9.1-x86_64-unknown-linux-musl.tar.gz
          mv sccache-v0.9.1-x86_64-unknown-linux-musl/sccache /usr/bin/

          ${SCCACHE_PATH} --start-server
        shell: bash

      - name: Compile centreon-collect
        run: |
          CMAKE="cmake"
          if [[ "${{ matrix.distrib }}" == "alma8" || "${{ matrix.distrib }}" == "alma9" ]]; then
            CMAKE="cmake3"
          fi

          export VCPKG_ROOT=/vcpkg
          export PATH=$VCPKG_ROOT:$PATH

          mv /root/.cache /github/home/

          CXXFLAGS="-Wall -Wextra" $CMAKE \
                  -B build \
                  -DVCPKG_OVERLAY_TRIPLETS=/custom-triplets \
                  -DVCPKG_TARGET_TRIPLET=x64-linux-release \
                  -DVCPKG_OVERLAY_PORTS=/overlays \
                  -GNinja \
                  -DDEBUG_ROBOT=OFF \
                  -DCMAKE_EXPORT_COMPILE_COMMANDS=On \
                  -DCMAKE_BUILD_TYPE=Debug \
                  -DWITH_PREFIX=/usr \
                  -DWITH_PREFIX_BIN=/usr/sbin \
                  -DWITH_USER_BROKER=centreon-broker \
                  -DWITH_USER_ENGINE=centreon-engine \
                  -DWITH_GROUP_BROKER=centreon-broker \
                  -DWITH_GROUP_ENGINE=centreon-engine \
                  -DWITH_TESTING=On \
                  -DWITH_PREFIX_MODULES=/usr/share/centreon/lib/centreon-broker \
                  -DWITH_PREFIX_CONF_BROKER=/etc/centreon-broker \
                  -DWITH_PREFIX_LIB_BROKER=/usr/lib64/nagios \
                  -DWITH_PREFIX_CONF_ENGINE=/etc/centreon-engine \
                  -DWITH_PREFIX_LIB_ENGINE=/usr/lib64/centreon-engine \
                  -DWITH_PREFIX_LIB_CLIB=/usr/lib64/ \
                  -DWITH_RW_DIR=/var/lib/centreon-engine/rw \
                  -DWITH_VAR_DIR=/var/log/centreon-engine \
                  -DWITH_MODULE_SIMU=On \
                  -DCMAKE_C_COMPILER_LAUNCHER=${SCCACHE_PATH} \
                  -DCMAKE_CXX_COMPILER_LAUNCHER=${SCCACHE_PATH} \
                  -DLEGACY_ENGINE=Off \
                  -DONLY_ROBOT_CMA=ON \
                  -S .

          ninja -Cbuild
          ninja -Cbuild install
        shell: bash

      - name: Cache statistics
        run: ${SCCACHE_PATH} --show-stats
        shell: bash

      - name: Stop sccache server
        run: ${SCCACHE_PATH} --stop-server
        shell: bash

      - name: Run agent common unit tests
        run: |
          tests/ut_common --gtest_output=xml:ut_common.xml
          tests/ut_agent --gtest_output=xml:ut_agent.xml
        working-directory: build
        shell: bash

      - name: Upload test results
        if: ${{ failure() }}
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4.6.1
        with:
          name: unit-test-${{ matrix.distrib }}-reports
          path: "build/ut_*.xml"
          retention-days: 1

  package-linux:
    needs: [get-environment]
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      needs.get-environment.outputs.stability != 'stable'
    strategy:
      fail-fast: false
      matrix:
        include:
          - image: packaging-centreon-collect-vcpkg-alma8
            distrib: el8
            package_extension: rpm
            runner: centreon-collect
            arch: amd64
          - image: packaging-centreon-collect-vcpkg-alma9
            distrib: el9
            package_extension: rpm
            runner: centreon-collect
            arch: amd64
          - image: packaging-centreon-collect-vcpkg-bullseye
            distrib: bullseye
            package_extension: deb
            runner: centreon-collect
            arch: amd64
          - image: packaging-centreon-collect-vcpkg-bullseye-arm64
            distrib: bullseye
            package_extension: deb
            runner: centreon-collect-arm64
            arch: arm64
          - image: packaging-centreon-collect-vcpkg-bookworm
            distrib: bookworm
            package_extension: deb
            runner: centreon-collect
            arch: amd64
          - image: packaging-centreon-collect-vcpkg-bookworm-arm64
            distrib: bookworm
            package_extension: deb
            runner: centreon-collect-arm64
            arch: arm64
          - image: packaging-centreon-collect-vcpkg-jammy
            distrib: jammy
            package_extension: deb
            runner: centreon-collect
            arch: amd64
          - image: packaging-centreon-collect-vcpkg-jammy-arm64
            distrib: jammy
            package_extension: deb
            runner: centreon-collect-arm64
            arch: arm64

    name: package ${{ matrix.distrib }} ${{ contains(matrix.runner, 'arm') && ' arm' || '' }}

    uses: ./.github/workflows/package-collect.yml

    with:
      major_version: ${{ needs.get-environment.outputs.major_version }}
      minor_version: ${{ needs.get-environment.outputs.minor_version }}
      cma_major_version: ${{ needs.get-environment.outputs.cma_major_version }}
      cma_minor_version: ${{ needs.get-environment.outputs.cma_minor_version }}
      img_version: ${{ needs.get-environment.outputs.packaging_img_version }}
      release: ${{ needs.get-environment.outputs.release }}
      commit_hash: ${{ github.sha }}
      stability: ${{ needs.get-environment.outputs.stability }}
      legacy_engine: 'OFF'
      build_debug_packages: ${{ needs.get-environment.outputs.stability == 'testing' || contains(github.event.pull_request.labels.*.name, 'build-debug-packages') }}
      packages_in_artifact: ${{ github.event.inputs.packages_in_artifact == 'true' }}
      image: ${{ matrix.image }}
      distrib: ${{ matrix.distrib }}
      package_extension: ${{ matrix.package_extension }}
      runner: ${{ matrix.runner }}
      arch: ${{ matrix.arch }}
      is_nightly: ${{ needs.get-environment.outputs.is_nightly }}
      only_robot_cma: true
    secrets:
      collect_s3_access_key: ${{ secrets.COLLECT_S3_ACCESS_KEY }}
      collect_s3_secret_key: ${{ secrets.COLLECT_S3_SECRET_KEY }}
      registry_username: ${{ secrets.HARBOR_CENTREON_PULL_USERNAME }}
      registry_password: ${{ secrets.HARBOR_CENTREON_PULL_TOKEN }}
      rpm_gpg_key: ${{ secrets.RPM_GPG_SIGNING_KEY }}
      rpm_gpg_signing_key_id: ${{ secrets.RPM_GPG_SIGNING_KEY_ID }}
      rpm_gpg_signing_passphrase: ${{ secrets.RPM_GPG_SIGNING_PASSPHRASE }}
      jira_base_url: ${{ secrets.JIRA_BASE_URL }}
      jira_user_email: ${{ secrets.XRAY_JIRA_USER_EMAIL }}
      jira_api_token: ${{ secrets.XRAY_JIRA_TOKEN }}

  robot-test:
    needs: [get-environment, package-linux]
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      needs.get-environment.outputs.stability != 'stable' &&
      needs.get-environment.outputs.is_nightly == 'true' &&
      ! cancelled() &&
      ! contains(needs.*.result, 'failure') &&
      ! contains(needs.*.result, 'cancelled') &&
      github.repository == 'centreon/centreon-collect'

    strategy:
      fail-fast: false
      matrix:
        include:
          - distrib: el9
            image: centreon-collect-mariadb-alma9-test
            package_extension: rpm
            arch: amd64
            database_type: mariadb
            test_group_name: robot_test-mariadb-el9-amd64
            tests_params: '{}'
          - distrib: el9
            image: centreon-collect-mysql-alma9-test
            package_extension: rpm
            arch: amd64
            database_type: mysql
            test_group_name: robot_test-mysql-el9-amd64
            tests_params: '{}'
          - distrib: bullseye
            image: centreon-collect-mariadb-bullseye-arm64-test
            package_extension: deb
            arch: arm64
            database_type: mariadb
            test_group_name: robot_test-mariadb-bullseye-arm64
            tests_params: '{}'
          - distrib: bullseye
            image: centreon-collect-mariadb-bullseye-test
            package_extension: deb
            arch: amd64
            database_type: mariadb
            test_group_name: robot_test-mariadb-bullseye-amd64
            tests_params: '{}'
          - distrib: bookworm
            image: centreon-collect-mariadb-bookworm-arm64-test
            package_extension: deb
            arch: arm64
            database_type: mariadb
            test_group_name: robot_test-mariadb-bookworm-arm64
            tests_params: '{}'
          - distrib: bookworm
            image: centreon-collect-mariadb-bookworm-test
            package_extension: deb
            arch: amd64
            database_type: mariadb
            test_group_name: robot_test-mariadb-bookworm-amd64
            tests_params: '{}'
          - distrib: el9
            image: centreon-collect-mariadb-alma9-test
            package_extension: rpm
            arch: amd64
            database_type: mariadb
            test_group_name: robot_test-mariadb-el9-amd64-grpc
            tests_params: '{"default_transport":"grpc","default_bbdo_version":"3.1.0"}'
          - distrib: jammy
            image: centreon-collect-mariadb-jammy-arm64-test
            package_extension: deb
            arch: arm64
            database_type: mariadb
            test_group_name: robot_test-mariadb-jammy-arm64
            tests_params: '{}'
          - distrib: jammy
            image: centreon-collect-mariadb-jammy-test
            package_extension: deb
            arch: amd64
            database_type: mariadb
            test_group_name: robot_test-jammy-amd64
            tests_params: '{}'

    name: ${{ matrix.test_group_name }}

    uses: ./.github/workflows/robot-test.yml
    with:
      distrib: ${{ matrix.distrib }}
      arch: ${{ matrix.arch }}
      image: ${{ matrix.image }}
      image_test: ${{ matrix.image }}:${{ needs.get-environment.outputs.test_img_version }}
      package_cache_key: ${{ github.run_id }}-${{ github.sha }}-${{ matrix.package_extension }}-centreon-collect-${{ matrix.distrib }}-${{ matrix.arch }}-${{ github.head_ref || github.ref_name }}
      package_cache_path: ./*.${{ matrix.package_extension }}
      database_type: ${{ matrix.database_type }}
      tests_params: ${{ matrix.tests_params }}
      test_group_name: ${{ matrix.test_group_name }}
      is_nightly: ${{ needs.get-environment.outputs.is_nightly }}
      features_pattern: 'cma\.robot'
    secrets:
      registry_username: ${{ secrets.HARBOR_CENTREON_PULL_USERNAME }}
      registry_password: ${{ secrets.HARBOR_CENTREON_PULL_TOKEN }}
      collect_s3_access_key: ${{ secrets.COLLECT_S3_ACCESS_KEY }}
      collect_s3_secret_key: ${{ secrets.COLLECT_S3_SECRET_KEY }}
      xray_client_id: ${{ secrets.XRAY_CLIENT_ID }}
      xray_client_secret: ${{ secrets.XRAY_CLIENT_SECRET }}
      jira_base_url: ${{ secrets.JIRA_BASE_URL }}
      jira_user_email: ${{ secrets.XRAY_JIRA_USER_EMAIL }}
      jira_api_token: ${{ secrets.XRAY_JIRA_TOKEN }}

  deliver-rpm:
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      contains(fromJson('["unstable", "testing"]'), needs.get-environment.outputs.stability) &&
      ! cancelled() &&
      ! contains(needs.*.result, 'failure') &&
      ! contains(needs.*.result, 'cancelled') &&
      github.repository == 'centreon/centreon-collect'

    needs: [get-environment, build-and-test-agent-windows, robot-test]
    runs-on: centreon-ubuntu-22.04
    strategy:
      matrix:
        include:
          - distrib: el8
            arch: amd64
          - distrib: el9
            arch: amd64

    name: deliver ${{ matrix.distrib }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Publish RPM packages
        uses: ./.github/actions/delivery
        with:
          module_name: monitoring-agent
          distrib: ${{ matrix.distrib }}
          major_version: ${{ needs.get-environment.outputs.major_version }}
          artifactory_token: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
          cache_key: ${{ github.run_id }}-${{ github.sha }}-rpm-centreon-monitoring-agent-${{ matrix.distrib }}-${{ matrix.arch }}-${{ github.head_ref || github.ref_name }}
          stability: ${{ needs.get-environment.outputs.stability }}
          release_type: ${{ needs.get-environment.outputs.release_type }}
          is_cloud: ${{ needs.get-environment.outputs.is_cloud }}

  deliver-deb:
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      contains(fromJson('["unstable", "testing"]'), needs.get-environment.outputs.stability) &&
      ! cancelled() &&
      ! contains(needs.*.result, 'failure') &&
      ! contains(needs.*.result, 'cancelled') &&
      github.repository == 'centreon/centreon-collect' &&
      (needs.get-environment.outputs.is_cloud == 'false' || needs.get-environment.outputs.stability == 'unstable')

    needs: [get-environment, build-and-test-agent-windows, robot-test]
    runs-on: centreon-ubuntu-22.04
    strategy:
      matrix:
        include:
          - distrib: bullseye
            arch: amd64
          - distrib: bullseye
            arch: arm64
          - distrib: bookworm
            arch: amd64
          - distrib: bookworm
            arch: arm64
          - distrib: jammy
            arch: amd64
          - distrib: jammy
            arch: arm64

    name: deliver ${{ matrix.distrib }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Publish DEB packages
        uses: ./.github/actions/delivery
        with:
          module_name: monitoring-agent
          distrib: ${{ matrix.distrib }}
          major_version: ${{ needs.get-environment.outputs.major_version }}
          artifactory_token: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
          cache_key: ${{ github.run_id }}-${{ github.sha }}-deb-centreon-monitoring-agent-${{ matrix.distrib }}-${{ matrix.arch }}-${{ github.head_ref || github.ref_name }}
          stability: ${{ needs.get-environment.outputs.stability }}
          release_type: ${{ needs.get-environment.outputs.release_type }}
          is_cloud: ${{ needs.get-environment.outputs.is_cloud }}

  deliver-windows:
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      contains(fromJson('["unstable", "testing"]'), needs.get-environment.outputs.stability) &&
      ! cancelled() &&
      ! contains(needs.*.result, 'failure') &&
      ! contains(needs.*.result, 'cancelled') &&
      github.repository == 'centreon/centreon-collect' &&
      (needs.get-environment.outputs.is_cloud == 'false' || needs.get-environment.outputs.stability == 'unstable')

    needs: [get-environment, build-and-test-agent-windows, robot-test]
    runs-on: windows-latest

    steps:
      - uses: jfrog/setup-jfrog-cli@f748a0599171a192a2668afee8d0497f7c1069df # v4.5.6
        env:
          JF_URL: https://centreon.jfrog.io
          JF_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}

      - name: Restore cache monitoring agent
        uses: actions/cache/restore@d4323d4df104b026a6aa633fdb11d772146be0bf # v4.2.2
        with:
          path: agent\installer\centreon-monitoring-agent.exe
          key: ${{ github.run_id }}-${{ github.sha }}-exe-centreon-monitoring-agent-${{ github.head_ref || github.ref_name }}
          fail-on-cache-miss: true

      - name: Deliver
        run: |
          Write-Host "[DEBUG] deliver to testing - Major version: ${{ needs.get-environment.outputs.cma_major_version }}"
          Write-Host "[DEBUG] deliver to testing - Minor version: ${{ needs.get-environment.outputs.cma_minor_version }}"

          $VERSION = "${{ needs.get-environment.outputs.cma_major_version }}.${{ needs.get-environment.outputs.cma_minor_version }}"
          $MODULE_NAME = "monitoring-agent-$VERSION"
          $STABILITY = "${{ needs.get-environment.outputs.stability }}"

          $TARGET_PATH = "installers/monitoring-agent/${{ needs.get-environment.outputs.cma_major_version }}/$STABILITY/$MODULE_NAME/"

          $VERSION_EXE = "centreon-monitoring-agent-${VERSION}.exe"

          Copy-Item -Path "agent\installer\centreon-monitoring-agent.exe" -Destination "${VERSION_EXE}"
          Write-Host "[DEBUG] deliver testing to - Target path: ${TARGET_PATH}"
          jf rt upload $VERSION_EXE "${TARGET_PATH}" --sync-deletes="${TARGET_PATH}"
        shell: powershell

  promote-linux:
    needs: [get-environment, deliver-rpm, deliver-deb]
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      (contains(fromJson('["stable", "testing"]'), needs.get-environment.outputs.stability) && github.event_name != 'workflow_dispatch') &&
      ! cancelled() &&
      ! contains(needs.*.result, 'failure') &&
      ! contains(needs.*.result, 'cancelled') &&
      github.repository == 'centreon/centreon-collect'

    runs-on: centreon-ubuntu-22.04
    strategy:
      matrix:
        distrib: [el8, el9, bookworm]

    steps:
      - name: Checkout sources
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Promote ${{ matrix.distrib }} to stable
        uses: ./.github/actions/promote-to-stable
        with:
          artifactory_token: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}
          module_name: monitoring-agent
          distrib: ${{ matrix.distrib }}
          major_version: ${{ needs.get-environment.outputs.major_version }}
          stability: ${{ needs.get-environment.outputs.stability }}
          github_ref_name: ${{ github.ref_name }}
          release_type: ${{ needs.get-environment.outputs.release_type }}
          is_cloud: ${{ needs.get-environment.outputs.is_cloud }}

  promote-windows:
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      (contains(fromJson('["stable"]'), needs.get-environment.outputs.stability) && github.event_name != 'workflow_dispatch') &&
      ! cancelled() &&
      ! contains(needs.*.result, 'failure') &&
      ! contains(needs.*.result, 'cancelled') &&
      github.repository == 'centreon/centreon-collect'

    needs: [get-environment, deliver-windows]
    runs-on: windows-latest

    steps:
      - uses: jfrog/setup-jfrog-cli@f748a0599171a192a2668afee8d0497f7c1069df # v4.5.6
        env:
          JF_URL: https://centreon.jfrog.io
          JF_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}

      - name: Promote testing to stable
        run: |
          Write-Host "[DEBUG] promote to stable - Major version: ${{ needs.get-environment.outputs.cma_major_version }}"
          Write-Host "[DEBUG] promote to stable - Minor version: ${{ needs.get-environment.outputs.cma_minor_version }}"

          $VERSION= "${{ needs.get-environment.outputs.cma_major_version }}.${{ needs.get-environment.outputs.cma_minor_version }}"
          $MODULE_NAME= "monitoring-agent-${{ needs.get-environment.outputs.cma_major_version }}.${{ needs.get-environment.outputs.cma_minor_version }}"
          $STABILITY= "${{ needs.get-environment.outputs.stability }}"

          $SRC_PATH = "installers/monitoring-agent/${{ needs.get-environment.outputs.major_version }}/testing/$MODULE_NAME/"
          $TARGET_PATH = "installers/monitoring-agent/${{ needs.get-environment.outputs.major_version }}/$STABILITY/$MODULE_NAME/"

          $VERSION_EXE = "centreon-monitoring-agent-${VERSION}.exe"

          Write-Host "[DEBUG] promote to stable from: ${SRC_PATH}${VERSION_EXE}"

          jf rt download "${SRC_PATH}${VERSION_EXE}" --flat

          Write-Host "[DEBUG] promote to stable ${VERSION_EXE} to path: ${TARGET_PATH}"

          jf rt upload $VERSION_EXE "${TARGET_PATH}" --sync-deletes="${TARGET_PATH}"
        shell: powershell

  test-promote-windows:
    needs: [get-environment]
    runs-on: windows-latest

    steps:
      - uses: jfrog/setup-jfrog-cli@f748a0599171a192a2668afee8d0497f7c1069df # v4.5.6
        env:
          JF_URL: https://centreon.jfrog.io
          JF_ACCESS_TOKEN: ${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}

      - name: Promote testing to stable
        run: |
          Write-Host "[DEBUG] promote to stable - Major version: ${{ needs.get-environment.outputs.cma_major_version }}"
          Write-Host "[DEBUG] promote to stable - Minor version: ${{ needs.get-environment.outputs.cma_minor_version }}"

          $VERSION= "${{ needs.get-environment.outputs.cma_major_version }}.${{ needs.get-environment.outputs.cma_minor_version }}"
          $MODULE_NAME= "monitoring-agent-${{ needs.get-environment.outputs.cma_major_version }}.${{ needs.get-environment.outputs.cma_minor_version }}"
          $STABILITY= "${{ needs.get-environment.outputs.stability }}"

          $SRC_PATH = "installers/monitoring-agent/${{ needs.get-environment.outputs.major_version }}/unstable/$MODULE_NAME/"
          $TARGET_PATH = "installers/monitoring-agent/${{ needs.get-environment.outputs.major_version }}/$STABILITY/$MODULE_NAME/"

          $VERSION_EXE = "centreon-monitoring-agent-${VERSION}.exe"

          Write-Host "[DEBUG] promote to stable from: ${SRC_PATH}${VERSION_EXE}"

          jf rt download "${SRC_PATH}${VERSION_EXE}" --flat --fail-no-op

          Write-Host "[DEBUG] promote to stable ${VERSION_EXE} to path: ${TARGET_PATH}"

          # jf rt upload $VERSION_EXE "${TARGET_PATH}" --sync-deletes="${TARGET_PATH}"
        shell: powershell

      - name: Deliver assets to github release
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            // const monitoringAgentRelease = 'centreon-monitoring-agent-${{ needs.get-environment.outputs.cma_major_version }}.${{ needs.get-environment.outputs.cma_minor_version }}';
            const monitoringAgentRelease = 'centreon-collect-24.10.5';

            const { data: releases } = await github.rest.repos.listReleases({
              ...context.repo,
              per_page: 100,
              page: 1,
            });

            if (releases.length === 0) {
              core.warning(`Release ${monitoringAgentRelease} does not exist`);
              return;
            }

            for (const release of releases) {
              if (release.tag_name !== monitoringAgentRelease) {
                continue;
              }

              const fs = require('fs');
              const fileName = 'centreon-monitoring-agent-${{ needs.get-environment.outputs.cma_major_version }}.${{ needs.get-environment.outputs.cma_minor_version }}.exe';
              github.rest.repos.uploadReleaseAsset({
                ...context.repo,
                release_id: release.id,
                name: fileName,
                data: await fs.readFile(fileName),
              });
            }

  set-skip-label:
    needs: [get-environment, deliver-rpm, deliver-deb, deliver-windows, promote-linux, promote-windows]
    if: |
      needs.get-environment.outputs.skip_workflow == 'false' &&
      ! cancelled() &&
      ! contains(needs.*.result, 'failure') &&
      ! contains(needs.*.result, 'cancelled')
    uses: ./.github/workflows/set-pull-request-skip-label.yml
