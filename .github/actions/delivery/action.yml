name: "delivery"
description: "RPM and DEB packages delivery Centreon"
inputs:
  module_name:
    description: "The package module name"
    required: true
  distrib:
    description: "The distribution used for packaging"
    required: true
  major_version:
    description: "Centreon packaged major version"
    required: true
  cache_key:
    description: "The cached package key"
    required: true
  artifactory_token:
    description: "The token for artifactory"
    required: true
  stability:
    description: "The package stability (stable, testing, unstable)"
    required: true
  release_type:
    description: "Type of release (hotfix, release)"
    required: true
  is_cloud:
    description: "Release context (cloud or not cloud)"
    required: true

runs:
  using: "composite"
  steps:
    - name: Build name for RPM
      shell: bash
      if: ${{ startsWith(inputs.distrib, 'el') }}
      run: |
        echo "extfile=rpm" >> $GITHUB_ENV

    - name: Build name for DEB
      shell: bash
      if: ${{ contains(fromJSON('["bullseye", "bookworm", "jammy"]'), inputs.distrib) }}
      run: |
        echo "extfile=deb" >> $GITHUB_ENV

    - name: Use cache files
      uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
      with:
        path: ./*.${{ env.extfile }}
        key: ${{ inputs.cache_key }}
        fail-on-cache-miss: true

    - uses: jfrog/setup-jfrog-cli@45d604504ed4cf717138383936c447afab73a0be # v4.5.10
      env:
        JF_URL: https://centreon.jfrog.io
        JF_ACCESS_TOKEN: ${{ inputs.artifactory_token }}

    - if: ${{ env.extfile == 'rpm' }}
      name: Publish RPMs
      run: |
        set -eux

        FILES="*.${{ env.extfile }}"

        # DEBUG
        echo "[DEBUG] - Major version: ${{ inputs.major_version }}"
        echo "[DEBUG] - Distrib: ${{ inputs.distrib }}"
        echo "[DEBUG] - module_name: ${{ inputs.module_name }}"
        echo "[DEBUG] - is_cloud: ${{ inputs.is_cloud }}"
        echo "[DEBUG] - release_type: ${{ inputs.release_type }}"
        echo "[DEBUG] - stability: ${{ inputs.stability }}"

        # Make sure all required inputs are NOT empty
        if [[ -z "${{ inputs.module_name }}" || -z "${{ inputs.distrib }}" || -z ${{ inputs.stability }} || -z ${{ inputs.major_version }} || -z "${{ inputs.is_cloud }}" ]]; then
          echo "Some mandatory inputs are empty, please check the logs."
          exit 1
        fi

        # Create ARCH dirs
        mkdir noarch x86_64

        # Get ARCH target for files to deliver and regroupe them by ARCH
        for FILE in $FILES; do
          echo "[DEBUG] - File: $FILE"

          ARCH=$(echo $FILE | grep -oP '(x86_64|noarch)')

          echo "[DEBUG] - Arch: $ARCH"

          mv "$FILE" "$ARCH"
        done

        # Build upload target path based on is_cloud and release_type values
        # if cloud + hotfix or cloud + release, deliver to internal testing-<release_type>
        # if cloud + develop, delivery to internal unstable
        # if non-cloud, delivery to onprem testing or unstable

        # CLOUD + HOTFIX + REPO STANDARD INTERNAL OR CLOUD + RELEASE + REPO STANDARD INTERNAL
        if [[ "${{ inputs.is_cloud }}" == "true" && ( "${{ inputs.release_type }}" == "hotfix" || "${{ inputs.release_type }}" == "release" ) ]]; then
          echo "[DEBUG] : Release cloud + ${{ inputs.release_type }}, using rpm-standard-internal."
          ROOT_REPO_PATHS="rpm-standard-internal"
          UPLOAD_REPO_PATH="${{ inputs.major_version }}/${{ inputs.distrib }}/${{ inputs.stability }}-${{ inputs.release_type }}/$ARCH/${{ inputs.module_name }}/"

        # CLOUD + NOT HOTFIX OR CLOUD + NOT RELEASE + REPO STANDARD INTERNAL
        elif [[ "${{ inputs.is_cloud }}" == "true" && ( "${{ inputs.release_type }}" != "hotfix" && "${{ inputs.release_type }}" != "release" ) ]]; then
          echo "[DEBUG] : Release cloud + NOT ${{ inputs.release_type }}, using rpm-standard-internal."
          ROOT_REPO_PATHS="rpm-standard-internal"
          UPLOAD_REPO_PATH="${{ inputs.major_version }}/${{ inputs.distrib }}/${{ inputs.stability }}-${{ inputs.release_type }}/$ARCH/${{ inputs.module_name }}/"

        # NON-CLOUD + (HOTFIX OR RELEASE) + REPO STANDARD
        elif [[ "${{ inputs.is_cloud }}" == "false" ]]; then
          echo "[DEBUG] : NOT Release cloud + ${{ inputs.release_type }}, using rpm-standard."
          ROOT_REPO_PATHS="rpm-standard"
          UPLOAD_REPO_PATH="${{ inputs.major_version }}/${{ inputs.distrib }}/${{ inputs.stability }}/$ARCH/${{ inputs.module_name }}/"

        #  NOT VALID, DO NOT DELIVER
        else
          echo "::error:: Invalid combination of release_type [${{ inputs.release_type }}] and is_cloud [${{ inputs.is_cloud }}]"
          exit 1
        fi

        # Deliver based on inputs
        for ROOT_REPO_PATH in "$ROOT_REPO_PATHS"; do
          for ARCH in "noarch" "x86_64"; do
            if [ "$(ls -A $ARCH)" ]; then
              if [ "${{ inputs.stability }}" == "stable" ]; then
                echo "[DEBUG] - Stability is ${{ inputs.stability }}, not delivering."
              elif [ "${{ inputs.stability }}" == "testing" ]; then
                jf rt upload "$ARCH/*.rpm" "$ROOT_REPO_PATH/$UPLOAD_REPO_PATH" --sync-deletes="$ROOT_REPO_PATH/$UPLOAD_REPO_PATH" --flat
              else
                jf rt upload "$ARCH/*.rpm" "$ROOT_REPO_PATH/${{ inputs.major_version }}/${{ inputs.distrib }}/${{ inputs.stability }}/$ARCH/${{ inputs.module_name }}/" --sync-deletes="$ROOT_REPO_PATH/${{ inputs.major_version }}/${{ inputs.distrib }}/${{ inputs.stability }}/$ARCH/${{ inputs.module_name }}/" --flat
              fi
            fi
          done
        done

        # In case of CMA, we also copy it in /installers
        for FILE in "centreon-monitoring-agent*.${{ env.extfile }}" ; do
          echo "[DEBUG] - CMA File: $FILE"

          VERSION="${{ inputs.cma_major_version }}.${{ inputs.cma_minor_version }}"
          MODULE_NAME="monitoring-agent-$VERSION"
          STABILITY="${{ inputs.stability }}"

          TARGET_PATH="installers/monitoring-agent/${{ inputs.cma_major_version }}/$STABILITY/$MODULE_NAME/"

          echo "[DEBUG] - CMA Major version: $VERSION"

          jf rt upload "$FILE" "${TARGET_PATH}" --sync-deletes="${TARGET_PATH}"
        done

      shell: bash

    - if: ${{ env.extfile == 'deb' }}
      name: Publish DEBs
      run: |
        FILES="*.${{ env.extfile }}"

        # DEBUG
        echo "[DEBUG] - Major version: ${{ inputs.major_version }}"
        echo "[DEBUG] - Distrib: ${{ inputs.distrib }}"
        echo "[DEBUG] - module_name: ${{ inputs.module_name }}"
        echo "[DEBUG] - is_cloud: ${{ inputs.is_cloud }}"
        echo "[DEBUG] - release_type: ${{ inputs.release_type }}"
        echo "[DEBUG] - stability: ${{ inputs.stability }}"

        # Make sure all required inputs are NOT empty
        if [[ -z "${{ inputs.module_name }}" || -z "${{ inputs.distrib }}" || -z ${{ inputs.stability }} || -z ${{ inputs.major_version }} || -z "${{ inputs.is_cloud }}" ]]; then
          echo "Some mandatory inputs are empty, please check the logs."
          exit 1
        fi

        # Set ROOT_REPO_PATH based on inputs
        if [[ "${{ inputs.is_cloud }}" == "true" ]]; then
          ROOT_REPO_PATH="apt-standard-internal-${{ inputs.stability }}"
        elif [[ "${{ inputs.distrib }}" == "jammy" ]]; then
          ROOT_REPO_PATH="ubuntu-standard-${{ inputs.major_version }}-${{ inputs.stability }}"
        else
          ROOT_REPO_PATH="apt-standard-${{ inputs.major_version }}-${{ inputs.stability }}"
        fi

        # Cleanup (equivalent to --sync-deletes done with RPMs)
        # This is a workaround the fact that jfrog cli does not allow upload
        # of multiple artifacts at once to an APT repository

        # For each local artifact
        for file in $FILES; do
          # build a search pattern using ARTIFACT_BASENAME+OS_DISTRIB+ARCH
          VERSION=${{ inputs.major_version }}
          BASENAME=$(echo "$file" | cut -d '_' -f 1)
          OS_DISTRIB=$(echo "$file" | sed -n 's/.*+\(deb[0-9]\+\).*/\1/p')
          ARCH=$(echo $file | cut -d '_' -f3 | cut -d '.' -f1)

          # debug
          echo "[DEBUG] - Version: $VERSION"
          echo "[DEBUG] - Basename: $BASENAME"
          echo "[DEBUG] - OS_distrib: $OS_DISTRIB"
          echo "[DEBUG] - Arch: $ARCH"

          SEARCH_PATH="$ROOT_REPO_PATH/pool/${{ inputs.module_name }}/$BASENAME_*$OS_DISTRIB*$ARCH*.deb"

          # search and delete all remote artifacts matching this pattern 
          echo "Searching and deleting $SEARCH_PATH"
          jf rt delete "$SEARCH_PATH"

          # upload local artifact
          echo "Uploading $file"
          jf rt upload "$file" "$ROOT_REPO_PATH/pool/${{ inputs.module_name }}/" --deb "${{ inputs.distrib }}/main/$ARCH"
        done

        # In case of CMA, we also copy it in /installers
        for FILE in "centreon-monitoring-agent*.${{ env.extfile }}" ; do
          echo "[DEBUG] - CMA File: $FILE"

          VERSION="${{ inputs.cma_major_version }}.${{ inputs.cma_minor_version }}"
          MODULE_NAME="monitoring-agent-$VERSION"
          STABILITY="${{ inputs.stability }}"

          TARGET_PATH="installers/monitoring-agent/${{ inputs.cma_major_version }}/$STABILITY/$MODULE_NAME/"

          echo "[DEBUG] - CMA Major version: $VERSION"

          jf rt upload "$FILE" "${TARGET_PATH}" --sync-deletes="${TARGET_PATH}"
        done

      shell: bash
