name: "delivery"
description: "RPM and DEB packages delivery Centreon"
inputs:
  module_name:
    description: "The name of the module"
    required: true
  distrib:
    description: "The distribution used for packaging"
    required: true
  version:
    description: "Centreon packaged version"
    required: true
  cache_key:
    description: "The cached package key"
    required: true
  artifactory_token:
    description: "The token for artifactory"
    required: true
  stability:
    description: "The package stability (stable, testing, unstable)"
    required: true
  release_type:
    description: "Type of release (hotfix, release)"
    required: true
  release_cloud:
    description: "Release context (cloud or not cloud)"
    required: true

runs:
  using: "composite"
  steps:
    - name: Build name for RPM
      shell: bash
      if: ${{ inputs.distrib == 'el7' || inputs.distrib == 'el8' }}
      run: |
        echo "extfile=rpm" >> $GITHUB_ENV

    - name: Build name for DEB
      shell: bash
      if: ${{ inputs.distrib == 'bullseye' }}
      run: |
        echo "extfile=deb" >> $GITHUB_ENV

    - name: detect stability
      run: |
        if [[ -z "$GITHUB_HEAD_REF" ]];
        then
          BRANCHNAME="$GITHUB_REF_NAME"
        else
          BRANCHNAME="$GITHUB_HEAD_REF"
        fi

        case "$BRANCHNAME" in
          develop | dev-[2-9][0-9].[0-9][0-9].x)
            echo "stability=unstable" >> $GITHUB_ENV
            ;;
          release* | hotfix*)
            echo "stability=testing" >> $GITHUB_ENV
            ;;
          master | [2-9][0-9].[0-9][0-9].x)
            echo "stability=stable" >> $GITHUB_ENV
            ;;
          *)
            echo "stability=canary" >> $GITHUB_ENV
            ;;
        esac
      shell: bash

    - name: Use cache files
      uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 # v4.0.0
      with:
        path: ./*.${{ env.extfile }}
        key: ${{ inputs.cache_key }}
        restore-keys: ${{ inputs.cache_key }}

    - uses: jfrog/setup-jfrog-cli@901bb9632db90821c2d3f076012bdeaf66598555 # v3.4.1
      env:
        JF_URL: https://centreon.jfrog.io
        JF_ACCESS_TOKEN: ${{ inputs.artifactory_token }}

    - if: ${{ startsWith(inputs.distrib, 'el') && env.stability != 'canary' }}
      name: Publish RPMs
      run: |
        set -eux

        FILES="*.${{ env.extfile }}"

        echo "[DEBUG] - Version: ${{ inputs.version }}"
        echo "[DEBUG] - Distrib: ${{ inputs.distrib }}"

        if [ -z "${{ inputs.module_name }}" ]; then
          echo "module name is required"
          exit 1
        fi

        if [ -z "${{ inputs.distrib }}" ]; then
          echo "distrib is required"
          exit 1
        fi

        # DEBUG
        echo "[DEBUG] - Version: ${{ inputs.version }}"
        echo "[DEBUG] - Distrib: ${{ inputs.distrib }}"
        echo "[DEBUG] - module_name: ${{ inputs.module_name }}"
        echo "[DEBUG] - release_cloud: ${{ inputs.release_cloud }}"
        echo "[DEBUG] - release_type: ${{ inputs.release_type }}"

        # Create ARCH dirs
        mkdir noarch x86_64

        # Get ARCH target for files to deliver and regroupe them by ARCH
        for FILE in $FILES; do
          echo "[DEBUG] - File: $FILE"
          ARCH=$(echo $FILE | grep -oP '(x86_64|noarch)')
          echo "[DEBUG] - Arch: $ARCH"
          cp "$FILE" "$ARCH"
        done

        # Build upload target path based on release_cloud and release_type values
        # if cloud, deliver to testing-<release_type>
        # if non-cloud, delivery to testing as usual
        if [[ ${{ inputs.release_cloud }} -eq 1 && ${{ inputs.release_type }} == "hotfix" ]] || [[ ${{ inputs.release_cloud }} -eq 1 && ${{ inputs.release_type }} == "release" ]]; then
          ROOT_REPO_PATHS="rpm-standard-internal"
          UPLOAD_REPO_PATH="${{ inputs.version }}/${{ inputs.distrib }}/${{ inputs.stability }}-${{ inputs.release_type }}/$ARCH/RPMS/${{ inputs.module_name }}/"
        elif [[ ${{ inputs.release_cloud }} -eq 0 ]]; then
          ROOT_REPO_PATHS="rpm-standard"
          UPLOAD_REPO_PATH="${{ inputs.version }}/${{ inputs.distrib }}/${{ inputs.stability }}/$ARCH/RPMS/${{ inputs.module_name }}/"
        else
          echo "Invalid combination of release_type and release_cloud"
          exit 1
        fi

        # Deliver based on inputs
        for ROOT_REPO_PATH in "$ROOT_REPO_PATHS"; do
          for ARCH in "noarch" "x86_64"; do
            if [ "$(ls -A $ARCH)" ]; then
              if [ "${{ inputs.stability }}" == "stable" ]; then
                echo "[DEBUG] - Stability is ${{ inputs.stability }}, not delivering."
              else
                jf rt upload "$ARCH/*.rpm" "$ROOT_REPO_PATH/$UPLOAD_REPO_PATH" --flat
              fi
            fi
          done
        done
      shell: bash

    - if: ${{ inputs.distrib == 'bullseye' && env.stability != 'canary' }}
      name: Publish DEBs
      run: |
        FILES="*.${{ env.extfile }}"

        for FILE in $FILES; do
          echo "[DEBUG] - File: $FILE"

          VERSION=${{ inputs.version }}
          DISTRIB=$(echo $FILE | cut -d '_' -f2 | cut -d '-' -f2)
          ARCH=$(echo $FILE | cut -d '_' -f3 | cut -d '.' -f1)

          echo "[DEBUG] - Version: $VERSION"

          jf rt upload "$FILE" "apt-standard-${{ inputs.version }}-${{ env.stability }}/pool/${{ inputs.module_name }}/" --deb "${{ inputs.distrib }}/main/$ARCH"
        done
      shell: bash
