name: "deliver-github-asset"
description: "Deliver asset to github release"
inputs:
  file_pattern:
    description: "The path to the file to upload"
    required: true
  github_release:
    description: "The github release name"
    required: true
  token_download_centreon_com:
    description: "The token to call download.centreon.com api"
    required: false

runs:
  using: "composite"
  steps:
    - name: Deliver asset to github release
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      env:
        FILE_PATTERN: ${{ inputs.file_pattern }}
        GITHUB_RELEASE: ${{ inputs.github_release }}
        TOKEN_DOWNLOAD_CENTREON_COM: ${{ inputs.token_download_centreon_com }}
      with:
        script: |
          const path = require('path');
          const fs = require('fs');

          const monitoringAgentRelease = process.env.GITHUB_RELEASE;
          const filePattern = process.env.FILE_PATTERN;

          const delay = ms => new Promise(res => setTimeout(res, ms));

          let releaseId = null;

          for (let i = 0; i < 10; i++) {
            const { data: releases } = await github.rest.repos.listReleases({
              ...context.repo,
              per_page: 100,
              page: 1,
            });

            for (const release of releases) {
              if (release.tag_name === monitoringAgentRelease) {
                releaseId = release.id;
                break;
              }
            }

            if (releaseId !== null) {
              break;
            }

            console.log(`Release ${monitoringAgentRelease} not found, retrying...`);

            await delay(30000);
          }

          if (releaseId === null) {
            core.warning(`Release ${monitoringAgentRelease} does not exist`);
            return;
          }

          const globber = await glob.create(filePattern);
          for await (const file of globber.globGenerator()) {
            const fileName = path.basename(file);

            github.rest.repos.uploadReleaseAsset({
              ...context.repo,
              release_id: releaseId,
              name: fileName,
              data: fs.readFileSync(file),
            });

            core.info(`Asset ${fileName} uploaded to release ${monitoringAgentRelease}`);

            if (process.env.TOKEN_DOWNLOAD_CENTREON_COM) {
              const matches = fileName.match(/^([\w-]+)-(\d+\.\d+)\.(\d+).*(\.\w+)$/);
              if (matches) {
                const product = matches[1];
                const majorVersion = matches[2];
                const minorVersion = matches[3];
                const extension = matches[4];

                const fileHash = require('crypto').createHash('md5').update(fs.readFileSync(file)).digest('hex');
                const fileSize = fs.statSync(file).size;

                const downloadUrl = new URL('https://download.centreon.com/api/');
                const downloadParams = {
                  token: process.env.TOKEN_DOWNLOAD_CENTREON_COM,
                  product: product,
                  release: majorVersion,
                  version: `${majorVersion}.${minorVersion}`,
                  extension: extension,
                  md5: fileHash,
                  size: fileSize,
                  ddos: 0,
                  dryrun: 0,
                };
                downloadUrl.search = new URLSearchParams(downloadParams).toString();
                await fetch(downloadUrl);

                core.info(`Asset ${fileName} uploaded to download.centreon.com`);
              } else {
                core.warning(`Asset ${fileName} cannot be parsed to extract product and version information, skipping download.centreon.com upload`);
              }
            }
          }
