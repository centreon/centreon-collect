name: "veracode-generate-binary"
description: "Prepare binary to be analyzed"
inputs:
  cache_key:
    description: key used to identify the cache
    required: true
  is_cpp_project:
    description: generate binary from cpp projects
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Check common inputs validity
      run : |
        if [[ -z "${{ inputs.cache_key }}" ]]; then
          echo "[FATAL] - At least one mandatory argument is missing. killing process"
          echo "[INFO] - cache key = ${{ inputs.cache_key }}"
          exit 1
        fi
      shell: bash

    - name: Compile cpp sources
      if: inputs.is_cpp_project == 'yes'
      run: |
        rm -rf /src/build
        mkdir /src/build
        cd /src/build/

        sudo pip3 install conan==1.57.0 --prefix=/usr --upgrade
        sudo conan install .. -s compiler.cppstd=14 -s compiler.libcxx=libstdc++11 --build=missing

        # If verbosity is required add : -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
        sudo cmake \
          -G "Ninja" \
          -DCMAKE_CXX_FLAGS="-gdwarf-2 -g3 -O0 -fno-builtin" \
          -DWITH_TESTING=OFF \
          -DWITH_BENCH=OFF \
          -DWITH_MODULE_SIMU=OFF \
          -DCMAKE_INSTALL_PREFIX=/usr \
          -DWITH_STARTUP_SCRIPT=systemd \
          -DWITH_ENGINE_LOGROTATE_SCRIPT=ON \
          -DWITH_USER_BROKER=centreon-broker \
          -DWITH_GROUP_BROKER=centreon-broker \
          -DWITH_USER_ENGINE=centreon-engine \
          -DWITH_GROUP_ENGINE=centreon-engine \
          -DWITH_VAR_DIR=/var/log/centreon-engine \
          -DWITH_DAEMONS=ON \
          -DWITH_CREATE_FILES=OFF \
          -DWITH_CONFIG_FILES=ON \
          -DCMAKE_BUILD_TYPE=RelWithDebInfo \
          ..

        sudo ninja

        # clean useless files
        mv build full_build
        mkdir build
        mv -f full_build/bin build
        mv -f full_build/lib build
        for file in $( find ./ -name "*.o" -o -name "*.a" -o -name "*.h" ); do
          rm -f $file
        done
        rm -rf full_build

      shell: bash

    - name: Exclude development files
      run: |
        if [[ -f ".veracode-exclusions" ]]; then
          for LINE in $( cat .veracode-exclusions | sed 's/[^a-zA-Z0-9_./-]//g' | sed -r 's/\.\./\./g' ); do
            if [[ -d "$LINE" ]]; then
              rm -rf "$LINE"
              echo "[INFO] - folder removed from analysis = '$LINE'"
            elif [[ -e "$LINE" ]]; then
              rm -f "$LINE"
              echo "[INFO] - file removed from analysis = '$LINE'"
            elif [[ -z "$LINE" ]]; then
              echo "[INFO] - empty directive. Skipping this line"
            else
              echo "[INFO] - target to exclude not found. Skipping = '$LINE'"
            fi
          done
        else
          echo "[WARN] - No '.veracode-exclusions' file found for this module. Skipping exclusion step"
        fi
      shell: bash

    - name: Create ZIP file
      run: |
        tar -czvf "${{ inputs.cache_key }}.tar.gz" * .*
      shell: bash

    - uses: actions/cache/save@v3
      with:
        path: "${{ inputs.cache_key }}.tar.gz"
        key: ${{ inputs.cache_key }}
